<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>协同过滤</title>
      <link href="/2024/06/15/collab/"/>
      <url>/2024/06/15/collab/</url>
      
        <content type="html"><![CDATA[<h1 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h1><p>概率矩阵分解（PMF），另一种时深度学习方法</p><p>为用户推荐产品的一般解决方案：协同过滤，查看当前用户使用过或喜欢过哪些产品，找到使用过或喜欢类似产品的其他用户，然后推荐这些用户使用过或喜欢过的其他产品给当前用户。关键底层思想：潜在特征。</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>电影推荐，使用MovieLens，包含千万条电影评分数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>collab <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>tabular<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span>path <span class="token operator">=</span> untar_data<span class="token punctuation">(</span>URLs<span class="token punctuation">.</span>ML_100k<span class="token punctuation">)</span>ratings <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">'u.data'</span><span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'movie'</span><span class="token punctuation">,</span><span class="token string">'rating'</span><span class="token punctuation">,</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ratings<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406210902334.png" width="380">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">数据集</div></center><p>然而以交叉表的形式展示更直观</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406210903897.png" width="600">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">交叉表</div></center><p>如果我们可以清楚地知道每个用户喜欢每个重要的电影类别（如类型、年龄、最喜爱的导演和演员等）的程度，同时我们也清楚每个电影的这些类别信息，那么一个简单的方法就是将每部电影和每个用户的对应属性的特征值相乘后再求和。例如，如果我们使用-1到+1的数值来表示匹配程度，其中正数表示更强的匹配，负数表示更弱的匹配，并且我们有三个类别（科幻、动作和老电影）如下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">last_skywalker <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.98</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>user1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.9</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>user1<span class="token operator">*</span>last_skywalker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 2.1420000000000003</span>casablanca <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.99</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>user1<span class="token operator">*</span>casablanca<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># -1.611</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>点积（内积）：将两个向量的各元素分别相乘，然后将其结果进行求和的数学运算。</p></blockquote><h2 id="学习潜在特征"><a href="#学习潜在特征" class="headerlink" title="学习潜在特征"></a>学习潜在特征</h2><p><strong>步骤1</strong>：随机初始化一些参数。这些参数将是每个用户和电影的一组潜在特征。我们需要决定使用多少个潜在特征。为了说明目的，我们现在先使用5个。因为每个用户和每部电影都会有一组这样的特征，我们可以在交叉表中用户和电影旁边显示这些随机初始化的值，然后在中间填入每对组合的点积。</p><p><strong>步骤2</strong>：计算预测。可以通过取每部电影与每个用户的点积来实现这一点。例如，如果第一个潜在用户特征代表用户喜欢动作电影的程度，而第一个潜在电影特征代表电影是否包含大量动作场面，那么如果用户喜欢动作电影且电影确实包含大量动作场面，或者用户不喜欢动作电影且电影没有动作场面，这两个特征的乘积将会特别高。另一方面，如果有不匹配的情况（用户喜欢动作电影但电影不是动作片，或者用户不喜欢动作电影但它是一部动作片），乘积将会非常低。</p><p><strong>步骤3</strong>：计算损失。可以使用任何我们希望的损失函数；选择均方误差，因为这是表示预测准确性的一种合理方式。</p><p>有了这些，我们就可以使用随机梯度下降来优化我们的参数（即潜在特征），以最小化损失。在每一步，随机梯度下降优化器将使用点积计算每部电影和每个用户之间的匹配，并将其与每个用户给出的每部电影的实际评分进行比较。然后它将计算这个值的导数，并通过乘以学习率来调整权重。经过多次这样的操作，损失将会越来越小，推荐也会越来越好。</p><h2 id="创建DataLoaders"><a href="#创建DataLoaders" class="headerlink" title="创建DataLoaders"></a>创建DataLoaders</h2><p>希望展示时看见电影名而不是ID</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">movies <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">'u.item'</span><span class="token punctuation">,</span>  delimiter<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'latin-1'</span><span class="token punctuation">,</span>                     usecols<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> names<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'movie'</span><span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># movies.head()</span><span class="token comment"># 合并表格</span>ratings <span class="token operator">=</span> ratings<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>movies<span class="token punctuation">)</span>ratings<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406210935524.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">电影评分表</div></center><p>根据此表构建一个DataLoaders对象。默认第一列表示用户，第二列表示项目（电影），第三列表示评级。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls <span class="token operator">=</span> CollabDataLoaders<span class="token punctuation">.</span>from_df<span class="token punctuation">(</span>ratings<span class="token punctuation">,</span> item_name<span class="token operator">=</span><span class="token string">'title'</span><span class="token punctuation">,</span> bs<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>dls<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406210941779.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">数据块</div></center><p>在深度学习模型中，我们通常不直接进行索引查找操作，因为这不是模型能够直接处理的。但是，我们可以通过将索引转换为<strong>独热编码（one-hot encoding）</strong>向量，然后使用矩阵乘法来间接实现这一点。</p><p>独热编码是一种将分类变量转换为可以提供给机器学习算法的格式的方法。在独热编码中，每个索引值都被转换为一个全是0的向量，除了代表索引的位置是1。</p><p>例如，如果我们有一个向量 $v=\begin{bmatrix}v_1,v_2,v_3,…,v_n\end{bmatrix}$</p><p>，并且我们想要通过独热编码来选择第三个元素，我们可以创建一个独热编码向量 $e_3=\begin{bmatrix}0,0,1,0,…,0\end{bmatrix}$ 。然后，我们可以通过矩阵乘法来获取 $v$ 的第三个元素：</p><p>$v\times e_3^T=\begin{bmatrix}v_1,v_2,v_3,…,v_n\end{bmatrix}\times\begin{bmatrix}0\0\1\0\\vdots\0\end{bmatrix}=v_3$</p><p>这样我们就可以执行矩阵乘法。结果是一个只包含 $v_3$ 的向量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n_users  <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dls<span class="token punctuation">.</span>classes<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n_movies <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dls<span class="token punctuation">.</span>classes<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n_factors <span class="token operator">=</span> <span class="token number">5</span>user_factors <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span>movie_factors <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span>one_hot_3 <span class="token operator">=</span> one_hot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n_users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>user_factors<span class="token punctuation">.</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span> @ one_hot_3<span class="token comment"># tensor([-0.4586, -0.9915, -0.4052, -0.3621, -0.5908])</span>user_factors<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment"># tensor([-0.4586, -0.9915, -0.4052, -0.3621, -0.5908])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>嵌入（embedding）</strong>。在深度学习中，嵌入层是一种有效的方式来处理类别数据，特别是当类别数量很大时。</p><p>当我们使用独热编码来表示索引时，我们确实会得到一个由独热编码向量组成的矩阵，这样的操作本质上是一个矩阵乘法。这种方法在理论上是可行的，但它会消耗更多的内存和计算时间。这是因为独热编码向量大部分元素都是0，只有一个位置是1，这导致了大量的存储和计算浪费。</p><p>因此，深度学习库，如PyTorch，提供了一种特殊的层——<strong>嵌入层</strong>。嵌入层允许我们直接使用整数索引来查找数组中的元素，而不需要存储完整的独热编码向量。这样做的好处是显而易见的：</p><ul><li><strong>减少内存使用</strong>：不需要存储大量的独热编码向量。</li><li><strong>提高效率</strong>：直接索引比搜索整个独热编码向量要快得多。</li><li><strong>保持梯度计算的一致性</strong>：尽管使用整数索引，但嵌入层的梯度计算方式与使用独热编码进行矩阵乘法的方式相同。</li></ul><p>当我们用独热编码矩阵乘以嵌入矩阵时，实际上我们在做的是选择嵌入矩阵中对应的行。</p><p>在计算机视觉中，我们通过RGB值来获取像素的所有信息，这是一个直观的过程：每个彩色图像中的像素由三个数字表示，分别对应红色、绿色和蓝色的强度。这三个数值足以让我们的模型后续进行工作。</p><p>然而，对于用户或电影这样的实体，我们没有同样简单的方式来表征它们。可能存在与电影类型相关的关系：如果某个用户喜欢浪漫类型的电影，他们可能会给浪漫电影更高的评分。其他因素可能包括电影是更倾向于动作还是对话重，或者用户可能特别喜欢的某个特定演员的出现。</p><p>我们如何确定用来表征这些特征的数值呢？答案是，我们不需要自己确定。我们将让模型自己学习它们。通过分析用户和电影之间现有的关系，我们的模型可以自行发现哪些特征看起来重要或不重要。</p><p>这就是嵌入（embeddings）的含义。我们将为我们的每个用户和每部电影分配一个随机向量（这里的长度为n_factors=5），并将这些向量作为可学习的参数。这意味着在每一步，当我们通过比较我们的预测和目标来计算损失时，我们将计算损失相对于这些嵌入向量的梯度，并使用随机梯度下降（SGD）或其他优化器的规则来更新它们。</p><p>在训练开始时，这些数字没有任何意义，因为我们是随机选择的，但在训练结束时，它们将具有意义。通过在没有任何其他信息的情况下，学习关于用户和电影之间现有数据的关系，我们将看到它们仍然能够获取一些重要的特征，并能够区分大片和独立电影，动作电影和浪漫电影等等。</p><h2 id="从头开始进行协同过滤"><a href="#从头开始进行协同过滤" class="headerlink" title="从头开始进行协同过滤"></a>从头开始进行协同过滤</h2><p>在PyTorch中创建一个新的模块确实需要从<code>Module</code>类继承。当我们创建一个新的类时，我们可以通过继承来复用和扩展PyTorch的<code>Module</code>类的基础功能。在PyTorch中，<code>Module</code>类是所有神经网络模块的基类，它提供了一些基本的结构和方法，例如参数管理、模型保存和加载、设备转移（CPU/GPU）、钩子函数等。当我们定义自己的模块时，我们通过继承<code>Module</code>类来获得这些功能。</p><p>此外，当我们的模块被调用时，PyTorch会自动调用一个名为<code>forward</code>的方法。这个<code>forward</code>方法定义了模块的前向传播逻辑，即当我们对模块进行调用（例如<code>model(x)</code>）时，实际上是在调用<code>model.forward(x)</code>。在<code>forward</code>方法中，我们定义了输入数据如何通过模型流动并返回输出。</p><p>下面是一个定义点积模型的类的示例，它展示了如何从<code>Module</code>继承并实现<code>forward</code>方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DotProduct</span><span class="token punctuation">(</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_users<span class="token punctuation">,</span> n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>user_factors <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>movie_factors <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        users <span class="token operator">=</span> self<span class="token punctuation">.</span>user_factors<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        movies <span class="token operator">=</span> self<span class="token punctuation">.</span>movie_factors<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>users <span class="token operator">*</span> movies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于模型的输入，我们通常使用一个形状为<code>batch_size x 2</code>的张量，其中：</p><ul><li>第一列（<code>x[:, 0]</code>）包含用户ID。</li><li>第二列（<code>x[:, 1]</code>）包含电影ID。</li></ul><p>这里的<code>x</code>是一个批次的输入数据，<code>batch_size</code>是批次中的样本数量。每一行代表一个用户-电影对，模型将为这些对生成预测评分。</p><p>嵌入层（embedding layers）用于表示用户和电影的潜在特征矩阵。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">,</span>y <span class="token operator">=</span> dls<span class="token punctuation">.</span>one_batch<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>shape<span class="token comment"># torch.Size([64, 2])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里不使用已经定义好的Learner，而是从头开始定义。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> DotProduct<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_movies<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>MSELossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406211020777.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">拟合一下</div></center><p>为了让模型更好，将预测值设置在0到5之间。根据经验最好让范围超过5一点点，设为(0,5.5)区间。</p><blockquote><p>在构建模型时，确保预测值位于合理范围内（例如，0到5分的评分系统）是很重要的。使用<code>sigmoid_range</code>函数可以帮助我们将模型的输出限制在这个范围内。<code>sigmoid_range</code>函数通过应用Sigmoid函数来压缩输出，然后将其缩放到指定的范围。</p><p>将范围设置得稍微超过5（例如，使用(0, 5.5)）的原因是基于经验的发现。这样做有几个潜在的好处：</p><ol><li><strong>避免边界值问题</strong>：如果模型预测的值非常接近范围的上限或下限，使用稍微扩展的范围可以减少预测值被截断的情况。这意味着模型有更多的空间来表示那些接近极端评分的情况。</li><li><strong>提高学习效率</strong>：在训练过程中，如果预测值被限制在一个非常严格的范围内，模型可能会在训练早期就遇到梯度消失的问题，因为Sigmoid函数的梯度在其输入值非常大或非常小的时候会变得非常小。扩展范围可以在一定程度上缓解这个问题。</li><li><strong>更好的梯度流动</strong>：在优化过程中，扩展的范围可以提供更稳定的梯度，因为它避免了Sigmoid函数在极值附近的平坦区域，这有助于模型更有效地学习。</li><li><strong>灵活性和鲁棒性</strong>：在实际应用中，评分可能会受到多种因素的影响，包括噪声和偏差。允许模型预测略微超出实际评分范围的值可以提供额外的灵活性，使模型能够更好地适应这些因素。</li></ol><p>总的来说，将输出范围设置为略微超过实际评分的最大值，可以帮助模型在训练和预测时更加稳定和准确。这是一种基于实践的调整，旨在提高模型的整体性能。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DotProduct</span><span class="token punctuation">(</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_users<span class="token punctuation">,</span> n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">,</span> y_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>user_factors <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>movie_factors <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>y_range <span class="token operator">=</span> y_range       <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        users <span class="token operator">=</span> self<span class="token punctuation">.</span>user_factors<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        movies <span class="token operator">=</span> self<span class="token punctuation">.</span>movie_factors<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sigmoid_range<span class="token punctuation">(</span><span class="token punctuation">(</span>users <span class="token operator">*</span> movies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>self<span class="token punctuation">.</span>y_range<span class="token punctuation">)</span>    model <span class="token operator">=</span> DotProduct<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_movies<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>MSELossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406211029556.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">重新拟合一下</div></center><p>😧</p><p>在目前的点积模型中，我们只考虑了用户和电影的潜在特征，这些特征通过点积来预测评分。然而，这种方法没有考虑到一些用户可能天生就更倾向于给出正面或负面的评价，或者某些电影可能普遍被认为是好或坏。</p><p>为了解决这个问题，我们可以为每个用户和每部电影添加一个偏置项。这样，我们的模型就不仅仅是学习用户和电影之间的相互作用，还能学习到它们各自的特性。具体来说：</p><ul><li><strong>用户偏置（User Bias）</strong>：每个用户都有一个偏置值，它代表了该用户评分的整体倾向性。例如，一些用户可能普遍给出较高的评分，而另一些用户可能普遍给出较低的评分。</li><li><strong>电影偏置（Movie Bias）</strong>：每部电影也有一个偏置值，它代表了电影的普遍受欢迎程度。例如，一些电影可能普遍受到好评，而另一些电影则可能不那么受欢迎。</li></ul><p>在模型中引入偏置项后，预测评分的计算将变为用户和电影潜在特征的点积加上相应的用户偏置和电影偏置。数学上，这可以表示为：</p><p>预测评分=(用户特征⋅电影特征)+用户偏置+电影偏置</p><p>这样，模型就能更准确地反映出用户和电影的个性化特征，从而提高推荐系统的准确性和个性化程度。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DotProductBias</span><span class="token punctuation">(</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_users<span class="token punctuation">,</span> n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">,</span> y_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>user_factors <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>user_bias <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>movie_factors <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>movie_bias <span class="token operator">=</span> Embedding<span class="token punctuation">(</span>n_movies<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>y_range <span class="token operator">=</span> y_range            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        users <span class="token operator">=</span> self<span class="token punctuation">.</span>user_factors<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        movies <span class="token operator">=</span> self<span class="token punctuation">.</span>movie_factors<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>users <span class="token operator">*</span> movies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        res <span class="token operator">+=</span> self<span class="token punctuation">.</span>user_bias<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>movie_bias<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sigmoid_range<span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token operator">*</span>self<span class="token punctuation">.</span>y_range<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406211033012.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">重新拟合一下</div></center><p>坏事了！</p><p>可以看到两次训练，验证集上的损失在中途停止改善。仿佛过拟合了。</p><p>对此，使用正则化技术——权重衰减（weight decay）。数据增强不适合。</p><h3 id="权重衰减"><a href="#权重衰减" class="headerlink" title="权重衰减"></a>权重衰减</h3><p>权重衰减（Weight Decay），也称为<code>L2正则化</code>，是在损失函数中加入所有权重的平方和。为什么要这样做呢？因为当我们计算梯度时，它会增加一个促使权重尽可能小的贡献。</p><p>为什么它能防止过拟合呢？这个想法是，系数越大，损失函数中的峡谷就会越尖锐。如果我们以抛物线为基本例子，$y=a⋅x^2$ ，a越大，抛物线就越窄。</p><blockquote><p>在数学上，L2正则化可以表示为在损失函数 $L$ 中加入一个正则项 $\lambda\sum_iw_i^2$ ，其中 $\text{λ}$ 是正则化参数， $w_{i}$ 是模型权重。整个损失函数变为：</p><p>$L_{\mathrm{total}}=L_{\mathrm{original}}+\lambda\sum_iw_i^2$</p><p>这个正则项会惩罚大的权重值，因为当权重值增大时，正则项也会增大，从而增加总损失。在训练过程中，模型会尝试最小化这个总损失，这自然会导致权重值尽量小。</p><p>权重衰减有助于防止过拟合，因为它限制了模型的复杂度。较小的权重值意味着模型的预测将不会对输入数据中的小波动过于敏感，这有助于提高模型在未见数据上的泛化能力。</p></blockquote><p> 因此，让模型学习高参数据可能导致过拟合，模型用一个变化非常剧烈且过于复杂的函数来你和训练集中的所有数据点，最终导致过拟合。</p><p>过多限制权重增长，将会减慢模型的训练速度，当会形成一种泛化更好的状态。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss_with_wd <span class="token operator">=</span> loss <span class="token operator">+</span> wd <span class="token operator">*</span> <span class="token punctuation">(</span>parameters<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 为损失函数添加平方和，假设parameters是所有参数的张量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>权重衰减是我们选择的一个参数。通常，我们会将其设置为一个较大的值，这样我们甚至不需要在方程中包含乘以2的部分。在fastai库中使用权重衰减非常简单，您只需要在调用<code>fit</code>或<code>fit_one_cycle</code>函数时传递<code>wd</code>参数即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> DotProductBias<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_movies<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>MSELossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5e-3</span><span class="token punctuation">,</span> wd<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406211054225.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">重新训练</div></center><p>舒服了😀</p><h3 id="创建自己的嵌入模块"><a href="#创建自己的嵌入模块" class="headerlink" title="创建自己的嵌入模块"></a>创建自己的嵌入模块</h3><p>尽管上面用到了<code>Embedding</code>，但是没有考虑实际工作原理，下面构造自己的<code>DotProductBias</code>这个类。</p><p>在PyTorch中，如果我们只是将一个张量作为属性添加到<code>Module</code>中，它不会自动包含在模型的参数中。为了让<code>Module</code>知道我们想将一个张量视为参数，我们需要将它包装在<code>nn.Parameter</code>类中。这个类实际上并没有添加任何功能（除了自动为我们调用<code>requires_grad_</code>），它仅仅用作一个“标记”，以显示哪些张量应该包含在参数中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">(</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>a <span class="token operator">=</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>L<span class="token punctuation">(</span>T<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们调用<code>T().parameters()</code>时，它会返回一个包含所有参数的列表。在这个例子中，一个包含三个元素的张量，并且每个元素都设置为1，并且具有梯度。</p><p>所有的PyTorch模块都使用<code>nn.Parameter</code>来定义可训练的参数，这就是为什么到目前为止我们没有需要显式使用这个包装器的原因。当我们定义自己的模型时，我们可以通过这种方式来创建可训练的参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 创建一个张量作为参数，并随机初始化</span><span class="token keyword">def</span> <span class="token function">create_params</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span>normal_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>用张量创建DotProductBias类，而不使用Embedding：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DotProductBias</span><span class="token punctuation">(</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_users<span class="token punctuation">,</span> n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">,</span> y_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>user_factors <span class="token operator">=</span> create_params<span class="token punctuation">(</span><span class="token punctuation">[</span>n_users<span class="token punctuation">,</span> n_factors<span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>user_bias <span class="token operator">=</span> create_params<span class="token punctuation">(</span><span class="token punctuation">[</span>n_users<span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>movie_factors <span class="token operator">=</span> create_params<span class="token punctuation">(</span><span class="token punctuation">[</span>n_movies<span class="token punctuation">,</span> n_factors<span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>movie_bias <span class="token operator">=</span> create_params<span class="token punctuation">(</span><span class="token punctuation">[</span>n_movies<span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>y_range <span class="token operator">=</span> y_range            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        users <span class="token operator">=</span> self<span class="token punctuation">.</span>user_factors<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        movies <span class="token operator">=</span> self<span class="token punctuation">.</span>movie_factors<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>users<span class="token operator">*</span>movies<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        res <span class="token operator">+=</span> self<span class="token punctuation">.</span>user_bias<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>movie_bias<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> sigmoid_range<span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token operator">*</span>self<span class="token punctuation">.</span>y_range<span class="token punctuation">)</span>    model <span class="token operator">=</span> DotProductBias<span class="token punctuation">(</span>n_users<span class="token punctuation">,</span> n_movies<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>MSELossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5e-3</span><span class="token punctuation">,</span> wd<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406211109151.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">重新训练一下</div></center><h2 id="嵌入和偏差"><a href="#嵌入和偏差" class="headerlink" title="嵌入和偏差"></a>嵌入和偏差</h2><p>直接解释嵌入矩阵并不容易，因为有太多的因素需要考虑。但有一种技术可以提取出这样一个矩阵中最重要的基本方向，称为主成分分析（PCA）。</p><blockquote><p>计算线性代数</p><p><a href="https://github.com/fastai/numerical-linear-algebra">https://github.com/fastai/numerical-linear-algebra</a></p></blockquote><h3 id="使用fastai-collab"><a href="#使用fastai-collab" class="headerlink" title="使用fastai.collab"></a>使用fastai.collab</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 协同过滤模型</span>learn <span class="token operator">=</span> collab_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> n_factors<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> y_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5e-3</span><span class="token punctuation">,</span> wd<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406211117401.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">fastai的模型训练</div></center><p>查看模型的所有层</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>model<span class="token comment">#EmbeddingDotBias(</span><span class="token comment">#  (u_weight): Embedding(944, 50)</span><span class="token comment">#  (i_weight): Embedding(1665, 50)</span><span class="token comment">#  (u_bias): Embedding(944, 1)</span><span class="token comment">#  (i_bias): Embedding(1665, 1)</span><span class="token comment">#)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嵌入距离"><a href="#嵌入距离" class="headerlink" title="嵌入距离"></a>嵌入距离</h3><p>在多维空间中，这种距离被称为欧几里得距离。通过计算电影嵌入向量之间的欧几里得距离，我们可以量化电影之间的相似性。如果两部电影的嵌入向量之间的距离很小，这表明它们在用户偏好的多维空间中是相似的。这种方法可以帮助我们发现与特定电影相似的其他电影，从而为用户提供个性化的推荐。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">movie_factors <span class="token operator">=</span> learn<span class="token punctuation">.</span>model<span class="token punctuation">.</span>i_weight<span class="token punctuation">.</span>weightidx <span class="token operator">=</span> dls<span class="token punctuation">.</span>classes<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>o2i<span class="token punctuation">[</span><span class="token string">'Silence of the Lambs, The (1991)'</span><span class="token punctuation">]</span>distances <span class="token operator">=</span> nn<span class="token punctuation">.</span>CosineSimilarity<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span>movie_factors<span class="token punctuation">,</span> movie_factors<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span>idx <span class="token operator">=</span> distances<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>descending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>dls<span class="token punctuation">.</span>classes<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为用户做推荐"><a href="#为用户做推荐" class="headerlink" title="为用户做推荐"></a>为用户做推荐</h2><h3 id="自助取样启动问题"><a href="#自助取样启动问题" class="headerlink" title="自助取样启动问题"></a>自助取样启动问题</h3><p>最极端的情况是没有用户，即不能从历史信息中学习，那向第一个用户推荐什么产品？</p><p>用户注册时，问一些喜好之类的问题。</p><h2 id="深度学习方法用于协同过滤"><a href="#深度学习方法用于协同过滤" class="headerlink" title="深度学习方法用于协同过滤"></a>深度学习方法用于协同过滤</h2><p>在将架构转换为深度学习模型时，首先要做的是取嵌入查找的结果，并将这些激活值拼接在一起。这样我们就得到了一个矩阵，然后可以像通常那样通过线性层和非线性函数进行处理。</p><p>由于我们将要拼接嵌入，而不是取它们的点积，两个嵌入矩阵可以有不同的大小（即不同数量的潜在因子）。fastai 提供了一个名为 <code>get_emb_sz</code> 的函数，该函数根据 fast.ai 发现在实践中往往效果不错的启发式规则，返回数据的嵌入矩阵推荐大小：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">embs <span class="token operator">=</span> get_emb_sz<span class="token punctuation">(</span>dls<span class="token punctuation">)</span>embs<span class="token comment"># [(944, 74), (1665, 102)]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>实现该类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CollabNN</span><span class="token punctuation">(</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user_sz<span class="token punctuation">,</span> item_sz<span class="token punctuation">,</span> y_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_act<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>user_factors <span class="token operator">=</span> Embedding<span class="token punctuation">(</span><span class="token operator">*</span>user_sz<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>item_factors <span class="token operator">=</span> Embedding<span class="token punctuation">(</span><span class="token operator">*</span>item_sz<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>user_sz<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>item_sz<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n_act<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_act<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>y_range <span class="token operator">=</span> y_range            <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        embs <span class="token operator">=</span> self<span class="token punctuation">.</span>user_factors<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>item_factors<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>embs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> sigmoid_range<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>self<span class="token punctuation">.</span>y_range<span class="token punctuation">)</span><span class="token comment"># 创建模型    </span>model <span class="token operator">=</span> CollabNN<span class="token punctuation">(</span><span class="token operator">*</span>embs<span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>MSELossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5e-3</span><span class="token punctuation">,</span> wd<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token comment"># 使用use_nn，创建了2个隐藏层，大小分别是100，50</span>learn <span class="token operator">=</span> collab_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> use_nn<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> y_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5e-3</span><span class="token punctuation">,</span> wd<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 协同过滤 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 协同过滤 </tag>
            
            <tag> 表格建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶训练技术</title>
      <link href="/2024/06/10/trainsoatmodel/"/>
      <url>/2024/06/10/trainsoatmodel/</url>
      
        <content type="html"><![CDATA[<h1 id="高阶训练技术"><a href="#高阶训练技术" class="headerlink" title="高阶训练技术"></a>高阶训练技术</h1><h2 id="Imagenette"><a href="#Imagenette" class="headerlink" title="Imagenette"></a>Imagenette</h2><p>Fast.ai的团队在创建Imagenette数据集时，是基于一个核心理念：<strong>迭代速度</strong>对于机器学习模型的开发至关重要。他们注意到，虽然ImageNet、MNIST和CIFAR10是当时常用的数据集，但它们在规模和复杂性上存在差异，这影响了模型的泛化能力和开发者的迭代速度。</p><ul><li><strong>ImageNet</strong> 数据集包含约130万张不同大小的图片，分布在1000个类别中。训练一个模型通常需要几天的时间。</li><li><strong>MNIST</strong> 数据集包含50000张28×28像素的灰度手写数字图片。</li><li><strong>CIFAR10</strong> 数据集包含60000张32×32像素的彩色图片，分为10个类别。</li></ul><p>小型数据集（如MNIST和CIFAR10）在ImageNet这样的大型数据集上的表现并不理想。有效的方法往往需要直接在ImageNet上开发和训练，这导致许多人认为只有拥有大量计算资源的研究人员才能有效地贡献图像分类算法的发展。</p><p>Fast.ai的团队质疑这一观点，并认为没有证据表明ImageNet就是唯一合适的数据集大小。因此，他们决定尝试创建一个新的数据集——<strong>Imagenette</strong>。他们从ImageNet中选择了10个外观差异很大的类别，以便快速、低成本地创建能够识别这些类别的分类器。通过在Imagenette上测试算法调整，他们发现了一些有效的方法，并将这些方法应用到ImageNet上，结果发现这些调整在ImageNet上也表现良好。</p><p>这个案例强调了一个重要的信息：给定的数据集不一定是你想要的数据集，尤其不太可能是你进行开发和原型设计时想要的数据集。你应该追求的是迭代速度不超过几分钟——也就是说，当你想尝试一个新想法时，你应该能够在几分钟内训练一个模型并看到结果。如果实验花费的时间更长，你应该考虑如何缩小数据集或简化模型来提高实验速度。你能做的实验越多，结果越好！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>vision<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span>path <span class="token operator">=</span> untar_data<span class="token punctuation">(</span>URLs<span class="token punctuation">.</span>IMAGENETTE<span class="token punctuation">)</span>dblock <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>blocks<span class="token operator">=</span><span class="token punctuation">(</span>ImageBlock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CategoryBlock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   get_items<span class="token operator">=</span>get_image_files<span class="token punctuation">,</span>                   get_y<span class="token operator">=</span>parent_label<span class="token punctuation">,</span>                   item_tfms<span class="token operator">=</span>Resize<span class="token punctuation">(</span><span class="token number">460</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   batch_tfms<span class="token operator">=</span>aug_transforms<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">,</span> min_scale<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dls <span class="token operator">=</span> dblock<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">,</span> bs<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 进行一次训练作为基准</span>model <span class="token operator">=</span> xresnet50<span class="token punctuation">(</span>n_out<span class="token operator">=</span>dls<span class="token punctuation">.</span>c<span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>CrossEntropyLossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span>accuracy<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406201741606.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练基准</div></center><p><code>n_out=dls.c</code> 指定了模型输出层的神经元数量，应与数据集中的类别数量相匹配。这里，<code>dls.c</code> 从 <code>DataLoaders</code> 对象 <code>dls</code> 中获取类别数。</p><p>这是一个不错的基准，因为没有使用预训练模型，也可以表现很好。</p><p>使用从头开始训练的模型，或对预训练模型进行微调，使其能够很好地泛化到一个差异很大的数据集时，一些额外的技术非常重要。</p><h2 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h2><p>训练模型时，如果输入的数据是标准化的——即均值为0、标准差为1——会对之后的训练有很大帮助。但大多数图像和计算机视觉的像素值在0-255或0-1，在这两种情况下，数据都不是均值为0、标准差为1的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">,</span>y <span class="token operator">=</span> dls<span class="token punctuation">.</span>one_batch<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>std<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 对所有维度做均值化处理（除了通道数这一维度，索引1）</span><span class="token comment"># (TensorImage([0.4715, 0.4795, 0.4579], device='cuda:0'),</span><span class="token comment"># TensorImage([0.2759, 0.2758, 0.3021], device='cuda:0'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以在数据块的数据增强部分添加<code>Normalize</code>转换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_dls</span><span class="token punctuation">(</span>bs<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">:</span>    dblock <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>blocks<span class="token operator">=</span><span class="token punctuation">(</span>ImageBlock<span class="token punctuation">,</span> CategoryBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>                   get_items<span class="token operator">=</span>get_image_files<span class="token punctuation">,</span>                   get_y<span class="token operator">=</span>parent_label<span class="token punctuation">,</span>                   item_tfms<span class="token operator">=</span>Resize<span class="token punctuation">(</span><span class="token number">460</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   batch_tfms<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">*</span>aug_transforms<span class="token punctuation">(</span>size<span class="token operator">=</span>size<span class="token punctuation">,</span> min_scale<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Normalize<span class="token punctuation">.</span>from_stats<span class="token punctuation">(</span><span class="token operator">*</span>imagenet_stats<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dblock<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">,</span> bs<span class="token operator">=</span>bs<span class="token punctuation">)</span>dls <span class="token operator">=</span> get_dls<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> dls<span class="token punctuation">.</span>one_batch<span class="token punctuation">(</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>std<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 查看标准化处理后的均值和标准差</span><span class="token comment"># (TensorImage([-0.0150,  0.0287,  0.1145], device='cuda:0'),</span><span class="token comment"># TensorImage([1.3090, 1.3218, 1.3806], device='cuda:0'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>imagenet_stats</code> 是预定义的 ImageNet 数据集的均值和标准差，用于将图像数据标准化。</p><p>标准化后对训练模型的影响</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> xresnet50<span class="token punctuation">(</span>n_out<span class="token operator">=</span>dls<span class="token punctuation">.</span>c<span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>CrossEntropyLossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span>accuracy<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406201912898.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">标准化后的训练结果</div></center><p>😅，似乎看不出什么明显的效果。但在处理预训练的模型时，标准化会变得尤为重要，因为预训练模型只知道如何处理它以前见过的数据类型。如果预训练数据的平均像素值为0，但所用数据像素可能是最小值为0，那么模型和预期的结果会有很大差异！</p><p>这意味着当构建模型时，需要设定用于标准化的规则，因为用于推理和迁移学习的人都要使用相同的规则。</p><p>在使用预训练模型通过<code>vision_learner</code>进行训练时，fastai库会自动添加适当的<code>Normalize</code>变换。这是因为预训练模型是用特定的统计数据（通常来自ImageNet数据集）进行训练的，所以库能够为你填充这些统计数据。这就是为什么在使用预训练模型时，我们不需要手动处理标准化（normalization）。但是，当我们从头开始训练模型时，我们需要手动添加这些标准化信息。这是因为模型尚未学习到任何数据的分布，所以我们需要指定如何对输入数据进行标准化以匹配模型的预期输入。</p><p><strong>渐进式调整尺寸</strong>（progressive resizing），这是一种训练技巧，其中我们首先以较小的图像尺寸开始训练，然后逐步增加图像尺寸。这样做的好处是可以加快训练的初期阶段，因为小尺寸的图像计算量更小。一旦模型在小尺寸上学习到了有用的特征，我们再逐步增加图像尺寸，以提高模型的准确性和泛化能力。这种方法可以看作是一种计算效率和性能之间的折中。</p><p>这种方法不仅可以提高训练速度，还可以帮助模型学习到从低分辨率到高分辨率的特征，这对于最终模型的性能是有益的。总的来说，渐进式调整尺寸是一种有效的策略，可以在保持较快迭代速度的同时，逐步提升模型的性能。</p><h2 id="渐进式调整尺寸"><a href="#渐进式调整尺寸" class="headerlink" title="渐进式调整尺寸"></a>渐进式调整尺寸</h2><blockquote><p>开始训练时使用小图像，结束训练时使用大图像。花费大部分时间用小图像进行训练，有助于更快地完成训练。使用大图像完成训练，这让最终的准确率更高。</p></blockquote><p>卷积神经网络（CNN）学习的特征与图像大小无关。确实，CNN的早期层次会学习到边缘和梯度等基本特征，而后期层次则可能识别出鼻子、日落等更复杂的特征。这意味着，即使在训练过程中改变图像大小，我们也不需要为模型找到完全不同的参数。</p><p>当我们从小尺寸图像转向大尺寸图像时，模型确实需要一些调整，因为大图像包含更多的细节和可能的特征。这与<strong>迁移学习</strong>（transfer learning）有些相似，我们利用已经学习到的知识来帮助模型学习新的任务。在这种情况下，我们可以使用<code>fine_tune</code>方法来调整模型参数，使其适应新的图像大小。</p><p><strong>渐进式调整尺寸</strong>（progressive resizing）不仅可以提高训练效率，还是一种数据增强的形式。通过这种方式，模型在不同尺寸的图像上训练，可以学习到更多样化的特征，从而提高模型对新数据的泛化能力。因此，使用渐进式调整尺寸训练的模型通常会有更好的泛化表现。</p><p>构建一个小尺寸的DataLoaders进行训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls <span class="token operator">=</span> get_dls<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token comment">#128批次大小，128*128像素</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> xresnet50<span class="token punctuation">(</span>n_out<span class="token operator">=</span>dls<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> loss_func<span class="token operator">=</span>CrossEntropyLossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 metrics<span class="token operator">=</span>accuracy<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406202047898.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">标准化后小尺寸的训练结果</div></center><p>image/image-20240620194230901.png</p><p>然后可以换掉Learner内部的DataLoaders，并进行微调：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>dls <span class="token operator">=</span> get_dls<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fine_tune<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406202047292.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">渐进放大尺寸的训练结果</div></center><p>可以反复增加图像大小并训练更多周期，但是不要不原始图像大。</p><p>对于<strong>迁移学习</strong>，如果预训练模型与迁移学习任务非常相似，并且使用了类似大小的图像，那么使用较小的图像进行训练可能会损害预训练好的权重，因为这些权重已经针对特定尺寸的图像进行了优化。但如果迁移学习任务使用的图像与预训练任务中的图像在大小、形状或风格上有所不同，那么渐进式调整图像大小可能会有所帮助，因为它允许模型适应新的图像特征。</p><h2 id="测试期的数据增强"><a href="#测试期的数据增强" class="headerlink" title="测试期的数据增强"></a>测试期的数据增强</h2><p><strong>随机裁剪</strong>是一种有效的数据增强方法，它通过从图像中裁剪出不同的部分来增加模型训练的多样性，从而提高模型的泛化能力。然而，使用<strong>中心裁剪</strong>作为验证集的处理方式可能会导致一些问题，尤其是当图像边缘有重要特征时，这些特征可能会被裁剪掉，从而影响模型的准确性。</p><p>为了解决这个问题，您可以考虑以下几种方法：</p><ol><li><strong>避免随机裁剪</strong>：直接使用原始图像的比例，但这样会失去数据增强的好处。</li><li><strong>调整图像比例</strong>：将矩形图像压缩或拉伸以适应正方形空间，但这可能会使模型难以识别因变形而失去原有比例的图像。</li><li><strong>测试时增强（TTA）</strong>：不仅仅使用中心裁剪，而是从原始矩形图像中选择多个区域进行裁剪，将每个裁剪区域通过模型进行预测，并取最大值或平均值作为最终结果。这种方法不仅可以用于不同的裁剪，还可以用于测试时增强的所有参数，从而提高模型在实际应用中的表现。</li></ol><p>总的来说，<strong>测试时增强（TTA）</strong>是一个强大的技术，它通过在测试时应用多种数据增强策略来提高模型的性能。这种方法可以通过多次预测并综合结果来减少单次预测误差的影响。</p><blockquote><p>“测试时增强（TTA）”的概念是指在推理或验证阶段，通过数据增强创建每张图像的多个版本，然后对每个增强版本的图像的预测结果取平均值或最大值。这是一种提高模型性能的技术，特别是在图像识别任务中。它可以帮助模型更好地泛化到未见过的数据，从而提高其准确性。</p></blockquote><p><strong>测试时增强（TTA）</strong>可以根据数据集的不同，显著提高模型的准确性。这种方法不会改变训练所需的时间，但会根据请求的测试时增强图像的数量增加验证或推理所需的时间。默认情况下，fastai 会使用未增强的中心裁剪图像加上四个随机增强的图像。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">preds<span class="token punctuation">,</span>targs <span class="token operator">=</span> learn<span class="token punctuation">.</span>tta<span class="token punctuation">(</span><span class="token punctuation">)</span>accuracy<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> targs<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 0.8539955019950867</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用<strong>测试时增强（TTA）</strong>确实可以在不需要额外训练的情况下提高模型的性能。但是，这确实会使推理过程变慢。例如，如果您在 TTA 中平均使用五张图像，那么推理速度将会是原来的五倍慢。</p><p>这是一个权衡的问题，您需要根据实际应用场景来决定是否使用 TTA。如果模型的准确性是首要考虑的因素，而推理时间较长是可以接受的，那么 TTA 是一个很好的选择。但如果您需要快速的推理速度，那么可能需要寻找其他方法来提高性能，或者接受不使用 TTA 的准确性水平。</p><h2 id="Mixup"><a href="#Mixup" class="headerlink" title="Mixup"></a>Mixup</h2><p>Mixup 是一种数据增强技术，由 Hongyi Zhang 等人在 2017 年的论文 “mixup: Beyond Empirical Risk Minimization” 中介绍。这种技术可以显著提高准确性，<strong>特别是当您没有大量数据，且没有在与您的数据集相似的数据上训练过的预训练模型时</strong>。论文解释说：“虽然数据增强始终能够改善泛化，但该过程依赖于数据集，因此需要使用专家知识。”例如，翻转图像是数据增强的常见部分，但您应该只水平翻转，还是也垂直翻转？答案取决于您的数据集。此外，如果翻转（例如）没有为您提供足够的数据增强，您不能“更多地翻转”。拥有可以“增大”或“减小”变化量的数据增强技术很有帮助，以便查看哪种最适合您。</p><p>对于每张图像，Mixup 的工作方式如下：</p><ol><li>从数据集中随机选择另一张图像。</li><li>随机选择一个权重。</li><li>使用步骤 2 中的权重对选定的图像与自己的图像进行加权平均；这将是自变量。</li><li>使用相同的权重对这张图像的标签与自己的图像的标签进行加权平均；这将是因变量。</li></ol><p>在伪代码中，我们正在做这个（其中 t 是我们加权平均的权重）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">image2<span class="token punctuation">,</span> target2 <span class="token operator">=</span> dataset<span class="token punctuation">[</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>t <span class="token operator">=</span> random_float<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>new_image <span class="token operator">=</span> t <span class="token operator">*</span> image1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>t<span class="token punctuation">)</span> <span class="token operator">*</span> image2new_target <span class="token operator">=</span> t <span class="token operator">*</span> target1 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>t<span class="token punctuation">)</span> <span class="token operator">*</span> target2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了使这个起作用，我们的目标需要是独热编码的。</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406202043977.png" width="700">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Mixup论文摘录</div></center><blockquote><p>维基百科数学符号表：<a href="https://en.wikipedia.org/wiki/Glossary_of_mathematical_symbols">https://en.wikipedia.org/wiki/Glossary_of_mathematical_symbols</a></p></blockquote><p>使用Mixup对图像进行线性组合时的效果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">church <span class="token operator">=</span> PILImage<span class="token punctuation">.</span>create<span class="token punctuation">(</span>get_image_files_sorted<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">'train'</span><span class="token operator">/</span><span class="token string">'n03028079'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>gas <span class="token operator">=</span> PILImage<span class="token punctuation">.</span>create<span class="token punctuation">(</span>get_image_files_sorted<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">'train'</span><span class="token operator">/</span><span class="token string">'n03425413'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>church <span class="token operator">=</span> church<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gas <span class="token operator">=</span> gas<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tchurch <span class="token operator">=</span> tensor<span class="token punctuation">(</span>church<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.</span>tgas <span class="token operator">=</span> tensor<span class="token punctuation">(</span>gas<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.</span>_<span class="token punctuation">,</span>axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show_image<span class="token punctuation">(</span>tchurch<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show_image<span class="token punctuation">(</span>tgas<span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>show_image<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token operator">*</span>tchurch <span class="token operator">+</span> <span class="token number">0.7</span><span class="token operator">*</span>tgas<span class="token punctuation">)</span><span class="token punctuation">,</span> ax<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406202053926.png" width="700">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">混合一座教堂和加油站</div></center><p>如果第三张图像是通过将第一张图像的0.3倍与第二张图像的0.7倍相加构建的，模型应该预测“教堂”还是“加油站”？正确的答案是30%的教堂和70%的加油站，因为如果我们取独热编码目标的线性组合，就会得到这个结果。例如，假设我们有10个类别，“教堂”由索引2表示，“加油站”由索引7表示，独热编码的表示分别是：</p><p>[0,0,1,0,0,0,0,0,0,0]和[0,0,0,0,0,0,0,1,0,0]</p><p>所以我们的<strong>最终目标</strong>是：[0,0,0.3,0,0,0,0,0.7,0,0]</p><p>这意味着模型应该预测图像是30%的教堂和70%的加油站。这种方法允许模型学习从图像的混合中预测多个类别的概率，这是Mixup数据增强技术的核心思想。</p><p>通过给Learner添加一个<code>回调函数</code>，它时fastai内用于在训练循环中添加自定义行为的操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> xresnet50<span class="token punctuation">(</span>n_out<span class="token operator">=</span>dls<span class="token punctuation">.</span>c<span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>CrossEntropyLossFlat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 metrics<span class="token operator">=</span>accuracy<span class="token punctuation">,</span> cbs<span class="token operator">=</span>MixUp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当我们以这种方式混合数据训练模型时，确实会更难训练，因为很难看清每张图片中的内容。模型必须预测每张图片的两个标签，而不仅仅是一个，同时还要弄清楚每个标签的权重。然而，过拟合似乎不太可能成为问题，因为我们在每个周期展示的不是同一张图片，而是两张图片的随机组合。</p><p>与我们见过的其他增强方法相比，Mixup 需要更多的周期来训练以获得更好的准确性。</p><p>对于超过 80 个周期的训练，所有领先结果都使用了 Mixup，而对于更少的周期，则没有使用 Mixup。这也符合我们使用 Mixup 的经验。</p><ol><li><p>Mixup的应用广泛性：Mixup不仅可以用于图像数据，还可以用于其他类型的数据，如自然语言处理（NLP）。这是因为Mixup的核心思想是将两个数据点混合在一起，这个过程不限于任何特定类型的数据。</p></li><li><p>完美损失的问题：在传统模型中，我们追求的是使损失函数尽可能接近完美，即标签值为1或0。但是，由于softmax和sigmoid函数的输出永远不会达到1或0，这导致在训练过程中，模型的激活值会越来越极端，以接近这些理想值。</p></li><li><p>Mixup解决的问题：使用Mixup时，我们不再追求完美的1或0标签。除非两个混合的图像属于同一类别，否则我们得到的标签将是两个类别标签的线性组合，例如0.7和0.3。这减少了模型激活值变得极端的情况。</p></li><li><p>Mixup的一个副作用：Mixup在混合标签时可能会不小心使标签值大于0或小于1。这意味着我们没有直接告诉模型以这种方式改变标签。如果我们想要控制标签值更接近或远离0和1，我们需要调整Mixup的比例，但这也会影响数据增强的程度，可能会带来我们不想要的结果。</p></li></ol><p>标签平滑的解决方案：为了更直接地处理标签值的问题，我们可以使用标签平滑技术。标签平滑是一种正则化技术，它通过为标签引入噪声来使模型更加健壮，从而更好地泛化。它通过替换硬分类目标（0和1）为柔性目标，来解决数据集中可能存在的错误标签问题。</p><h2 id="标签平滑"><a href="#标签平滑" class="headerlink" title="标签平滑"></a>标签平滑</h2><p>在分类问题中，理论上我们的目标是进行独热编码，即对于每个实例，我们有一个长度等于类别数的数组，其中一个类别对应的位置是1，其余都是0。这种编码方式意味着模型被训练为对除了正确类别之外的所有类别返回0，对正确类别返回1。然而，即使是0.999这样接近1的值也不被视为“足够好”，因为模型会得到梯度并学习预测更高置信度的激活值。这会鼓励过拟合，并且在推理时给出一个不会提供有意义概率的模型：它总是对预测类别说1，即使它不太确定，只是因为它是这样训练的。</p><p>如果数据标签不完美，这种情况会变得非常有害。例如，在我们研究的熊分类器中，一些图像被错误标记，或者包含两种不同类型的熊。通常情况下，你的数据永远不会是完美的。即使标签是人工制作的，人们也可能会犯错误，或者对难以标记的图像有不同的看法。</p><p><strong>为了解决这个问题，我们可以将所有的1替换为略小于1的数字，将所有的0替换为略大于0的数字，然后进行训练。这就是所谓的标签平滑。</strong>通过鼓励模型不要过于自信，标签平滑将使训练更加稳健，即使存在标记错误的数据。结果将是一个泛化能力更强的模型。</p><p>标签平滑在实践中是这样工作的：我们从独热编码标签开始，然后将所有的0替换为 𝜖/𝑁 ，其中N是类别的数量，ε是一个参数（通常是0.1，这意味着我们对我们的标签有10%的不确定性）。由于我们希望标签总和为1，所以将1替换为  1−𝜖+𝜖/𝑁。这样，我们就不会鼓励模型过度自信地预测。在我们有10个类别的Imagenette示例中，目标可能变成如下（这里是对应于索引3的目标）：</p><p>[0.01, 0.01, 0.01, 0.91, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]</p><p>在实践中，我们不希望对标签进行独热编码，幸运的是我们也不需要这样做（独热编码只是用来解释标签平滑是什么并将其可视化的一个好方法）。</p><p>只需在调用Learner时修改损失函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> xresnet50<span class="token punctuation">(</span>n_out<span class="token operator">=</span>dls<span class="token punctuation">.</span>c<span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss_func<span class="token operator">=</span>LabelSmoothingCrossEntropy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 metrics<span class="token operator">=</span>accuracy<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406202137661.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">标签平滑</div></center><p>和Mixup一样，通常看不到标签平滑带来的显著改进，除非训练很多周期，那该训练多少个周期呢？</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过Mixup和/或标签平滑进行更长时间的训练是否可以避免过拟合并获得更好的结果。尝试渐进式调整尺寸和测试期的数据增强。</p><p>最重要的是，如果数据集很大，没有必要对整个数据集进行建模。找到一个能代表整体的小数据子集，就像这里使用Imagenette，并在其上进行实验。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 训练模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 训练技术 </tag>
            
            <tag> 模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot项目部署与多环境开发</title>
      <link href="/2024/06/05/springboot-3/"/>
      <url>/2024/06/05/springboot-3/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot项目部署与多环境开发"><a href="#SpringBoot项目部署与多环境开发" class="headerlink" title="SpringBoot项目部署与多环境开发"></a>SpringBoot项目部署与多环境开发</h1><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407182201102.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">SpringBoot项目部署</div></center><p>jar包部署，要求服务器必须有jre环境。</p><p>1.如何生成jar包? 执行package命令即可</p><p>2.如何运行jar包? Java-jar jar包位置</p><p>3.Jar包部署对服务器有什么要求? 必须有jre环境</p><h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><h3 id="项目配置文件方式"><a href="#项目配置文件方式" class="headerlink" title="项目配置文件方式"></a>项目配置文件方式</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407182218220.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">项目配置文件方式</div></center><p>部署之后，按ctrl+C快捷停止。</p><h3 id="命令行参数方式"><a href="#命令行参数方式" class="headerlink" title="命令行参数方式"></a>命令行参数方式</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407191026474.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">命令行参数方式</div></center><h3 id="环境变量方式"><a href="#环境变量方式" class="headerlink" title="环境变量方式"></a>环境变量方式</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407191029234.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">环境变量方式</div></center><p>配置好环境变量之后，重启终端之后运行java -jar </p><h3 id="外部配置文件方式"><a href="#外部配置文件方式" class="headerlink" title="外部配置文件方式"></a>外部配置文件方式</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407191033967.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">外部配置文件方式</div></center><p>在服务器jar包同目录下，添加application.yml并配置端口号。</p><p>上述方式的配置优先级如下：</p><h2 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h2><p><strong>从低到高依次为：</strong></p><ul><li>项目中resources目录下的application.yml</li><li>Jar包所在目录下的application.yml</li><li>操作系统环境变量</li><li>命令行参数</li></ul><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407191059596.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">SpringBoot多环境开发</div></center><p><strong>Profiles</strong></p><p>SpringBoot提供的Profiles可以用来隔离应用程序配置的各个部分，并在特定环境下指定某些部分的配置生效。</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407191119275.png" width="600">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Profiles</div></center>## 单文件配置<ul><li>— 分隔不同环境的配置</li><li>spring.config.activate.on-profile 配置所属的环境</li><li>spring.profiles.active 激活环境</li></ul><p><strong>application.yml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 通用信息</span><span class="token comment"># 指定生效的环境</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span class="token comment"># 多环境下共性的属性</span><span class="token comment"># 如果特定环境中的配置和通用信息冲突了，特定环境的配置会覆盖通用信息</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /nusqx <span class="token comment"># 项目虚拟目录</span><span class="token punctuation">---</span><span class="token comment"># 开发环境</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> dev  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/big_event    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> sqx123  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">redis</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启代码中驼峰命名和数据库中下划线命名的自动转换</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token punctuation">---</span><span class="token comment"># 测试环境</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> test<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span><span class="token punctuation">---</span><span class="token comment"># 生产环境</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> pro<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多文件配置"><a href="#多文件配置" class="headerlink" title="多文件配置"></a>多文件配置</h2><ul><li>通过多个文件分别配置不同环境的属性</li><li>文件的名字为 application-环境名称.yml</li><li>在application.yml中激活环境</li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407191139853.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">多文件配置</div></center><h2 id="多环境开发-Profiles分组"><a href="#多环境开发-Profiles分组" class="headerlink" title="多环境开发-Profiles分组"></a>多环境开发-Profiles分组</h2><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407191359970.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Profiles分组</div></center><ul><li>按照配置的类别，把配置信息配置到不同的配置文件中：application-分类名.yml ；</li><li>在application.yml中定义分组：spring.profiles.group ；</li><li>在application.yml中激活分组：spring.profiles.active，值为分组名。</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP文本分类器</title>
      <link href="/2024/06/03/nlp/"/>
      <url>/2024/06/03/nlp/</url>
      
        <content type="html"><![CDATA[<center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406030947366.png" width="600">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">通用语言模型微调</div></center><p>在维基百科上训练的分类模型，通过微调语言模型（维基百科和IMDb语料库的风格不同），迁移到IMDb数据集的情感分类模型中。</p><p>自监督学习：使用嵌入在自变量中的标签来训练模型，而不需要外部标签。例如，训练模型预测文本中的下一个单词。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> fastbookfastbook<span class="token punctuation">.</span>setup_book<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> fastbook <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> display<span class="token punctuation">,</span>HTML<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在自然语言处理（NLP）的迁移学习中，<strong>通用语言模型微调（ULMFit）</strong>方法是一个非常有效的三阶段过程：</p><ol><li><strong>预训练语言模型</strong>：首先，我们从一个大型语料库（如维基百科）预训练一个语言模型。这个模型学习了语言的基本结构和词汇。</li><li><strong>领域特定微调</strong>：然后，我们将预训练的语言模型在目标任务的相关语料库上进行微调。例如，如果我们的目标是IMDb电影评论分类，我们会在IMDb的评论数据集上进行微调，这样模型就能适应那里的语言风格和专有名词。</li><li><strong>分类器微调</strong>：最后，我们在微调后的语言模型的基础上，进一步训练一个分类器来执行特定的任务，比如情感分析。</li></ol><p>这个过程的关键在于，通过在目标任务的语料库上进行微调，语言模型能够更好地理解和生成与任务相关的文本。这种方法已经在多个NLP任务中显示出了显著的性能提升。</p><blockquote><p>Universal Language Model Fine-tuning for Text Classification <a href="https://arxiv.org/abs/1801.06146">https://arxiv.org/abs/1801.06146</a> (ACL-2018)</p></blockquote><h1 id="文本预处理"><a href="#文本预处理" class="headerlink" title="文本预处理"></a>文本预处理</h1><p>如何使用神经网络来预测一个句子中的下一个单词？</p><p>在构建语言模型时，我们面临的一个挑战是处理不同长度的句子和可能非常长的文档。为了预测句子中的下一个词，我们可以采用以下步骤：</p><ol><li><strong>构建词汇表</strong>：将数据集中的所有文档连接成一个长字符串，并将其分割成单词（或语义单元token），形成一个非常长的单词列表（或“词汇表vocab”）。</li><li><strong>索引替换</strong>：将每个单词替换为其在词汇表中的索引。</li><li><strong>创建嵌入矩阵</strong>：为词汇表中的每个单词创建一个嵌入向量，并将这些向量组成一个嵌入矩阵。</li><li><strong>使用嵌入矩阵</strong>：将嵌入矩阵作为神经网络的第一层。嵌入矩阵可以直接接受步骤2中创建的原始词汇索引作为输入。这与把代表索引的独热编码向量作为输入矩阵等效，但速度更快、效率更高。</li></ol><p>在处理文本时，我们需要考虑序列的概念。我们的自变量将是从第一个单词开始到倒数第二个单词结束的单词序列，而因变量将是从第二个单词开始到最后一个单词结束的单词序列。</p><p>我们的词汇表将包含预训练模型中已有的常见单词和特定于我们语料库的新单词（例如电影术语或演员姓名）。我们的嵌入矩阵将相应地构建：对于预训练模型词汇表中的单词，我们将使用预训练模型嵌入矩阵中的相应行；但对于新单词，我们没有预先训练的嵌入向量，因此我们将用随机向量初始化相应的行。</p><p>通过这种方式，我们的神经网络能够学习预测给定序列中下一个单词的能力，这是构建语言模型的基础。</p><p>在自然语言处理（NLP）中创建语言模型涉及一系列步骤，每个步骤都有其专业术语，并且fastai和PyTorch提供了相应的类来帮助实现。以下是这些步骤的概要：</p><ol><li><strong>分词（Tokenization）</strong>：将文本转换为单词（或字符、子字符串）列表，这取决于模型的粒度。</li><li><strong>数值化（Numericalization）</strong>：创建一个包含所有唯一单词（词汇表）的列表，并通过查找其在词汇表中的索引，将每个单词转换为一个数字。</li><li><strong>语言模型数据加载器创建（Language model data loader creation）</strong>：fastai提供了一个<code>LMDataLoader</code>类，它自动处理创建一个从自变量偏移一个单位的因变量。它还处理了一些重要细节，例如如何以保持因变量和自变量所需结构的方式来把数据集洗乱。</li><li><strong>语言模型创建（Language model creation）</strong>：我们需要一种特殊的模型来处理任意大小的输入列表。有多种方法可以实现这一点；在这里，将使用递归神经网络（RNN）。</li></ol><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>“将文本转换成单词列表”时，如何处理标点符号？如何处理“don’t”？如何处理有连字符的词？如何处理长长的医学或化学词汇？</p><ul><li><p><strong>基于单词</strong></p><p>用空格拆分句子，并应用特定的语言规则，即使在没有空格的情况下，也要尝试分离部分意义（例如将 “don’t” 分割为 “do n’t”）。通常，标点符号也被分割成独立的单元。</p></li><li><p><strong>基于子词</strong></p><p>根据最常出现的子字符串将单词拆分成更小的部分。例如，“occasion” 可能被分词为 “o c ca sion”。</p></li><li><p><strong>基于字符</strong></p><p>将句子分成几个单独的字符。</p></li></ul><p><code>语义单元token</code>：由分词过程创建的列表中的一个元素。它可以是一个单词、一个单词的一部分（子词），或单个字符。</p><h2 id="用fastai单词分词"><a href="#用fastai单词分词" class="headerlink" title="用fastai单词分词"></a>用fastai单词分词</h2><p>使用IMDb数据集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span>path <span class="token operator">=</span> untar_data<span class="token punctuation">(</span>URLs<span class="token punctuation">.</span>IMDB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用get_text_files获取文本文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">files <span class="token operator">=</span> get_text_files<span class="token punctuation">(</span>path<span class="token punctuation">,</span> folders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'unsup'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>txt<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">75</span><span class="token punctuation">]</span> <span class="token comment"># 对一篇评论分词，只显示部分</span><span class="token comment"># 'I love a good sappy love story (and I\'m a guy) but when I rented "Love Stor'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分词器分词</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">spacy <span class="token operator">=</span> WordTokenizer<span class="token punctuation">(</span><span class="token punctuation">)</span>toks <span class="token operator">=</span> first<span class="token punctuation">(</span>spacy<span class="token punctuation">(</span><span class="token punctuation">[</span>txt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coll_repr<span class="token punctuation">(</span>toks<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token comment">#144) ['I','love','a','good','sappy','love','story','(','and','I',"'m",'a','guy',')','but','when','I','rented','"','Love','Story','"','I','prayed','for','the','end','to','come','as'...]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>coll_repr(collection, n)</code>函数显示结果，可以显示collection的前n项，不含标点。可以看出是按标点符号分开的，<code>he's</code>被分成<code>he</code>和<code>'s</code>。那一句话结束的<code>.</code>和句中的<code>.</code>，spaCy也做了如下处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">first<span class="token punctuation">(</span>spacy<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'The U.S. dollar $1 is $1.00.'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token comment">#9) ['The','U.S.','dollar','$','1','is','$','1.00','.']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用了 <code>spacy</code> 库对一段文本进行了处理。<code>spacy</code> 是一个用于自然语言处理的 Python 库，它可以用于词性标注、命名实体识别、依存关系解析等任务。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tkn <span class="token operator">=</span> Tokenizer<span class="token punctuation">(</span>spacy<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coll_repr<span class="token punctuation">(</span>tkn<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token comment">#157) ['xxbos','i','love','a','good','sappy','love','story','(','and','xxmaj','i',"'m",'a','guy',')','but','when','i','rented','"','love','xxmaj','story','"','i','prayed','for','the','end','to'...]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>fastai使用<code>Tokenizer</code>类为分词过程添加了一些附加功能：</p><p>如上有一些以“xx”开头的语义单词，这在英语中不是一个常见的单词前缀，而是特殊的语义单元。例如，列表第一项，xxbos，表示一个新文本的开始（“BOS”是一个标准的NLP缩写“beginning of stream”，意味着“流的开始”）。通过识别这个定义为开始的语义单元，该模型能够明白它需要“忘记”之前说过的话，并专注于即将到来的单词。有助于模型在处理连续文本流时，能够区分不同文本之间的界限。</p><p>从某种意义上说，这些规则旨在使模型更容易识别句子的重要部分。将原始的英语语言序列翻译成简化的分词语言（易于模型学习）。</p><p>在自然语言处理中，特殊的标记化规则可以帮助模型更有效地学习和表示文本数据。例如：</p><ul><li><strong>重复字符的处理</strong>：如果一个句子中有连续的四个感叹号（“!!!”），规则会将其替换为一个特殊的重复字符标记，后面跟着数字4，然后是一个单独的感叹号。这样，模型的嵌入矩阵就可以编码关于重复标点的一般概念，而不是为每个标点的每个重复次数都需要一个单独的标记。</li><li><strong>大写字母的处理</strong>：一个大写的单词会被替换为一个特殊的大写标记，后面跟着这个单词的小写版本。这样，嵌入矩阵只需要单词的小写版本，从而节省了计算和内存资源，但模型仍然可以学习到大写的概念。</li></ul><p>这些规则使得模型能够以更紧凑的形式学习文本的特征，同时保留了文本的重要语义信息，如强调和命名实体的大写形式。</p><blockquote><p>一些特殊语义单元</p><p>xxbos 表示一个文本的开始</p><p>xxmsj 表示下一个单词以大写开头</p><p>xxunk 表示下一个单词未知</p></blockquote><p>要查看所使用的规则，可以检查默认规则：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">defaults<span class="token punctuation">.</span>text_proc_rules<span class="token comment">### </span><span class="token punctuation">[</span><span class="token operator">&lt;</span>function fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span>core<span class="token punctuation">.</span>fix_html<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span>core<span class="token punctuation">.</span>replace_rep<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span>core<span class="token punctuation">.</span>replace_wrep<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span>core<span class="token punctuation">.</span>spec_add_spaces<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span>core<span class="token punctuation">.</span>rm_useless_spaces<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span>core<span class="token punctuation">.</span>replace_all_caps<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span>core<span class="token punctuation">.</span>replace_maj<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>function fastai<span class="token punctuation">.</span>text<span class="token punctuation">.</span>core<span class="token punctuation">.</span>lowercase<span class="token punctuation">(</span>t<span class="token punctuation">,</span> add_bos<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> add_eos<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是对每种功能的简要概述：</p><ul><li><strong>fix_html</strong>：将特殊的HTML字符替换为可读版本（IMDb评论中有很多这样的字符）。</li><li><strong>replace_rep</strong>：将重复三次及以上的任何字符替换为重复的特殊语义单元（xxrep），后接重复的次数，然后是该字符。</li><li><strong>replace_wrep</strong>：将重复三次及以上的任何单词替换为单词重复的特殊语义单元（xxwrep），后接重复的次数，然后是该单词。</li><li><strong>spec_add_spaces</strong>：在/和#前后添加空格。</li><li><strong>rm_useless_spaces</strong>：删除所有重复的空格字符。</li><li><strong>replace_all_caps</strong>：将全部大写的单词转换为小写，并在其前面添加一个表示全部大写的特殊语义单元（xxup）。</li><li><strong>replace_maj</strong>：将首字母大写的单词转换为小写，并在其前面添加一个表示首字母大写的特殊语义单元（xxmaj）。</li><li><strong>lowercase</strong>：将所有文本转换为小写，并在开始处（xxbos）和/或结束处（xxeos）添加特殊标记。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">coll_repr<span class="token punctuation">(</span>tkn<span class="token punctuation">(</span><span class="token string">'&amp;copy;   Fast.ai www.fast.ai/INDEX'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token comment">#最大只显示31个元素</span><span class="token string">"(#11) ['xxbos','©','xxmaj','fast.ai','xxrep','3','w','.fast.ai','/','xxup','index']"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="根据子词分词"><a href="#根据子词分词" class="headerlink" title="根据子词分词"></a>根据子词分词</h2><p>子词分词方法是处理像中文和日文这样的无空格语言的有效方式。这种方法不依赖于空格来分隔意义，而是通过识别语料库中常见的字母组合来构建词汇表。然后，使用这个词汇表来分词。过程：</p><ol><li><strong>分析语料库</strong>：检查一定数量的文档，找出最常出现的字母组合。例如，如果我们分析2000条电影评论，我们可能会发现“电影”、“好看”、“演技”等字词组合频繁出现。</li><li><strong>使用词汇表分词</strong>：根据步骤1中创建的词汇表，将文本分解为子词单元。例如，“我的名字是郝杰瑞”可能会被分解为“我的”、“名字”、“是”、“郝”、“杰”、“瑞”。</li></ol><p>这种方法特别适用于处理那些词汇创造性很强、新词频繁出现的语言，因为它允许模型通过已知的子词单元来理解和生成未曾见过的词汇。这也有助于机器学习模型更好地处理语言的复杂性和多样性。</p><p>语料库使用前2000条影评：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">txts <span class="token operator">=</span> L<span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> o <span class="token keyword">in</span> files<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例化分词器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## 文本中有'gbk'编码无法处理的字符</span><span class="token keyword">def</span> <span class="token function">clean_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">,</span> <span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>txts <span class="token operator">=</span> L<span class="token punctuation">(</span>clean_text<span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> o <span class="token keyword">in</span> files<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">subword</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">:</span>    sp <span class="token operator">=</span> SubwordTokenizer<span class="token punctuation">(</span>vocab_sz<span class="token operator">=</span>sz<span class="token punctuation">)</span>    sp<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>txts<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>first<span class="token punctuation">(</span>sp<span class="token punctuation">(</span><span class="token punctuation">[</span>txt<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">)</span>subword<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment"># '▁I ▁love ▁a ▁good ▁sa pp y ▁love ▁story ▁( and ▁I \' m ▁a ▁guy ) ▁but ▁when ▁I ▁r ent ed ▁" L o ve ▁St or y " ▁I ▁p ra y ed ▁for ▁the ▁end ▁to'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用fastai中的子词分词器时，特殊字符<code>_</code>代表原文中的空格字符。</p><p>在subword函数中，<code>sz</code> 是一个形参，它代表了想创建的词汇表的大小。这个参数将被传递给 <code>SubwordTokenizer</code>，用于确定在分词时应该使用的最大词汇表大小。</p><p><code>SubwordTokenizer</code> 是一个分词器，它可以将文本分解为子词单元。子词单元是介于单词和字符之间的文本单元，它们可以更好地处理稀有词和词根变化。</p><p><code>vocab_sz</code> 参数决定了分词器在分解文本时可以使用的子词单元的最大数量。如果 <code>vocab_sz</code> 较大，那么分词器可以使用更多的子词单元，这可能会导致更好的模型性能，但也可能会增加模型的复杂性和训练时间。</p><p><code>sp.setup(txts)</code> 这行代码是在训练分词器，使其学习如何将文本分解为子词单元。<code>txts</code> 应该是一个包含大量文本的列表，分词器将从这些文本中学习子词单元。</p><p><code>' '.join(first(sp([txt]))[:40])</code> 这行代码是在使用训练好的分词器将文本分解为子词单元，然后取出前40个子词单元，并将它们连接成一个字符串。<code>txt</code> 应该是一个字符串，代表要被分词的文本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">subword<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment"># 更小的vocab，每个语义单元含更少的字符，需更多语义单元表示一个句子</span><span class="token comment"># "▁I ▁lo ve ▁a ▁ g o o d ▁ s a p p y ▁lo ve ▁st or y ▁ ( an d ▁I ' m ▁a ▁ g u y ) ▁but ▁w h en ▁I ▁ r"</span>subword<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token comment"># 更大的vocab，那大多数单词将出现在vocab中，训练快，但是嵌入矩阵大，需更多数据学习</span><span class="token comment"># '▁I ▁love ▁a ▁good ▁ s appy ▁love ▁story ▁( and ▁I \' m ▁a ▁guy ) ▁but ▁when ▁I ▁rented ▁" Lo ve ▁Story " ▁I ▁pray ed ▁for ▁the ▁end ▁to ▁come ▁as ▁quickly ▁and ▁pain less ly'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>子词分词器是在字符分词和词分词之间的扩展，无需开发语言特定的算法，强大！！！</p><h2 id="fastai数值化"><a href="#fastai数值化" class="headerlink" title="fastai数值化"></a>fastai数值化</h2><p>根据上述单词分词，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">toks <span class="token operator">=</span> tkn<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>coll_repr<span class="token punctuation">(</span>tkn<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># (#157) ['xxbos','i','love','a','good','sappy','love','story','(','and','xxmaj','i',"'m",'a','guy',')','but','when','i','rented','"','love','xxmaj','story','"','i','prayed','for','the','end','to'...]</span>toks200 <span class="token operator">=</span> txts<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>tkn<span class="token punctuation">)</span> <span class="token comment"># 小子集实验</span>toks200<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># (#157) ['xxbos','i','love','a','good','sappy','love','story','(','and'...]</span>num <span class="token operator">=</span> Numericalize<span class="token punctuation">(</span><span class="token punctuation">)</span>num<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>toks200<span class="token punctuation">)</span>coll_repr<span class="token punctuation">(</span>num<span class="token punctuation">.</span>vocab<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># "(#2112) ['xxunk','xxpad','xxbos','xxeos','xxfld','xxrep','xxwrep','xxup','xxmaj','the','.',',','a','and','of','to','is','it','i','in'...]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在fastai库中，<code>Numericalize</code> 是一个将文本转换为数字的过程，这对于准备数据以供模型训练非常重要。这里是如何使用 <code>Numericalize</code> 的一些关键点：</p><ol><li><strong>特殊规则标记</strong>：在词汇表的开始部分，会有一些特殊的标记，如 <code>xxunk</code>（未知词），<code>xxpad</code>（填充词）等，这些用于处理文本中的特殊情况。</li><li><strong>频率排序</strong>：之后，每个单词根据其在语料库中出现的频率被添加到词汇表中，最常见的词汇排在前面。</li><li><strong>参数设置</strong>：<ul><li><code>min_freq</code>：这个参数决定了一个单词必须在语料库中出现的最小次数才能被包含在词汇表中。默认值为3，意味着出现次数少于3次的单词会被替换为 <code>xxunk</code>。</li><li><code>max_vocab</code>：这个参数限制了词汇表的最大大小。默认值为60000，表示只有出现频率最高的60000个单词会被保留，其他的会被替换为 <code>xxunk</code>。</li></ul></li><li><strong>使用自定义词汇表</strong>：如果你有一个预先定义好的词汇表，你可以通过 <code>vocab</code> 参数将其传递给 <code>Numericalize</code> 对象，这样就可以根据你的词汇表来数值化数据集。</li><li><strong>数值化对象的使用</strong>：创建 <code>Numericalize</code> 对象后，你可以像使用函数一样调用它，将文本转换为数字序列。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">nums <span class="token operator">=</span> num<span class="token punctuation">(</span>toks<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span> nums<span class="token comment"># TensorText([   2,   18,  171,   12,   74,    0,  171,  102,   40,   13,    8,   18,  157,   12,  210,   37,   28,   65,   18, 1561])</span><span class="token comment"># 是否可以映射回源文本</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token keyword">for</span> o <span class="token keyword">in</span> nums<span class="token punctuation">)</span><span class="token comment"># "xxbos i love a good xxunk love story ( and xxmaj i 'm a guy ) but when i rented"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将文本分批作为语言模型的输入"><a href="#将文本分批作为语言模型的输入" class="headerlink" title="将文本分批作为语言模型的输入"></a>将文本分批作为语言模型的输入</h2><p>不同于图像，将张量调整为相同大小然后堆叠，语言模型要按顺序阅读文本才能有效地预测下一个单词。每一个新批次都应该从上一个批次停止的地方开始。</p><p>假设有以下文本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">In this chapter<span class="token punctuation">,</span> we will go back over the example of classifying movie reviews we studied <span class="token keyword">in</span> chapter <span class="token number">1</span> <span class="token keyword">and</span> dig deeper under the surface<span class="token punctuation">.</span> First we will look at the processing steps necessary to convert text into numbers <span class="token keyword">and</span> how to customize it<span class="token punctuation">.</span> By doing this<span class="token punctuation">,</span> we'll have another example of the PreProcessor used <span class="token keyword">in</span> the data block API<span class="token punctuation">.</span>\nThen we will study how we build a language model <span class="token keyword">and</span> train it <span class="token keyword">for</span> a <span class="token keyword">while</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>单词分词</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">stream <span class="token operator">=</span> <span class="token string">"In this chapter, we will go back over the example of classifying movie reviews we studied in chapter 1 and dig deeper under the surface. First we will look at the processing steps necessary to convert text into numbers and how to customize it. By doing this, we'll have another example of the PreProcessor used in the data block API.\nThen we will study how we build a language model and train it for a while."</span>tokens <span class="token operator">=</span> tkn<span class="token punctuation">(</span>stream<span class="token punctuation">)</span>bs<span class="token punctuation">,</span>seq_len <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span>d_tokens <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>tokens<span class="token punctuation">[</span>i<span class="token operator">*</span>seq_len<span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>seq_len<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d_tokens<span class="token punctuation">)</span>display<span class="token punctuation">(</span>HTML<span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_html<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405311059331.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">分词表</div></center><ol><li><strong>选择序列长度</strong>：假设我们选择序列长度为5，这意味着我们将数据分割成长度为5的子数组。</li><li><strong>创建子数组</strong>：从原始数组的开始，我们按顺序取出长度为5的片段，直到覆盖整个数组。</li><li><strong>保持顺序</strong>：在处理这些子数组时，我们需要保持它们的顺序，因为模型会依赖这个顺序来预测下一个标记。</li></ol><p>每个子数组都会依次输入到模型中。这样，模型可以在处理当前子数组时，记住之前子数组的信息，从而更好地预测接下来的标记。</p><p>这种方法允许模型有效地处理大规模数据集，同时保持了数据的顺序性和上下文信息，这对于文本生成和其他序列预测任务非常重要。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bs<span class="token punctuation">,</span>seq_len <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span>d_tokens <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>tokens<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">15</span><span class="token operator">+</span>seq_len<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d_tokens<span class="token punctuation">)</span>display<span class="token punctuation">(</span>HTML<span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_html<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405311102265.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">第一个子数组</div></center><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 第二、第三个</span>bs<span class="token punctuation">,</span>seq_len <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span>d_tokens <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>tokens<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">15</span><span class="token operator">+</span>seq_len<span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">15</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>seq_len<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d_tokens<span class="token punctuation">)</span>display<span class="token punctuation">(</span>HTML<span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_html<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bs<span class="token punctuation">,</span>seq_len <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span>d_tokens <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>tokens<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">15</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">15</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>d_tokens<span class="token punctuation">)</span>display<span class="token punctuation">(</span>HTML<span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_html<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在处理电影评论数据集时，将文本转换为连续的流是一个重要的步骤。这里是整个过程的详细解释：</p><ol><li><strong>文本串联</strong>：首先，我们将所有文本串联起来形成一个长文本流。这就像将所有评论拼接成一篇超长的文章。</li><li><strong>随机化顺序</strong>：为了让模型不依赖于特定的文本顺序，我们在每个训练周期（epoch）开始时随机打乱文档的顺序。这样做可以提高模型的泛化能力。</li><li><strong>分割成批次</strong>：然后，我们将这个长文本流分割成多个批次。如果我们有50,000个标记，并且设置批次大小为10，那么我们将得到10个包含5,000个标记的小流。</li><li><strong>保持标记顺序</strong>：在分割时，我们保持标记的顺序不变。例如，第一个小流包含标记1到5,000，第二个小流包含标记5,001到10,000，以此类推。这样做是为了让模型能够连续地阅读文本。</li><li><strong>添加特殊标记</strong>：在预处理期间，我们在每个新条目的开始添加一个 <code>xxbos</code> 标记，以便模型知道何时开始阅读新的文本条目。</li><li><strong>模型的内部状态</strong>：由于模型具有内部状态，它可以记住之前读取的内容，因此无论我们选择的序列长度如何，它都能产生相同的激活。</li><li><strong>fastai库的自动化</strong>：当我们使用fastai库创建一个 <code>LMDataLoader</code> 时，上述所有步骤都在幕后自动完成。我们首先将 <code>Numericalize</code> 对象应用于分词后的文本，以将其转换为数字序列。</li></ol><p>这个过程确保了模型在训练时能够处理大量的文本数据，同时保持了文本的结构和上下文信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nums200 <span class="token operator">=</span> toks200<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>dl <span class="token operator">=</span> LMDataLoader<span class="token punctuation">(</span>nums200<span class="token punctuation">)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> first<span class="token punctuation">(</span>dl<span class="token punctuation">)</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>y<span class="token punctuation">.</span>shape<span class="token comment"># (torch.Size([64, 72]), torch.Size([64, 72]))</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token keyword">for</span> o <span class="token keyword">in</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#自变量的第一行</span><span class="token comment"># "xxbos i love a good xxunk love story ( and xxmaj i 'm a guy ) but when i rented"</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span>o<span class="token punctuation">]</span> <span class="token keyword">for</span> o <span class="token keyword">in</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#因变量的第一行，自变量偏移一个单位</span><span class="token comment"># 'i love a good xxunk love story ( and xxmaj i \'m a guy ) but when i rented "'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="训练文本分类器"><a href="#训练文本分类器" class="headerlink" title="训练文本分类器"></a>训练文本分类器</h1><p>在使用迁移学习训练先进的文本分类器时，确实有两个主要步骤：</p><ol><li><strong>微调语言模型</strong>：首先，我们需要将预训练在维基百科上的语言模型微调到IMDb评论的语料库上。这意味着我们要让模型适应IMDb评论的特定语言风格和用词。</li><li><strong>训练分类器</strong>：一旦语言模型被微调，我们就可以使用它来训练一个分类器，该分类器将能够根据评论的内容预测电影评价是正面还是负面。</li></ol><h3 id="使用数据块训练语言模型"><a href="#使用数据块训练语言模型" class="headerlink" title="使用数据块训练语言模型"></a>使用数据块训练语言模型</h3><p>在fastai中，当<code>TextBlock</code>被传递给<code>DataBlock</code>时，会自动处理**分词(tokenization)和数值化(numericalization)**。你可以将传递给<code>Tokenize</code>和<code>Numericalize</code>的所有参数也传递给<code>TextBlock</code>。不要忘记<code>DataBlock</code>的<code>summary</code>方法，它对于调试数据问题非常有用。</p><p>下面是我们如何使用<code>TextBlock</code>来创建一个语言模型，使用fastai的默认设置：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">get_imdb <span class="token operator">=</span> partial<span class="token punctuation">(</span>get_text_files<span class="token punctuation">,</span> folders<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'unsup'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dls_lm <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>    blocks<span class="token operator">=</span>TextBlock<span class="token punctuation">.</span>from_folder<span class="token punctuation">(</span>path<span class="token punctuation">,</span> is_lm<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    get_items<span class="token operator">=</span>get_imdb<span class="token punctuation">,</span> splitter<span class="token operator">=</span>RandomSplitter<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">,</span> path<span class="token operator">=</span>path<span class="token punctuation">,</span> bs<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> seq_len<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这段代码中的 <code>TextBlock.from_folder(path, is_lm=True)</code> 是在创建一个 <code>TextBlock</code> 对象，这是 <code>fastai</code> 库中用于处理文本数据的一个类。</p><p><code>from_folder(path, is_lm=True)</code> 是 <code>TextBlock</code> 类的一个类方法，它从指定的文件夹中加载文本数据。<code>path</code> 参数是你的数据的路径。<code>is_lm=True</code> 参数表示这个 <code>TextBlock</code> 是用于语言模型的。语言模型是一种预测下一个词的模型，所以它需要看到所有的词，而不只是标签。当 <code>is_lm=True</code> 时，<code>TextBlock</code> 会将所有的文本数据视为一个连续的文本流，而不是分割成单独的样本。</p></blockquote><p>在<code>DataBlock</code>中使用<code>TextBlock</code>的一个不同之处是，我们不是直接使用类（即<code>TextBlock(...)</code>），而是调用一个类方法。<code>TextBlock</code>之所以特殊，是因为设置数值化器的词汇表可能需要很长时间（我们必须读取并分词每个文档来获取词汇表）。为了尽可能高效，它执行了一些优化：</p><ul><li>它在一个临时文件夹中保存分词后的文档，这样就不必多次分词。</li><li>它并行运行多个分词过程，以利用计算机的CPU。</li></ul><p>我们需要告诉<code>TextBlock</code>如何访问文本，以便它可以进行这个初始预处理——这就是<code>from_folder</code>的作用。</p><p>然后，<code>show_batch</code>以通常的方式工作。这意味着它会显示数据批次的样本，这对于检查数据是否正确加载和处理非常有用。这是一个调试数据问题时的重要步骤，因为它可以让你直观地看到数据的实际外观，从而更容易发现潜在的问题。</p><p>总的来说，<code>TextBlock</code>通过类方法提供了一个高效的方式来处理文本数据，确保在创建语言模型或其他自然语言处理任务时，数据预处理既快速又准确。这种方法的优势在于它减少了重复工作，并通过并行处理最大化了资源利用率。这些特性使得<code>fastai</code>成为处理大规模文本数据集的强大工具。(Windows上不可以多进程并行处理，所以代码中这样设置num_workers=0)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls_lm<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span>max_n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406021620062.png" width="600">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">预处理后的数据</div></center><h3 id="微调语言模型"><a href="#微调语言模型" class="headerlink" title="微调语言模型"></a>微调语言模型</h3><p>在神经网络中，我们将使用嵌入（embeddings）来将整数词索引转换为激活值，这与我们在协同过滤和表格建模中所做的类似。然后，我们将这些嵌入输入到一个循环神经网络（RNN）中，使用一种称为AWD-LSTM的架构。预训练模型中的嵌入会与为预训练词汇表中不存在的词添加的随机嵌入合并。这一过程在<code>language_model_learner</code>中自动处理。</p><p>简单来说，嵌入是一种将词汇映射到高维空间中的向量的技术，这些向量能够捕捉到词汇的语义信息。在预训练的语言模型中，这些嵌入已经学习到了大量的语言结构和单词之间的关系。当我们在模型中加入新词时，我们会创建随机的嵌入向量，并在训练过程中逐渐调整它们，使其与预训练的嵌入相融合。</p><p>AWD-LSTM是一种特殊的RNN架构，它通过使用Dropout技术来避免过拟合，同时保持了模型的复杂性和表达能力。在<code>language_model_learner</code>中，AWD-LSTM模型可以自动处理新词的嵌入，并将它们与预训练的嵌入合并，从而使模型能够有效地处理新的文本数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> language_model_learner<span class="token punctuation">(</span>    dls_lm<span class="token punctuation">,</span> AWD_LSTM<span class="token punctuation">,</span> drop_mult<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>     metrics<span class="token operator">=</span><span class="token punctuation">[</span>accuracy<span class="token punctuation">,</span> Perplexity<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_fp16<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个语言模型训练器的过程。</p><p>创建了一个语言模型学习器，它是一个用于训练语言模型的对象。</p><p><code>language_model_learner</code> 是 fastai 库中的一个函数，它接收以下参数：</p><ul><li><code>dls_lm</code>：一个 DataLoader 对象，它包含了训练和验证数据集。</li><li><code>AWD_LSTM</code>：模型架构，这里使用的是 AWD-LSTM 架构。</li><li><code>drop_mult</code>：一个浮点数，用于控制 dropout 层的比例。Dropout 是一种正则化技术，可以帮助防止模型过拟合。<code>drop_mult=0.3</code> 表示 dropout 比例为 30%。</li><li><code>metrics</code>：一个列表，包含了用于评估模型性能的指标。这里使用的是准确率（accuracy）和困惑度（Perplexity）。</li></ul><p><code>.to_fp16()</code> 是一个方法，它将模型的权重从 float32 转换为 float16，以节省内存和加速训练，但可能会稍微降低模型的精度。这种方法通常在 GPU 上训练大型模型时使用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2e-2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406021629598.png" width="500">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练结果</div></center><h3 id="保存和加载模型"><a href="#保存和加载模型" class="headerlink" title="保存和加载模型"></a>保存和加载模型</h3><p>每个训练周期都需花费很长时间，所以将在训练过程中保存中间模型的结果。所以使用fit_one_cycle而不是fine_tine。language_model_learner在使用预训练模型时，会自动调用freeze，只训练嵌入层（模型中唯一包含随机初始化权重的部分）即，对于那些在我们的IMDb词汇表中但不在预训练模型词汇表中的词的嵌入。</p><p>保存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'1epoch'</span><span class="token punctuation">)</span><span class="token comment"># Path('/home/sunqx/.fastai/data/imdb/models/1epoch.pth')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>加载</p><p>要在另一台机器上加载模型，或者稍后继续训练，可以使用以下方法加载名为 <code>1epoch.pth</code> 的文件内容：</p><p>首先，确保模型架构与保存 <code>.pth</code> 文件时使用的架构相同。然后，可以使用 <code>torch.load()</code> 函数来加载状态字典（state_dict），并使用 <code>load_state_dict()</code> 方法将其应用到模型中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> learn<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'1epoch'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一旦初始训练完成，就可以在解冻后继续微调模型了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>unfreeze<span class="token punctuation">(</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406031204139.png" width="500">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">解冻后继续微调</div></center><p>保存除了最后一层的所有模型（不包括最后一层的模型叫做<strong>编码器</strong>），这将模型的激活值转换为词汇表中选择每个语义单元的概率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>save_encoder<span class="token punctuation">(</span><span class="token string">'finetuned'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>编码器</code>：该模型不包括特定于任务的最终层。当应用于卷积神经网络时，该术语与“body”的含义大致相同，但“编码器”更倾向于在自然语言处理和生成式大模型中使用。</p><p>这就完成了微调语言模型。接下来可以用它和IMDb情感标签来微调分类器，然而在微调分类器之前可以尝试：使用模型生成随机评论。</p><h3 id="文本生成"><a href="#文本生成" class="headerlink" title="文本生成"></a>文本生成</h3><p>训练模型用来猜测句子中的下一个单词，可以用来写新评论：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">TEXT <span class="token operator">=</span> <span class="token string">"I liked this movie because"</span>N_WORDS <span class="token operator">=</span> <span class="token number">40</span>N_SENTENCES <span class="token operator">=</span> <span class="token number">2</span>preds <span class="token operator">=</span> <span class="token punctuation">[</span>learn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>TEXT<span class="token punctuation">,</span> N_WORDS<span class="token punctuation">,</span> temperature<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span>          <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>N_SENTENCES<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># i liked this movie because of the great acting and excellent direction . It 's a story about a married man who wants to be love and his wife . He lives with his dad , who has fallen into love with a</span><span class="token comment"># i liked this movie because it seemed like a typical Hong Kong action flick . There are two areas : Hong Kong and a lot of Hong Kong , plus most of the cinema is different than in</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加了一些随机性，根据模型返回的概率选择一个随机单词，因此两次不会获得完全相同的评论。</p><h3 id="创建分类器的数据加载器"><a href="#创建分类器的数据加载器" class="headerlink" title="创建分类器的数据加载器"></a>创建分类器的数据加载器</h3><p>从语言模型微调转向分类器微调。概括地说，语言模型预测文档的下一个单词，因此它不需要任何外部标签。然而，分类器预测一个外部标签——在IMDb的例子中，这个外部标签表示的是文档的情感。</p><p>分类数据块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls_clas <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>    blocks<span class="token operator">=</span><span class="token punctuation">(</span>TextBlock<span class="token punctuation">.</span>from_folder<span class="token punctuation">(</span>path<span class="token punctuation">,</span> vocab<span class="token operator">=</span>dls_lm<span class="token punctuation">.</span>vocab<span class="token punctuation">)</span><span class="token punctuation">,</span>CategoryBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>    get_y <span class="token operator">=</span> parent_label<span class="token punctuation">,</span>    get_items<span class="token operator">=</span>partial<span class="token punctuation">(</span>get_text_files<span class="token punctuation">,</span> folders<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'train'</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    splitter<span class="token operator">=</span>GrandparentSplitter<span class="token punctuation">(</span>valid_name<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">,</span> path<span class="token operator">=</span>path<span class="token punctuation">,</span> bs<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> seq_len<span class="token operator">=</span><span class="token number">72</span><span class="token punctuation">)</span>dls_clas<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span>max_n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406031208169.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">文本分类样本标签</div></center><p>从数据块的构建看，与之前两个重要的不同：</p><ul><li><code>TextBlock.from_floder</code>函数不再有<code>is_lm=True</code>参数，默认是<code>False</code>，告诉TextBlock，有常规的语义单元数据，而不是使用下一个语义单元作为标签。</li><li>传入了为语言模型微调创建的<code>vocab</code>，以确保使用相同的语义单元及索引之间的对应关系，否则，在微调语言模型中学习的嵌入对这个模型没有意义。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">将多个文档整理成小批次nums_samp <span class="token operator">=</span> toks200<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">#10个一批次</span>nums_samp<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token comment"># (#10) [157,247,154,182,73,221,169,215,772,114]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>PyTorch的DataLoaders需要将一个批次中的所有数据项整理成单个张量，单个张量具有固定的形状（即在每个轴上都有特定的长度，所有数据项必须一致）。跟图像上的处理很相似，但是不能或者还没有尝试过对文本裁剪等。数据增强还没有在自然语言处理中得到很好的探索，所以也许在自然语言处理中也有机会使用裁剪！但是可以填充文本。</p><p>扩展文本，使它们大小相同。为此使用特殊的填充语义单元，这个语义单元将被模型忽略。此外，为了避免内存问题，并提高性能，将把长度大致相同的文本分批放在一起（对训练集进行一些排序）。其结果是，<strong>整理成一批的文件往往长度相似。不会将每批都填充为相同大小，而是使用每批中最大文档的大小作为目标大小。</strong>(idea：对图像做类似的处理，对不规则矩形图像尤其有用)</p><p>当使用<code>TextBlock</code>和<code>is_lm=False</code>时，数据块API会自动为我们完成排序和填充。（对于语言模型数据，没有这样的问题，因为我们首先将所有文档连接在一起，然后将它们分成大小相等的部分。）</p><p>创建一个模型对文本分类：训练分类器之前的最后一步是从我们微调的语言模型加载编码器。我们使用load_encoder而不是load，因为我们只有预训练的权重可用于编码器;如果加载了不完整的模型，load默认会引发异常：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> text_classifier_learner<span class="token punctuation">(</span>dls_clas<span class="token punctuation">,</span> AWD_LSTM<span class="token punctuation">,</span> drop_mult<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>                                 metrics<span class="token operator">=</span>accuracy<span class="token punctuation">)</span><span class="token punctuation">.</span>to_fp16<span class="token punctuation">(</span><span class="token punctuation">)</span>learn <span class="token operator">=</span> learn<span class="token punctuation">.</span>load_encoder<span class="token punctuation">(</span><span class="token string">'finetuned'</span><span class="token punctuation">)</span> <span class="token comment"># 从微调的语言模型加载编码器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="微调分类模型"><a href="#微调分类模型" class="headerlink" title="微调分类模型"></a>微调分类模型</h3><p>用不同的学习率和逐渐解冻的方式训练。CV中经常一次性解冻所有模型，但对于NLP分类器，一次解冻几层会有不同的效果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2e-2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406031216778.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练一个周期</div></center><p>只需一个时期，训练效果还不错！可以将<code>-2</code>传入<code>freeze_to</code>来冻结除最后两个参数组之外的所有参数组：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>freeze_to<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 解冻最后两层</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">1e-2</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2.6</span><span class="token operator">**</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1e-2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#学习率，它是一个范围，表示学习率从 1e-2/(2.6**4) 线性增加到 1e-2。这种设置通常用于训练深度神经网络，可以帮助模型更好地收敛。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406031228914.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">逐渐解冻</div></center><p>然后多结冻一点，继续训练：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>freeze_to<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">5e-3</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2.6</span><span class="token operator">**</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5e-3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406031232984.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">逐渐解冻</div></center><p>最后解冻整个模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>unfreeze<span class="token punctuation">(</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">1e-3</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2.6</span><span class="token operator">**</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1e-3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406031236676.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">完全解冻</div></center><p>对原文本进行翻转后，使用反向的文本进行训练另一个模型，并并计算这两个模型的预测平均值，准确率又有所提高。</p><p>使用预训练模型，我们可以构建一个功能强大的微调语言模型，既可以生成虚假评论，也可以帮助对虚假评论进行分类。这项技术也可能被用于恶意目的。</p><h2 id="虚假信息和语言模型"><a href="#虚假信息和语言模型" class="headerlink" title="虚假信息和语言模型"></a>虚假信息和语言模型</h2><p>随着生成算法的不断进步，分类或鉴别算法也需要不断地更新以保持有效性。这是一个动态平衡的过程，需要持续的研究和开发。</p><p>两种模型：能够生成文本的语言模型，以及判断评论正面或负面的分类器。构建一个先进的分类器通常涉及使用预训练的语言模型，将其微调到特定任务的语料库上，然后使用其编码器（encoder）部分配合一个新的头部（head）来进行分类。</p><blockquote><p><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/10_nlp.ipynb">https://nbviewer.org/github/fastai/fastbook/blob/master/10_nlp.ipynb</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nlp </tag>
            
            <tag> 预训练 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像分类器</title>
      <link href="/2024/06/03/imageclassifer/"/>
      <url>/2024/06/03/imageclassifer/</url>
      
        <content type="html"><![CDATA[<h1 id="图像分类"><a href="#图像分类" class="headerlink" title="图像分类"></a>图像分类</h1><p>让模型效果更好</p><p>将模型应用到更广泛的数据类型</p><h2 id="从猫狗识别到宠物分类"><a href="#从猫狗识别到宠物分类" class="headerlink" title="从猫狗识别到宠物分类"></a>从猫狗识别到宠物分类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>vision<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span>path <span class="token operator">=</span> untar_data<span class="token punctuation">(</span>URLs<span class="token punctuation">.</span>PETS<span class="token punctuation">)</span> <span class="token comment"># 使用PETS数据集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提供数据的常见方式：</p><ul><li>每一个文件就代表一个数据</li><li>与数据相关的表格中，每一行都代表一个数据</li></ul><p>数据集中有哪些内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Path<span class="token punctuation">.</span>BASE_PATH <span class="token operator">=</span> pathpath<span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># (#2) [Path('annotations'),Path('images')]两个目录</span><span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># (#7393 [Path('images/Abyssinian_1.jpg'),Path('images/Abyssinian_10.jpg'),Path('images/Abyssinian_100.jpg'),Path('images/Abyssinian_100.mat'),Path('images/Abyssinian_101.jpg'),Path('images/Abyssinian_101.mat'),Path('images/Abyssinian_102.jpg'),Path('images/Abyssinian_102.mat'),Path('images/Abyssinian_103.jpg'),Path('images/Abyssinian_104.jpg')...]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>#为前缀，集合中数据的项数，要提取文件名中宠物类别，不能单纯的以第一个下划线区分，因为有的名字较复杂。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">fname <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>正则表达式（regex）</code>，它指定了一个通用规则，用于确定另一个字符串是否能通过测试（即“匹配”正则表达式），也可以用于从另一个字符串中提取一个或多个特定部分。</p><p>此时，需要一个正则表达式从文件名中提取宠物品种。<code>findall</code>函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(.+)_\d+.jpg$'</span><span class="token punctuation">,</span> fname<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>fastai中如果用正则表达式标注数据，可以使用<code>RegexLabeller</code>类达到这一目的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pets <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>blocks <span class="token operator">=</span> <span class="token punctuation">(</span>ImageBlock<span class="token punctuation">,</span> CategoryBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>                 get_items<span class="token operator">=</span>get_image_files<span class="token punctuation">,</span>                  splitter<span class="token operator">=</span>RandomSplitter<span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 get_y<span class="token operator">=</span>using_attr<span class="token punctuation">(</span>RegexLabeller<span class="token punctuation">(</span><span class="token string">r'(.+)_\d+.jpg$'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 item_tfms<span class="token operator">=</span>Resize<span class="token punctuation">(</span><span class="token number">460</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 batch_tfms<span class="token operator">=</span>aug_transforms<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">,</span> min_scale<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 尺寸预处理的数据增强策略，最大限度地减少数据被损坏的情况，同时保持良好的性能</span>dls <span class="token operator">=</span> pets<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">"images"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="图像尺寸的预处理"><a href="#图像尺寸的预处理" class="headerlink" title="图像尺寸的预处理"></a>图像尺寸的预处理</h2><p>数据清洗，数据增强等。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#id interpolations</span><span class="token comment">#caption A comparison of fastai's data augmentation strategy (left) and the traditional approach (right).</span>dblock1 <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>blocks<span class="token operator">=</span><span class="token punctuation">(</span>ImageBlock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CategoryBlock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   get_y<span class="token operator">=</span>parent_label<span class="token punctuation">,</span>                   item_tfms<span class="token operator">=</span>Resize<span class="token punctuation">(</span><span class="token number">460</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># Place an image in the 'images/grizzly.jpg' subfolder where this notebook is located before running this</span>dls1 <span class="token operator">=</span> dblock1<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>cwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token string">'images'</span><span class="token operator">/</span><span class="token string">'grizzly.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> bs<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>dls1<span class="token punctuation">.</span>train<span class="token punctuation">.</span>get_idxs <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> Inf<span class="token punctuation">.</span>onesx<span class="token punctuation">,</span>y <span class="token operator">=</span> dls1<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>one_batch<span class="token punctuation">(</span><span class="token punctuation">)</span>_<span class="token punctuation">,</span>axs <span class="token operator">=</span> subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>x1 <span class="token operator">=</span> TensorImage<span class="token punctuation">(</span>x<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x1 <span class="token operator">=</span> x1<span class="token punctuation">.</span>affine_coord<span class="token punctuation">(</span>sz<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">)</span>x1 <span class="token operator">=</span> x1<span class="token punctuation">.</span>rotate<span class="token punctuation">(</span>draw<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">1.</span><span class="token punctuation">)</span>x1 <span class="token operator">=</span> x1<span class="token punctuation">.</span>zoom<span class="token punctuation">(</span>draw<span class="token operator">=</span><span class="token number">1.2</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">1.</span><span class="token punctuation">)</span>x1 <span class="token operator">=</span> x1<span class="token punctuation">.</span>warp<span class="token punctuation">(</span>draw_x<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> draw_y<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">1.</span><span class="token punctuation">)</span>tfms <span class="token operator">=</span> setup_aug_tfms<span class="token punctuation">(</span><span class="token punctuation">[</span>Rotate<span class="token punctuation">(</span>draw<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Zoom<span class="token punctuation">(</span>draw<span class="token operator">=</span><span class="token number">1.2</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">1.</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                       Warp<span class="token punctuation">(</span>draw_x<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">,</span> draw_y<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">1.</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>tfms<span class="token punctuation">)</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#x.affine_coord(coord_tfm=coord_tfm, sz=size, mode=mode, pad_mode=pad_mode)</span>TensorImage<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span>ctx<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>TensorImage<span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span>ctx<span class="token operator">=</span>axs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405282138913.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">fastai数据增强效果与传统方法对比</div></center><p>fastai的数据增强策略比传统的好。</p><h3 id="检查和调试数据块"><a href="#检查和调试数据块" class="headerlink" title="检查和调试数据块"></a>检查和调试数据块</h3><p><code>show_batch</code>方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>summary</code>方法，这里没有使用Resize转换，产生了不同大小的图像</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pets1 <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>blocks <span class="token operator">=</span> <span class="token punctuation">(</span>ImageBlock<span class="token punctuation">,</span> CategoryBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>                 get_items<span class="token operator">=</span>get_image_files<span class="token punctuation">,</span>                  splitter<span class="token operator">=</span>RandomSplitter<span class="token punctuation">(</span>seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 get_y<span class="token operator">=</span>using_attr<span class="token punctuation">(</span>RegexLabeller<span class="token punctuation">(</span><span class="token string">r'(.+)_\d+.jpg$'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pets1<span class="token punctuation">.</span>summary<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">"images"</span><span class="token punctuation">)</span><span class="token comment"># 可以显示运行时有错误的地方。可以清楚的看到如何收集数据并将其拆分的，如何从一个文件名转换为一个样本的...以及无法在一个batch中处理形状不同的样本</span>Setting<span class="token operator">-</span>up <span class="token builtin">type</span> transforms pipelinesCollecting items <span class="token keyword">from</span> C<span class="token punctuation">:</span>\Users\<span class="token number">19764</span>\<span class="token punctuation">.</span>fastai\data\oxford<span class="token operator">-</span>iiit<span class="token operator">-</span>pet\imagesFound <span class="token number">7390</span> items<span class="token number">2</span> datasets of sizes <span class="token number">5912</span><span class="token punctuation">,</span><span class="token number">1478</span>Setting up Pipeline<span class="token punctuation">:</span> PILBase<span class="token punctuation">.</span>createSetting up Pipeline<span class="token punctuation">:</span> partial <span class="token operator">-</span><span class="token operator">&gt;</span> Categorize <span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">{</span><span class="token string">'vocab'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'add_na'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>Building one sample  Pipeline<span class="token punctuation">:</span> PILBase<span class="token punctuation">.</span>create    starting <span class="token keyword">from</span>      C<span class="token punctuation">:</span>\Users\<span class="token number">19764</span>\<span class="token punctuation">.</span>fastai\data\oxford<span class="token operator">-</span>iiit<span class="token operator">-</span>pet\images\saint_bernard_138<span class="token punctuation">.</span>jpg    applying PILBase<span class="token punctuation">.</span>create gives      PILImage mode<span class="token operator">=</span>RGB size<span class="token operator">=</span>500x375  Pipeline<span class="token punctuation">:</span> partial <span class="token operator">-</span><span class="token operator">&gt;</span> Categorize <span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">{</span><span class="token string">'vocab'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'add_na'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>    starting <span class="token keyword">from</span>      C<span class="token punctuation">:</span>\Users\<span class="token number">19764</span>\<span class="token punctuation">.</span>fastai\data\oxford<span class="token operator">-</span>iiit<span class="token operator">-</span>pet\images\saint_bernard_138<span class="token punctuation">.</span>jpg    applying partial gives      saint_bernard    applying Categorize <span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">{</span><span class="token string">'vocab'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'add_na'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span> gives      TensorCategory<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>Final sample<span class="token punctuation">:</span> <span class="token punctuation">(</span>PILImage mode<span class="token operator">=</span>RGB size<span class="token operator">=</span>500x375<span class="token punctuation">,</span> TensorCategory<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Collecting items <span class="token keyword">from</span> C<span class="token punctuation">:</span>\Users\<span class="token number">19764</span>\<span class="token punctuation">.</span>fastai\data\oxford<span class="token operator">-</span>iiit<span class="token operator">-</span>pet\imagesFound <span class="token number">7390</span> items<span class="token number">2</span> datasets of sizes <span class="token number">5912</span><span class="token punctuation">,</span><span class="token number">1478</span>Setting up Pipeline<span class="token punctuation">:</span> PILBase<span class="token punctuation">.</span>createSetting up Pipeline<span class="token punctuation">:</span> partial <span class="token operator">-</span><span class="token operator">&gt;</span> Categorize <span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">{</span><span class="token string">'vocab'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">'add_na'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span>Setting up after_item<span class="token punctuation">:</span> Pipeline<span class="token punctuation">:</span> ToTensorSetting up before_batch<span class="token punctuation">:</span> Pipeline<span class="token punctuation">:</span> Setting up after_batch<span class="token punctuation">:</span> Pipeline<span class="token punctuation">:</span> IntToFloatTensor <span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">{</span><span class="token string">'div'</span><span class="token punctuation">:</span> <span class="token number">255.0</span><span class="token punctuation">,</span> <span class="token string">'div_mask'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>Building one batchApplying item_tfms to the first sample<span class="token punctuation">:</span>  Pipeline<span class="token punctuation">:</span> ToTensor    starting <span class="token keyword">from</span>      <span class="token punctuation">(</span>PILImage mode<span class="token operator">=</span>RGB size<span class="token operator">=</span>500x375<span class="token punctuation">,</span> TensorCategory<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    applying ToTensor gives      <span class="token punctuation">(</span>TensorImage of size 3x375x500<span class="token punctuation">,</span> TensorCategory<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Adding the <span class="token builtin">next</span> <span class="token number">3</span> samplesNo before_batch transform to <span class="token builtin">apply</span>Collating items <span class="token keyword">in</span> a batchError! It's <span class="token keyword">not</span> possible to collate your items <span class="token keyword">in</span> a batchCould <span class="token keyword">not</span> collate the <span class="token number">0</span><span class="token operator">-</span>th members of your tuples because got the following shapestorch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">375</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">430</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet34<span class="token punctuation">,</span> metrics<span class="token operator">=</span>error_rate<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fine_tune<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405291043548.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练结果</div></center><p>DataBlock中添加，再训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">item_tfms<span class="token operator">=</span>Resize<span class="token punctuation">(</span><span class="token number">460</span><span class="token punctuation">)</span><span class="token punctuation">,</span>batch_tfms<span class="token operator">=</span>aug_transforms<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">,</span> min_scale<span class="token operator">=</span><span class="token number">0.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405291057018.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练结果</div></center><p><em>损失</em>是用来优化参数模型的指标。如果没有告诉fastai使用什么损失函数，fastai将根据数据类型和模型选择适当的损失函数，对于图像分类，fastai默认使用<em>交叉熵损失</em>。</p><h2 id="交叉熵损失"><a href="#交叉熵损失" class="headerlink" title="交叉熵损失"></a>交叉熵损失</h2><p>优势：</p><ul><li>即使因变量有两个以上的类别，它仍然有效</li><li>训练速度更快，更可靠</li></ul><h3 id="查看激活值和标签"><a href="#查看激活值和标签" class="headerlink" title="查看激活值和标签"></a>查看激活值和标签</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">,</span>y <span class="token operator">=</span> dls<span class="token punctuation">.</span>one_batch<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 从数据加载器中获得一批真实数据</span>preds<span class="token punctuation">,</span>_ <span class="token operator">=</span> learn<span class="token punctuation">.</span>get_preds<span class="token punctuation">(</span>dl<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 查看预测结果（神经网络最后一层的激活值）</span><span class="token comment"># preds[0]</span><span class="token builtin">len</span><span class="token punctuation">(</span>preds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>preds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>get_preds</code>可以接收数据集索引，0代表训练集，1代表验证集或批迭代器作为输入。默认返回预测结果和对应的目标类别。</p><p>实际预测结果是0-1之间的37个概率，加起来总和是1。</p><h3 id="交叉熵损失之softmax"><a href="#交叉熵损失之softmax" class="headerlink" title="交叉熵损失之softmax"></a>交叉熵损失之softmax</h3><p>为了将模型的激活值转换成符合上述的预测值，使用softmax的激活函数。</p><p>分类模型中，最后一层使用softmax激活函数来确保激活值在0-1之间，并且总和为1.softmax看起来像sigmoid函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_function<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405291116678.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">sigmoid</div></center><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>random<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>acts <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span>acts<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>acts<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>acts<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>比较两个神经网络激活值之间的差异</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>softmax是sigmoid的多类别版本，只要有两个或两个以上的类别，并且这些类别的概率加起来必须是1，就用它。</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">sm_acts <span class="token operator">=</span> torch<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>acts<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直观地说，softmax 函数确实想从其他类中选择一个类，因此当我们知道每张图片都有明确的标签时，它是训练分类器的理想选择。（请注意，在推理过程中它可能不太理想，因为你可能希望你的模型有时告诉你它无法识别它在训练期间看到的一些类别，并且不因为它的激活值稍大就盲目选择它。在这种情况下，最好对每一列使用二元分类的方法和概念，并且都使用一个sigmoid激活函数来训练模型比较好。）</p><h3 id="交叉熵损失之对数似然"><a href="#交叉熵损失之对数似然" class="headerlink" title="交叉熵损失之对数似然"></a>交叉熵损失之对数似然</h3><ul><li><p>用sigmoid的话，表示这10类互不相关，得到的10个概率值中的每个值代表输入这类的概率和不属于这类的概率，0-1之间的值。比如第4个值，代表输入第4类的值概率和不属于第4类的概率，和其它9个值没关系。经过sigmoid输出的10个值互不影响，只关注某一类的可能性概率是多大，每一类都是二分类，所以加起来也不等于1，可以是第一类得到的值0.9，第二个也是0.9。</p></li><li><p>用softmax就不一样了，它要综合考虑10个类，属于每个类的概率，这10个类相互影响，加起来是等于1的。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">targ <span class="token operator">=</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sm_actsidx <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>sm_acts<span class="token punctuation">[</span>idx<span class="token punctuation">,</span> targ<span class="token punctuation">]</span><span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> HTMLdf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>sm_acts<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'targ'</span><span class="token punctuation">]</span> <span class="token operator">=</span> targdf<span class="token punctuation">[</span><span class="token string">'idx'</span><span class="token punctuation">]</span> <span class="token operator">=</span> idxdf<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sm_acts<span class="token punctuation">[</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targ<span class="token punctuation">]</span>t <span class="token operator">=</span> df<span class="token punctuation">.</span>style<span class="token punctuation">.</span>hide_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#To have html code compatible with our script</span>html <span class="token operator">=</span> t<span class="token punctuation">.</span>_repr_html_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;/style&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>html <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'&lt;table id="([^"]+)"\s*&gt;'</span><span class="token punctuation">,</span> <span class="token string">r'&lt;table &gt;'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>display<span class="token punctuation">(</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405291632753.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">数字识别3和7</div></center><p>PyTorch提供和<code>sm_acts</code>功能相同的函数<code>nll_loss</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span>sm_acts<span class="token punctuation">[</span>idx<span class="token punctuation">,</span> targ<span class="token punctuation">]</span><span class="token comment"># tensor([-0.6025, -0.4979, -0.1332, -0.0034, -0.4041, -0.3661])</span>F<span class="token punctuation">.</span>nll_loss<span class="token punctuation">(</span>sm_acts<span class="token punctuation">,</span> targ<span class="token punctuation">,</span> reduction<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">)</span><span class="token comment"># tensor([-0.6025, -0.4979, -0.1332, -0.0034, -0.4041, -0.3661])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用对数函数"><a href="#使用对数函数" class="headerlink" title="使用对数函数"></a>使用对数函数</h3><p>损失中使用的是概率，0-1，如0.99和0.999，尽管很接近，但是后者比前者能有高10倍的信心，所以把0和1之间的数转换成负无穷大和无穷大之间的数。自然而然地使用到对数（torch.log）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_function<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ty<span class="token operator">=</span><span class="token string">'log(x)'</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405291644857.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">log函数</div></center><p>Python中log使用自然数对数e作为底。</p><p>log(a*b) = log(a)+log(b)。当基础信号以指数或乘法递增时，对于对数是线性增加的。</p><blockquote><p>nll_loss中的”nll“代表”负对数似然“，但它实际根本不取对数。它假设已经取得了对数。PyTorch中有一个名为log_softmax的函数，它以一种快速而准确的方式把对数和softmax结合起来，nll_loss设计为在log_softmax之后使用。</p></blockquote><p>如果我们首先取softmax，然后取它的对数似然，这个组合叫<code>交叉熵损失</code>。PyTorch中为<code>nn.CrossEntropyLoss</code></p><p>（实际上，先做log_softmax，再做nll_loss）。</p><p>则之前</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> HTMLdf<span class="token punctuation">[</span><span class="token string">'loss'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>torch<span class="token punctuation">.</span>log<span class="token punctuation">(</span>tensor<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t <span class="token operator">=</span> df<span class="token punctuation">.</span>style<span class="token punctuation">.</span>hide_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#To have html code compatible with our script</span>html <span class="token operator">=</span> t<span class="token punctuation">.</span>_repr_html_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&lt;/style&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>html <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r'&lt;table id="([^"]+)"\s*&gt;'</span><span class="token punctuation">,</span> <span class="token string">r'&lt;table &gt;'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>display<span class="token punctuation">(</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405291714939.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">数字识别3和7</div></center><p>观察一个数字的对数接近负无穷大，因为该数字接近于零。在本例中，由于结果与正确标签的预测概率相关，我们希望我们的损失函数在预测为“好”（接近 1）时返回一个小值，在预测为“坏”（接近 0）时返回一个大值。我们可以通过取对数的负数来实现这一点：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_function<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">*</span>torch<span class="token punctuation">.</span>log<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">max</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> tx<span class="token operator">=</span><span class="token string">'x'</span><span class="token punctuation">,</span> ty<span class="token operator">=</span><span class="token string">'- log(x)'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'Log Loss when true label = 1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>计算交叉熵损失</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss_func<span class="token punctuation">(</span>acts<span class="token punctuation">,</span> targ<span class="token punctuation">)</span><span class="token comment"># tensor(1.8045)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类形式（更倾向于使用这个）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>acts<span class="token punctuation">,</span> targ<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>F命名空间中的形式。</p><p>默认情况下，PyTorch损失函数取所有项目损失的平均值，可以更改设定：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">'none'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>acts<span class="token punctuation">,</span> targ<span class="token punctuation">)</span><span class="token comment"># tensor([0.5067, 0.6973, 2.0160, 5.6958, 0.9062, 1.0048])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们考虑交叉熵损失的梯度时，它的一个有趣特征出现了。cross_entropy(a,b)的梯度只是softmax(a)-b。由于softmax(a)是模型的最终激活值，这意味着梯度与预测和目标之间的差异成正比。这与回归中的均方误差相同（假设没有最终激活函数）就直接与y_range相加，因为<code>(a-b)**2</code>的梯度为<code>2*(a-b)</code>。因为梯度是线性的，这意味着我们不会看到梯度的突然跳跃或指数级增长，这应该使得模型的训练过程更平滑。</p><h2 id="模型解释"><a href="#模型解释" class="headerlink" title="模型解释"></a>模型解释</h2><p>可以使用混淆矩阵（confusion_matrix）看模型的效果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">interp <span class="token operator">=</span> ClassificationInterpretation<span class="token punctuation">.</span>from_learner<span class="token punctuation">(</span>learn<span class="token punctuation">)</span>interp<span class="token punctuation">.</span>plot_confusion_matrix<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405300940999.png" width="700">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">混淆矩阵</div></center><p>可以使用<code>most_confused</code>只显示混淆矩阵中预测不正确的单元格。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">interp<span class="token punctuation">.</span>most_confused<span class="token punctuation">(</span>min_val<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 这里显示至少5个或更多错误类别</span><span class="token comment"># [('staffordshire_bull_terrier', 'american_pit_bull_terrier', 6),</span><span class="token comment"># ('Birman', 'Ragdoll', 5),</span><span class="token comment"># ('Ragdoll', 'Birman', 5)]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Birman'</span><span class="token punctuation">,</span> <span class="token string">'Ragdoll'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改进模型"><a href="#改进模型" class="headerlink" title="改进模型"></a>改进模型</h2><p>迁移学习，如何在不破坏预训练权重的情况下尽可能地微调预训练模型。</p><h3 id="学习率查找器"><a href="#学习率查找器" class="headerlink" title="学习率查找器"></a>学习率查找器</h3><p>设置太小，需要多个周期训练模型，并且会记住数据，导致过拟合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet34<span class="token punctuation">,</span> metrics<span class="token operator">=</span>error_rate<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fine_tune<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> base_lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment"># 设大点试试</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405300942584.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">学习率设为0.1</div></center><p>！不对劲啊🙃</p><p>学习率查找器（learning rate finder）：从一个很小的学习率开始，计算出其损失，然后学习率每次倍增，直到损失更差。然后以下规则二选一</p><ul><li>选择的损失比达到最小损失时少一个数量级（即最小值除以10）</li><li>选择曲线上损失明显减少的最后一点</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet34<span class="token punctuation">,</span> metrics<span class="token operator">=</span>error_rate<span class="token punctuation">)</span>lr_min<span class="token punctuation">,</span>lr_steep <span class="token operator">=</span> learn<span class="token punctuation">.</span>lr_find<span class="token punctuation">(</span>suggest_funcs<span class="token operator">=</span><span class="token punctuation">(</span>minimum<span class="token punctuation">,</span> steep<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Minimum/10: </span><span class="token interpolation"><span class="token punctuation">{</span>lr_min<span class="token punctuation">:</span><span class="token format-spec">.2e</span><span class="token punctuation">}</span></span><span class="token string">, steepest point: </span><span class="token interpolation"><span class="token punctuation">{</span>lr_steep<span class="token punctuation">:</span><span class="token format-spec">.2e</span><span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># Minimum/10: 1.00e-02, steepest point: 3.02e-03</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405300945946.png" width="500">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">学习率与损失</div></center><p>上图可以看出，在1e-6到1e-3范围内，模型没有训练，之后损失减少，直到最小值，然后又增加。不希望学习率超过1e-1，因为这会导致训练出现发散的情况。</p><p>看上去似乎3e-3左右的学习率是合适的，试试看</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet34<span class="token punctuation">,</span> metrics<span class="token operator">=</span>error_rate<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fine_tune<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> base_lr<span class="token operator">=</span><span class="token number">3e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405301440994.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">学习率设为3e-3的训练结果</div></center><p><strong>对数范围</strong>，在学习率查找器绘制的图像中，学习率通常是在对数尺度上表示的。这是因为在优化神经网络时，我们通常更关心学习率的数量级，而不是它的精确值。</p><p>例如，1e-3（或0.001）和1e-2（或0.01）之间的中点在线性尺度上是0.0055，但在对数尺度上，它会更接近于1e-3。这是因为在对数尺度上，<strong>每个单位的距离表示的是值的倍数，而不是值的增量</strong>。所以，对数尺度上的中点表示的是两个值的几何平均数，而不是它们的算术平均数。</p><p>在 fastai 中，你可以使用 <code>Learner.lr_find</code> 方法来找到一个好的学习率。这个方法会绘制一个损失与学习率的图像，其中学习率是在对数尺度上表示的。你可以通过查找损失最快下降的学习率来选择一个好的学习率。</p><p>算术平均数和几何平均数是两种不同的计算平均值的方法。</p><ul><li>算术平均数是所有数值的和除以数值的数量。例如，数值 2, 4, 6 的算术平均数是 (2+4+6)/3 = 4。</li><li>几何平均数是所有数值的乘积的 n 次方根，其中 n 是数值的数量。例如，数值 2, 4, 8 的几何平均数是 (2*4*8)^(1/3) ≈ 4.16。</li></ul><p>在对数尺度上，我们通常使用几何平均数，因为它可以给出数值的中间数量级。例如，对于数值 1e-3 和 1e-2，它们的几何平均数是 (1e-3 * 1e-2)^(1/2) = 3.16e-3，这个值在对数尺度上位于 1e-3 和 1e-2 之间。</p><h3 id="解冻与迁移学习"><a href="#解冻与迁移学习" class="headerlink" title="解冻与迁移学习"></a>解冻与迁移学习</h3><p>卷积神经网络由多个线性层组成，每两层之间有一个非线性激活函数，然后是一个或多个最终的线性层，最后有一个激活函数，如softmax。最后一个线性层使用一个列数足够多的矩阵，以便输出的大小与模型中的类别数相同（假设在进行分类）。</p><p>当在迁移学习中进行微调时，最后的线性层用处不大，用新层替换，匹配新的任务。</p><p>新添加的层具有随机权重，在微调之前具有完全随机的输出。前几层网络可以寻找到通用的特征，如边缘和梯度，后几层网络仍能代表一些对我们有用的特征。</p><p>目标：训练的模型能记住预训练模型中具有普适且通用的一些特征，然后使用它们来解决特定任务，并仅根据特定任务的具体情况进行调整。</p><p><strong>微调挑战</strong>：如何用能够正确实现期望任务的权重替换掉添加的线性层中的随机权重，而不破坏经过仔细训练的权重和其他层？</p><p><strong>实现</strong>：告诉优化器只更新那些随机添加的最终层中的权重，不改变神经网络其余部分的权重。（形象说成是把那些预训练层冻结住）</p><p><strong>fastai</strong>：当从预训练网络创建模型时，fastai会自动冻结所有预训练层。当调用微调方法时，fastai做两件事：</p><ul><li>每一周期都只训练随机添加的层，冻结住所有的其他层</li><li>解冻所有层，并根据我们设定好的周期数对其进行训练</li></ul><p>自定义<code>fine_tune</code>训练过程，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>fine_tune?? <span class="token comment"># 查看fine_tune源代码</span><span class="token comment">###</span>Signature<span class="token punctuation">:</span>learn<span class="token punctuation">.</span>fine_tune<span class="token punctuation">(</span>    epochs<span class="token punctuation">,</span>    base_lr<span class="token operator">=</span><span class="token number">0.002</span><span class="token punctuation">,</span>    freeze_epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    lr_mult<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>    pct_start<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>    div<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token punctuation">,</span>    lr_max<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    div_final<span class="token operator">=</span><span class="token number">100000.0</span><span class="token punctuation">,</span>    wd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    moms<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    cbs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    reset_opt<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    start_epoch<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">)</span>Source<span class="token punctuation">:</span>   <span class="token decorator annotation punctuation">@patch</span><span class="token decorator annotation punctuation">@delegates</span><span class="token punctuation">(</span>Learner<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fine_tune</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span>Learner<span class="token punctuation">,</span> epochs<span class="token punctuation">,</span> base_lr<span class="token operator">=</span><span class="token number">2e-3</span><span class="token punctuation">,</span> freeze_epochs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> lr_mult<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>              pct_start<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> div<span class="token operator">=</span><span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Fine tune with `Learner.freeze` for `freeze_epochs`, then with `Learner.unfreeze` for `epochs`, using discriminative LR."</span>    self<span class="token punctuation">.</span>freeze<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span>freeze_epochs<span class="token punctuation">,</span> <span class="token builtin">slice</span><span class="token punctuation">(</span>base_lr<span class="token punctuation">)</span><span class="token punctuation">,</span> pct_start<span class="token operator">=</span><span class="token number">0.99</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    base_lr <span class="token operator">/=</span> <span class="token number">2</span>    self<span class="token punctuation">.</span>unfreeze<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span>epochs<span class="token punctuation">,</span> <span class="token builtin">slice</span><span class="token punctuation">(</span>base_lr<span class="token operator">/</span>lr_mult<span class="token punctuation">,</span> base_lr<span class="token punctuation">)</span><span class="token punctuation">,</span> pct_start<span class="token operator">=</span>pct_start<span class="token punctuation">,</span> div<span class="token operator">=</span>div<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>File<span class="token punctuation">:</span>      f<span class="token punctuation">:</span>\anconda3\envs\pytorch\lib\site<span class="token operator">-</span>packages\fastai\callback\schedule<span class="token punctuation">.</span>pyType<span class="token punctuation">:</span>      method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fine_tune</code> 是 fastai 库中的一个方法，用于对预训练模型进行微调。以下是参数的解释：</p><ul><li><code>epochs</code>：整个数据集的训练次数。</li><li><code>base_lr</code>：训练开始时的学习率。</li><li><code>freeze_epochs</code>：在开始微调之前，冻结预训练层并训练新添加的层的周期数。</li><li><code>lr_mult</code>：最后一层和第一层之间的学习率的比率。</li><li><code>pct_start</code>：学习率调度的上升阶段所占的比例。</li><li><code>div</code>：最大学习率和最小学习率之间的比率。</li><li><code>lr_max</code>：学习率调度的最大学习率。</li><li><code>div_final</code>：最终学习率和最小学习率之间的比率。</li><li><code>wd</code>：权重衰减。</li><li><code>moms</code>：动量。</li><li><code>cbs</code>：要传递给训练器的回调函数。</li><li><code>reset_opt</code>：是否在微调前重置优化器。</li><li><code>start_epoch</code>：开始训练的周期。</li></ul><p>这个方法首先冻结预训练模型的所有层，只训练新添加的层（比如在图像分类任务中的全连接层）。然后，它解冻所有的层，并使用学习率调度进行训练。学习率调度开始时，学习率会逐渐增加，然后再逐渐减小。这种策略可以帮助模型快速收敛，并避免陷入不良的局部最优。</p><p>直接调用底层方法更简单，使用<code>fit_one_cycle</code>对随机添加的层进行几个周期的训练。以较低的学习率开始训练，然后在第一部分的训练中逐渐提高学习率，再在最后一部分的训练中逐渐降低学习率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>fit_one_cycle??Signature<span class="token punctuation">:</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span>    n_epoch<span class="token punctuation">,</span>    lr_max<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    div<span class="token operator">=</span><span class="token number">25.0</span><span class="token punctuation">,</span>    div_final<span class="token operator">=</span><span class="token number">100000.0</span><span class="token punctuation">,</span>    pct_start<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span>    wd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    moms<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    cbs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    reset_opt<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>    start_epoch<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">)</span>Source<span class="token punctuation">:</span>   <span class="token decorator annotation punctuation">@patch</span><span class="token keyword">def</span> <span class="token function">fit_one_cycle</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span>Learner<span class="token punctuation">,</span> n_epoch<span class="token punctuation">,</span> lr_max<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> div<span class="token operator">=</span><span class="token number">25.</span><span class="token punctuation">,</span> div_final<span class="token operator">=</span><span class="token number">1e5</span><span class="token punctuation">,</span> pct_start<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> wd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                  moms<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> cbs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> reset_opt<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> start_epoch<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Fit `self.model` for `n_epoch` using the 1cycle policy."</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>opt <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>create_opt<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>set_hyper<span class="token punctuation">(</span><span class="token string">'lr'</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>lr <span class="token keyword">if</span> lr_max <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> lr_max<span class="token punctuation">)</span>    lr_max <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>h<span class="token punctuation">[</span><span class="token string">'lr'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> h <span class="token keyword">in</span> self<span class="token punctuation">.</span>opt<span class="token punctuation">.</span>hypers<span class="token punctuation">]</span><span class="token punctuation">)</span>    scheds <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'lr'</span><span class="token punctuation">:</span> combined_cos<span class="token punctuation">(</span>pct_start<span class="token punctuation">,</span> lr_max<span class="token operator">/</span>div<span class="token punctuation">,</span> lr_max<span class="token punctuation">,</span> lr_max<span class="token operator">/</span>div_final<span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token string">'mom'</span><span class="token punctuation">:</span> combined_cos<span class="token punctuation">(</span>pct_start<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>moms <span class="token keyword">if</span> moms <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">else</span> moms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    self<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>n_epoch<span class="token punctuation">,</span> cbs<span class="token operator">=</span>ParamScheduler<span class="token punctuation">(</span>scheds<span class="token punctuation">)</span><span class="token operator">+</span>L<span class="token punctuation">(</span>cbs<span class="token punctuation">)</span><span class="token punctuation">,</span> reset_opt<span class="token operator">=</span>reset_opt<span class="token punctuation">,</span> wd<span class="token operator">=</span>wd<span class="token punctuation">,</span> start_epoch<span class="token operator">=</span>start_epoch<span class="token punctuation">)</span>File<span class="token punctuation">:</span>      f<span class="token punctuation">:</span>\anconda3\envs\pytorch\lib\site<span class="token operator">-</span>packages\fastai\callback\schedule<span class="token punctuation">.</span>pyType<span class="token punctuation">:</span>      method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fit_one_cycle</code> 方法的参数解释如下：</p><ul><li><code>n_epoch</code>：训练的周期数，即整个数据集的训练次数。</li><li><code>lr_max</code>：学习率调度的最大学习率。</li><li><code>div</code>：初始学习率与 <code>lr_max</code> 的比率，用于计算初始学习率。</li><li><code>div_final</code>：最终学习率与 <code>lr_max</code> 的比率，用于计算最终学习率。</li><li><code>pct_start</code>：在训练周期中，学习率从初始值增加到 <code>lr_max</code> 的部分所占的比例。</li><li><code>wd</code>：权重衰减系数，用于正则化模型参数。</li><li><code>moms</code>：动量的最大值和最小值，用于调整优化器的动量。</li><li><code>cbs</code>：需要添加到训练过程中的回调函数列表。</li><li><code>reset_opt</code>：是否在训练开始时重置优化器。</li><li><code>start_epoch</code>：训练开始的周期数，通常用于继续之前中断的训练。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet34<span class="token punctuation">,</span> metrics<span class="token operator">=</span>error_rate<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3e-3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405301451140.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">fit_one_cycle训练</div></center><p>然后解冻所有层：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>unfreeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次运行<code>lr_find</code>，因为要训练的层数更多，而权重已经训练了三个周期了，这意味着以前找到的学习率已经不再适合当前任务。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>lr_find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># SuggestedLRs(valley=1.0964781722577754e-06)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405301453032.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">查找学习率</div></center><p>该图与之前的完整训练有所不同，训练过程中没有出现损失的急剧下降，因为模型时训练过的。而在损失急剧上升之前，有一个稍微平坦的区域，在此取一个点，1e-6.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> lr_max<span class="token operator">=</span><span class="token number">1e-6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405301512752.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">学习率为2e-5开始训练</div></center><p>预训练模型的最深层可能不需要像最后几层那样高的学习率，因此可能应该对不同的层使用不同的学习率，称为<strong>区别学习率</strong>。</p><h3 id="区别学习率"><a href="#区别学习率" class="headerlink" title="区别学习率"></a>区别学习率</h3><p>因为已经经过预训练了，所以不希望预训练参数的学习率像之后添加的那么高，对模型进行微调的过程中，让后面的层比前面的层变化得更快时有意义的。</p><p>fastai默认使用区别学习率：对神经网络靠前的层使用较低的学习率，对靠后的层使用较高的学习率（尤其是添加了随机参数的层）。通过迁移学习，神经网络不同的层次应该以不同的速度被训练。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet34<span class="token punctuation">,</span> metrics<span class="token operator">=</span>error_rate<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3e-3</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>unfreeze<span class="token punctuation">(</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> lr_max<span class="token operator">=</span><span class="token builtin">slice</span><span class="token punctuation">(</span><span class="token number">1e-6</span><span class="token punctuation">,</span><span class="token number">1e-4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如上，slice传递的第一个参数是神经网络（预训练层之后新加的层）最早一层的学习率，第二个值是最后一层的学习率，中间层的学习率将在该范围内成倍等间距地递增。</p><ul><li><code>n_epoch</code>：训练的周期数，即整个数据集的训练次数。</li><li><code>lr_max</code>：学习率调度的最大学习率。</li></ul><p><code>slice(1e-6,1e-4)</code> 表示学习率在训练过程中从 1e-6 变化到 1e-4。这是一种称为 “学习率切片” 的技术，它可以让不同的层使用不同的学习率，通常情况下，模型的前面几层的学习率会比后面几层的学习率小。这是因为前面的层通常负责提取更通用的特征，而后面的层负责提取更具体的特征，所以我们通常希望在训练过程中更多地更新后面的层。</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405301551880.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">区别学习率训练结果</div></center><p>fastai可以通过一张图展现训练和验证过程中的损失变化情况：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span>plot_loss<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405301552777.png" width="500">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练和验证过程中的损失变化</div></center><p>训练集上损失变得越来越好，但最终验证集上损失的提升慢，甚至有些糟糕，损失变大的地方，这是模型开始过拟合的预警点。但不影响指标的提高。</p><h3 id="选择训练的周期数"><a href="#选择训练的周期数" class="headerlink" title="选择训练的周期数"></a>选择训练的周期数</h3><p><strong>如何选择训练神经网络的周期数（epochs）：</strong></p><ol><li>训练周期数的选择往往受到时间限制，而不是模型的泛化能力或准确率。因此，首先应选择一个在你愿意等待的时间内可以完成的训练周期数。</li><li>通过观察训练和验证损失图，以及你选择的度量指标，如果你发现在最后的周期中，这些指标仍在改善，那么说明你的训练周期数并未过多。</li><li>另一方面，你可能会发现你选择的度量指标在训练结束时变得更糟。这可能是因为模型过于自信，或者错误地记忆了数据。我们实际关心的是后者。损失函数只是我们用来让优化器可以进行微分和优化的工具，而不是我们实际关心的东西。</li><li>在 1cycle 训练出现之前，通常会在每个周期结束时保存模型，然后从所有周期中选择准确率最高的模型。这被称为 “<strong>早停</strong>“（early stopping）。但这种方法不太可能给出最好的结果，因为中间的周期发生在学习率还未达到可以找到最佳结果的小值之前。因此，如果你发现你的模型过拟合了，你应该从头开始重新训练你的模型，并根据你之前找到的最佳结果来选择总的训练周期数。</li><li>如果你有更多的时间来训练更多的周期，你可能会希望使用这些时间来训练更多的参数，即使用更深的架构。</li></ol><p><strong>fastai中如何使用早停（early stopping）来防止过拟合？</strong></p><p>在 fastai 中，你可以使用 <code>EarlyStoppingCallback</code> 来实现早停。这个回调函数会在训练过程中监控一个指定的度量（如验证损失），并在该度量连续几个周期不再改善时停止训练，以防止模型过拟合。</p><p>以下是如何在 fastai 中使用 <code>EarlyStoppingCallback</code> 的示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>callback <span class="token keyword">import</span> EarlyStoppingCallbacklearn <span class="token operator">=</span> cnn_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet34<span class="token punctuation">,</span> metrics<span class="token operator">=</span>accuracy<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> cbs<span class="token operator">=</span>EarlyStoppingCallback<span class="token punctuation">(</span>monitor<span class="token operator">=</span><span class="token string">'valid_loss'</span><span class="token punctuation">,</span> min_delta<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> patience<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>EarlyStoppingCallback</code> 会监控验证损失 (<code>monitor='valid_loss'</code>)。如果验证损失在连续 3 个周期 (<code>patience=3</code>) 内的改善都小于 0.01 (<code>min_delta=0.01</code>)，那么训练将会被停止。</p><p>注意，<code>EarlyStoppingCallback</code> 只能在 <code>fit</code> 或 <code>fit_one_cycle</code> 等训练方法中使用，不能在 <code>Learner</code> 的构造函数中使用。</p><h3 id="更深的网络架构"><a href="#更深的网络架构" class="headerlink" title="更深的网络架构"></a>更深的网络架构</h3><p>神经网络模型的大小（参数数量）对模型性能的影响，以及如何处理深度模型训练中可能遇到的问题。</p><ol><li>一般来说，参数更多的模型能更准确地拟合数据，但也更容易过拟合，因为有更多的参数可以用来记住训练数据的特定细节。</li><li>由于我们通常使用预训练的模型，所以我们需要选择已经被预训练过的层数。这就是为什么实践中的神经网络架构通常只有少数几种变体，例如 ResNet 就有 18、34、50、101 和 152 层的变体。</li><li>使用更深的模型需要更多的 GPU 内存，可能会导致内存溢出错误。解决这个问题的方法是减小批次大小，即一次通过模型的图像数量。</li><li>更深的架构需要更长的训练时间。一种可以显著加速训练的技术是<strong>混合准确率训练</strong>，即在可能的情况下使用准确率较低的数字（半准确率浮点，也称fp16）进行训练。张量核这一特殊功能，用更少的内存提高训练速度，在 fastai 中，可以通过在创建 <code>Learner</code> 后添加 <code>to_fp16()</code> 来启用这个功能。</li><li>你无法提前知道哪种架构最适合你的问题，需要通过实际训练来尝试。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>callback<span class="token punctuation">.</span>fp16 <span class="token keyword">import</span> <span class="token operator">*</span>learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet50<span class="token punctuation">,</span> metrics<span class="token operator">=</span>error_rate<span class="token punctuation">)</span><span class="token punctuation">.</span>to_fp16<span class="token punctuation">(</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fine_tune<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> freeze_epochs<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405301620596.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">混合准确率训练</div></center><p>更大的模型不一定是更好的模型，在开始扩大模型之前，可以先尝试小模型。</p><blockquote><p><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/05_pet_breeds.ipynb">https://nbviewer.org/github/fastai/fastbook/blob/master/05_pet_breeds.ipynb</a></p></blockquote><h1 id="多标签分类与回归"><a href="#多标签分类与回归" class="headerlink" title="多标签分类与回归"></a>多标签分类与回归</h1><p>迁移学习要注意更改损失函数，</p><ul><li><p>用于单标签分类的nn.CrossEntrophyLoss</p></li><li><p>用于多标签分类的nn.BCEWithLogitsLoss</p></li><li><p>用于回归的nn.MSELoss</p></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastai </tag>
            
            <tag> cv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回归</title>
      <link href="/2024/06/02/regression/"/>
      <url>/2024/06/02/regression/</url>
      
        <content type="html"><![CDATA[<h1 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h1><p><strong>理解数据块API</strong></p><p>这里考虑图像回归问题，人们常把它看成一个独立的任务，但是，也可以把它当作另一个基于数据块API的CNN。</p><p><strong>关键点检测模型</strong>。<code>关键点</code>是指图像中的特定位置。本例为人的图像找到每张图像中人脸的中心点，即实际上要为每张图像预测两个值：人脸中心点的行坐标和列坐标。</p><h2 id="配置数据"><a href="#配置数据" class="headerlink" title="配置数据"></a>配置数据</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">path <span class="token operator">=</span> untar_data<span class="token punctuation">(</span>URLs<span class="token punctuation">.</span>BIWI_HEAD_POSE<span class="token punctuation">)</span><span class="token comment"># 查看数据</span><span class="token comment"># Path.BASE_PATH = path</span><span class="token comment"># path.ls().sorted()</span><span class="token comment"># (path/'01').ls().sorted()</span>img_files <span class="token operator">=</span> get_image_files<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">img2pose</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> Path<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token format-spec">-7]</span><span class="token punctuation">}</span></span><span class="token string">pose.txt'</span></span><span class="token punctuation">)</span>img2pose<span class="token punctuation">(</span>img_files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>im <span class="token operator">=</span> PILImage<span class="token punctuation">.</span>create<span class="token punctuation">(</span>img_files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># im.shape</span>im<span class="token punctuation">.</span>to_thumb<span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>理解相机校准参数文件<code>depth.cal</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">575.816</span> <span class="token number">0</span> <span class="token number">320</span> <span class="token number">0</span> <span class="token number">575.816</span> <span class="token number">240</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token comment">//相机内参矩阵,3x3的相机内参矩阵，用于将3D点投影到2D图像平面。它包含了焦距（f_x, f_y）和主点（c_x, c_y）的坐标：f_x = 575.816 和 f_y = 575.816 是x轴和y轴的焦距，单位通常是像素。c_x = 320 和 c_y = 240 是图像的光学中心（也称为主点）的坐标，即图像平面上与相机光轴交点的坐标。</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token comment">//畸变系数，用于校正相机镜头引起的图像畸变。在这个文件中，所有的畸变系数都是0，意味着假设没有畸变或畸变已经被其他方式校正。</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token comment">//3x3的单位矩阵，代表旋转矩阵。在这个上下文中，它可能表示相机相对于某个参考坐标系的旋转。单位矩阵意味着没有旋转。</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token comment">//平移向量，用于描述相机相对于参考坐标系的平移。这里的0值意味着没有平移。</span><span class="token number">640</span> <span class="token number">480</span><span class="token comment">//图像的分辨率，即图像的宽度和高度。在这个例子中，图像的宽度是640像素，高度是480像素。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些参数通常用于3D重建、图像校正和深度感知等计算机视觉应用中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 提取头部中心点</span>cal <span class="token operator">=</span> np<span class="token punctuation">.</span>genfromtxt<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">'01'</span><span class="token operator">/</span><span class="token string">'rgb.cal'</span><span class="token punctuation">,</span> skip_footer<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_ctr</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>    ctr <span class="token operator">=</span> np<span class="token punctuation">.</span>genfromtxt<span class="token punctuation">(</span>img2pose<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> skip_header<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    c1 <span class="token operator">=</span> ctr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> cal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span>ctr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> cal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    c2 <span class="token operator">=</span> ctr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> cal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>ctr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> cal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#返回校正后的坐标</span>get_ctr<span class="token punctuation">(</span>img_files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># tensor([338.8099, 284.0216])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造数据块"><a href="#构造数据块" class="headerlink" title="构造数据块"></a>构造数据块</h2><p>步骤 1: 定义 <code>get_y</code> 函数</p><p><code>get_y</code> 函数用于为每个项目（在这个场景中是图像）提供标签。用来提取图像中心点的坐标。</p><p>步骤 2: 使用 <code>DataBlock</code> API</p><p>使用 <code>DataBlock</code> API 来定义数据的加载方式，包括输入和标签的类型、如何分割数据集、如何获取输入和标签等。</p><p>步骤 3: 定义分割函数</p><p>由于数据集中同一个人可能出现在多张图像中，为了确保模型能够泛化到未见过的人，需要特别注意数据的分割方式。可以创建一个分割函数，这个函数基于文件夹名（每个人的图像存储在单独的文件夹中）来决定哪些图像用于训练，哪些用于验证。</p><p>步骤 4: 调整图像大小</p><p>为了加速训练过程，可以在数据块中加入一个步骤来将图像大小调整为原始大小的一半。</p><p>步骤 5: 使用 <code>PointBlock</code></p><p>由于标签代表坐标，需要告诉 <code>fastai</code> 这一点，这样在进行数据增强时，<code>fastai</code> 会相应地增强这些坐标。<code>PointBlock</code> 用于指定标签是坐标点。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">biwi <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>    blocks<span class="token operator">=</span><span class="token punctuation">(</span>ImageBlock<span class="token punctuation">,</span> PointBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>    get_items<span class="token operator">=</span>get_image_files<span class="token punctuation">,</span>    get_y<span class="token operator">=</span>get_ctr<span class="token punctuation">,</span>    splitter<span class="token operator">=</span>FuncSplitter<span class="token punctuation">(</span><span class="token keyword">lambda</span> o<span class="token punctuation">:</span> o<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name<span class="token operator">==</span><span class="token string">'13'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">#这里使用了 FuncSplitter 并传入了一个匿名函数（lambda 函数）。这个函数检查每个项目的父目录名是否等于 '13'。如果等于，这意味着这个项目（图像）属于验证集；如果不等于，这意味着这个项目属于训练集。</span>    batch_tfms<span class="token operator">=</span>aug_transforms<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>点与数据增强：fastai特有的能自动并准确地将数据增强应用到坐标上的库</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls <span class="token operator">=</span> biwi<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">)</span>dls<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span>max_n<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 先查看一下数据</span>xb<span class="token punctuation">,</span>yb <span class="token operator">=</span> dls<span class="token punctuation">.</span>one_batch<span class="token punctuation">(</span><span class="token punctuation">)</span>xb<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>yb<span class="token punctuation">.</span>shape<span class="token comment"># (torch.Size([64, 3, 240, 320]), torch.Size([64, 1, 2]))</span><span class="token comment">#64个图像，3个颜色通道，340*320</span><span class="token comment">#64个样本，每个样本的标签是一个1x2的张量</span>yb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#TensorPoint([[-0.1604,  0.1157]], device='cuda:0')</span><span class="token comment"># 从 DataLoader 中获取一个批次的数据。这个方法非常有用，特别是当你想快速检查数据批次的内容或者格式时。执行这个方法会返回两个元素：xb 和 yb。</span><span class="token comment">#xb 代表输入数据的批次（例如图像），它是一个张量（Tensor）。</span><span class="token comment">#yb 代表与 xb 对应的标签或目标的批次，它也是一个张量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在使用 <code>fastai</code> 库进行图像回归任务时，其强大之处在于你不需要专门为图像回归设计一个独立的应用程序。相反，你只需正确标注数据，并告诉 <code>fastai</code> 独立变量（输入）和因变量（标签）分别代表什么类型的数据。这种灵活性和简便性使得 <code>fastai</code> 成为处理各种机器学习任务的强大工具。</p></blockquote><h2 id="创建Learner，训练模型"><a href="#创建Learner，训练模型" class="headerlink" title="创建Learner，训练模型"></a>创建Learner，训练模型</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet18<span class="token punctuation">,</span> y_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#坐标被缩放到-1到1区间 </span><span class="token comment"># fastai中，y_range通过使用sigmoid_range来实现</span><span class="token keyword">def</span> <span class="token function">sigmoid_range</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>hi<span class="token operator">-</span>lo<span class="token punctuation">)</span> <span class="token operator">+</span> lo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>对于 <code>y_range=(-1,1)</code>，这意味着模型的输出被限制在 -1 到 1 之间。这通常通过在模型的最后添加一个 Sigmoid 或 Tanh 激活函数来实现，然后将输出缩放到指定的范围。在图像回归任务中，这可以帮助模型学习预测特定范围内的值，例如预测图像中某个点的归一化坐标。</p><p>使用 <code>y_range</code> 的原因包括：</p><ol><li><strong>改善学习稳定性</strong>：限制输出范围有助于防止模型在训练初期做出极端预测，这可以提高训练过程的稳定性。</li><li><strong>匹配预期输出</strong>：如果你知道目标变量的范围，设置 <code>y_range</code> 可以确保模型的输出始终在这个范围内，这对于提高模型性能很有帮助。</li><li><strong>简化模型的最后一层</strong>：通过在最后一层自动应用适当的激活函数和缩放，<code>y_range</code> 简化了模型架构的设计，使得模型更容易训练和调整。</li></ol></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_function<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>sigmoid_range<span class="token punctuation">,</span>lo<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>hi<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406201542867.png" width="500">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">调整sigmoid的输出范围</div></center><p>查看一下默认使用的损失函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls<span class="token punctuation">.</span>loss_func<span class="token comment"># FlattenedLoss of MSELoss()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用学习率查找器找到一个好的学习率</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>lr_find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用学习率为3e-3</span>lr <span class="token operator">=</span> <span class="token number">3e-3</span>learn<span class="token punctuation">.</span>fit_one_cycle<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> lr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406201612631.png" width="500">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">学习率查找器</div></center><p>查看训练结果</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406201612704.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练结果</div></center><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>show_results<span class="token punctuation">(</span>ds_idx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> max_n<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># learn.show_results(ds_idx=1, nrows=3, figsize=(6,8))</span><span class="token comment"># ds_idx=1：指定显示结果的数据集索引。在 fastai 中，0 通常代表训练集，1 代表验证集。因此，这里表示从验证集中显示结果。</span><span class="token comment"># max_n 直接控制显示的结果数量，而 nrows 可能用于控制显示结果的布局行数。</span><span class="token comment"># figsize=(6,8)：指定显示结果的图形大小，宽度为6英寸，高度为8英寸。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406201615573.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">查看验证集上的结果</div></center><ul><li><strong>灵活的API</strong>：强调了使用灵活、强大的编程接口对于快速开发和实验的重要性。</li><li><strong>迁移学习</strong>：指的是利用一个在某任务上训练好的模型，并将其应用到另一个相关但不同的任务上。这种方法可以显著减少训练时间和所需的数据量。</li><li><strong>图像分类到图像回归的迁移</strong>：展示了迁移学习的灵活性，即使是在任务性质有显著差异的情况下（从分类到回归），也能有效地迁移和应用模型。</li></ul><p>在看似完全不同的问题（单标签分类、多标签分类和回归）中，我们最终使用的是相同的模型，只是输出的数量不同。变化的是损失函数，这就是为什么重要的是要仔细检查您是否为您的问题使用了正确的损失函数。</p><p>如果使用的是 fastai，它会自动尝试从您构建的数据中选择正确的损失函数。但如果使用纯 PyTorch 来构建您的 DataLoaders，确保在决定损失函数选择时仔细思考。通常情况下，可能会需要：</p><ul><li><strong>单标签分类</strong>：使用 <code>nn.CrossEntropyLoss</code></li><li><strong>多标签分类</strong>：使用 <code>nn.BCEWithLogitsLoss</code></li><li><strong>回归</strong>：使用 <code>nn.MSELoss</code></li></ul><h1 id="比较fine-tune和fit-one-cycle"><a href="#比较fine-tune和fit-one-cycle" class="headerlink" title="比较fine_tune和fit_one_cycle"></a>比较fine_tune和fit_one_cycle</h1><p>在 <code>fastai</code> 库中，<code>fine_tune</code> 和 <code>fit_one_cycle</code> 是两种用于模型训练的方法，它们各自有不同的用途和背景。</p><h2 id="fine-tune"><a href="#fine-tune" class="headerlink" title="fine_tune"></a>fine_tune</h2><p><code>fine_tune</code> 方法通常用于迁移学习场景，其中一个预训练模型被调整（fine-tuned）以适应一个新的、但相关的任务。<code>fine_tune</code> 方法的工作流程通常包括两个阶段：</p><ol><li><strong>冻结阶段</strong>：在第一个阶段，模型的主体（通常是预训练的部分）被冻结，只有最后几层（通常是添加的自定义层）被训练。这样做是为了快速适应新任务，同时避免破坏预训练模型的特征提取能力。</li><li><strong>解冻并微调阶段</strong>：在第二个阶段，整个模型（包括预训练的部分）被解冻，并使用较小的学习率进行训练。这一步骤旨在微调模型的所有权重，以更好地适应新任务。</li></ol><h2 id="fit-one-cycle"><a href="#fit-one-cycle" class="headerlink" title="fit_one_cycle"></a>fit_one_cycle</h2><p><code>fit_one_cycle</code> 方法基于一种称为“one cycle policy”的训练策略。这种策略涉及在训练过程中只使用一个学习率循环，其中学习率首先增加到某个最大值，然后再减少。这种方法旨在帮助快速收敛，同时减少训练时间和防止过拟合。</p><p><code>fit_one_cycle</code> 方法适用于从头开始训练模型或在迁移学习中微调整个模型时。它通过动态调整学习率（和可能的动量），在训练过程中帮助模型更有效地找到最优解。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>fine_tune</code> 是为迁移学习设计的，自动包含了冻结预训练层、训练新层和解冻所有层进行微调的步骤。</li><li><code>fit_one_cycle</code> 是一种通用的训练方法，基于“one cycle policy”策略，通过动态调整学习率来加速训练并提高模型性能，适用于各种训练场景。</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
            <tag> 回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实战篇(二)</title>
      <link href="/2024/05/28/springboot-2/"/>
      <url>/2024/05/28/springboot-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-实战篇-二"><a href="#Spring-Boot-实战篇-二" class="headerlink" title="Spring Boot 实战篇(二)"></a>Spring Boot 实战篇(二)</h1><h2 id="文章分类模块相关接口"><a href="#文章分类模块相关接口" class="headerlink" title="文章分类模块相关接口"></a>文章分类模块相关接口</h2><ul><li>新增文章分类</li><li>文章分类列表</li><li>获取文章分类详情</li><li>更新文章分类</li><li>删除文章分类</li></ul><h3 id="新增文章分类"><a href="#新增文章分类" class="headerlink" title="新增文章分类"></a>新增文章分类</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407171712823.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">新增文章分类</div></center><ul><li>使用validation完成参数校验</li><li>在service层需要为Category的createUser、createTime、updateTime属性赋值。</li></ul><h3 id="文章分类列表"><a href="#文章分类列表" class="headerlink" title="文章分类列表"></a>文章分类列表</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407171912883.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">新增文章分类</div></center><p>设置时间格式：在实体类属性前面加注解<code>@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")</code>。</p><h3 id="获取文章分类详情"><a href="#获取文章分类详情" class="headerlink" title="获取文章分类详情"></a>获取文章分类详情</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407171928166.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">新增文章分类</div></center><h3 id="更新文章分类"><a href="#更新文章分类" class="headerlink" title="更新文章分类"></a>更新文章分类</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407172014722.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">更新文章分类</div></center><p><strong>分组校验：把校验项进行归类分组，在完成不同的功能的时候，校验指定组中的校验项。</strong></p><ul><li>定义分组：在实体类内部定义接口；</li><li>定义校验项时指定归属的分组：通过groups属性指定；</li><li>校验时指定要校验的分组：给@Validated注解的value属性赋值</li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407172027916.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">定义分组</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407172028534.png" width="700">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">指定归属分组</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407172028285.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">指定要校验分组</div></center><p><strong>定义校验项时如果某个校验项没有指定分组，默认属于Default分组；分组之间可以继承，A extends B 那么A中拥有B中所有的校验项。</strong></p><h3 id="删除文章分类"><a href="#删除文章分类" class="headerlink" title="删除文章分类"></a>删除文章分类</h3><p>根据id删除文章，so easy！</p><h2 id="文章管理模块相关接口"><a href="#文章管理模块相关接口" class="headerlink" title="文章管理模块相关接口"></a>文章管理模块相关接口</h2><ul><li>新增文章</li><li>文章列表（条件分页）</li><li>获取文章详情</li><li>更新文章</li><li>删除文章</li></ul><h3 id="新增文章"><a href="#新增文章" class="headerlink" title="新增文章"></a>新增文章</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407172133832.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">新增文章</div></center><p><strong>参数校验-自定义校验</strong>：已有的注解不能满足所有的校验需求，特殊的情况需要自定义校验（自定义校验注解）。</p><ul><li>自定义注解State：包含属性 message、groups、payload；</li><li>自定义校验数据的类 StateValidation 实现 ConstraintValidator 接口；</li><li>在需要校验的地方使用自定义注解。</li></ul><h3 id="文章列表（条件分页）"><a href="#文章列表（条件分页）" class="headerlink" title="文章列表（条件分页）"></a>文章列表（条件分页）</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407181105387.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">分页查询</div></center><p>…</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407181920957.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">文件上传</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407181922593.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">文件上传</div></center><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileUploadController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//把文件的内容存储到本地磁盘上</span>        <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保证文件的名字是唯一的，从而防止文件覆盖</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>originalFilename<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"G:\\BOOK\\files\\"</span><span class="token operator">+</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"url访问地址..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407181952846.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">文件上传</div></center><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多标签分类</title>
      <link href="/2024/05/26/multicategory/"/>
      <url>/2024/05/26/multicategory/</url>
      
        <content type="html"><![CDATA[<h1 id="多标签分类"><a href="#多标签分类" class="headerlink" title="多标签分类"></a>多标签分类</h1><h2 id="构建数据块"><a href="#构建数据块" class="headerlink" title="构建数据块"></a>构建数据块</h2><p>数据集中DataFrame对象转变为一个DataLoaders对象：</p><p>PyTorch和fastai有两个用来表示和访问数据集和训练集的主要类：</p><ul><li>Dataset：能为单个数据返回自变量和因变量的元组集合。</li><li>DataLoader：能提供一个小批次的处理流（每个小批次是成对的一批自变量和因变量）的迭代器。</li></ul><p>以上面类为基础，fastai提供两个类将训练集和验证集结合在一起：</p><ul><li>Datasets：包含一个训练Dataset和一个验证Dataset的迭代器。</li><li>DataLoaders：包含一个训练DataLoader和验证DataLoader的对象。</li></ul><p>由于DataLoader基于Dataset构建，并且向Dataset添加了额外的功能（将多个数据项整合成一个批次），因此通常最简单的做法是创建并测试Datasets，测试完成后再查看DataLoaders。</p><blockquote><p>创建一个DataBlock时，逐步进行，在notebook中检查数据，能确保在编程过程中保持顺畅并避免出错。</p></blockquote><p>访问DataFrame，查看中间数据，当成矩阵</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">#按所有行，第0列</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#按所有行，第1列</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">#按第0行，所有列</span><span class="token comment">#   so this is equivalent:</span><span class="token comment"># df.iloc[0]</span><span class="token comment"># 也可通过索引DataFrame中某列名字来获取某列：</span>df<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 可以创建新列，并用列计算</span>tmp_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>tmp_df<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp_df<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">+</span>tmp_df<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以数据集PASCAL为例：开始构建数据块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fastai<span class="token punctuation">.</span>vision<span class="token punctuation">.</span><span class="token builtin">all</span> <span class="token keyword">import</span> <span class="token operator">*</span>path <span class="token operator">=</span> untar_data<span class="token punctuation">(</span>URLs<span class="token punctuation">.</span>PASCAL_2007<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">'train.csv'</span><span class="token punctuation">)</span>dblock <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 无参初始化</span>dsets <span class="token operator">=</span> dblock<span class="token punctuation">.</span>datasets<span class="token punctuation">(</span>df<span class="token punctuation">)</span> <span class="token comment"># 创建Datasets对象，数据源df做参数</span><span class="token comment"># len(dsets.train),len(dsets.valid)</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> dsets<span class="token punctuation">.</span>train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 返回了同一行两次，因为DataBlock假设有两样东西：输入和目标；要从df中选择合适的字段，用get_x和get_y函数。</span><span class="token comment"># dblock = DataBlock(get_x = lambda r: r['fname'], get_y = lambda r: r['labels'])</span><span class="token comment"># dsets = dblock.datasets(df)</span><span class="token comment"># dsets.train[0]此时数据为 名称+标签 ('005620.jpg', 'aeroplane')</span><span class="token comment"># python中的lambda函数定义引用函数与下面同效果</span><span class="token keyword">def</span> <span class="token function">get_x</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> r<span class="token punctuation">[</span><span class="token string">'fname'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_y</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> r<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span>dblock <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>get_x <span class="token operator">=</span> get_x<span class="token punctuation">,</span> get_y <span class="token operator">=</span> get_y<span class="token punctuation">)</span>dsets <span class="token operator">=</span> dblock<span class="token punctuation">.</span>datasets<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># lambda非常适合快速迭代，但与序列化操作不兼容，如果想在训练后导出Learner，建议用自定义的详细函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自变量需要被转换为一个完整的路径才能以图像方式打开；因变量需要以空格为分隔进行字符串分割</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_x</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> path<span class="token operator">/</span><span class="token string">'train'</span><span class="token operator">/</span>r<span class="token punctuation">[</span><span class="token string">'fname'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_y</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> r<span class="token punctuation">[</span><span class="token string">'labels'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>dblock <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>get_x <span class="token operator">=</span> get_x<span class="token punctuation">,</span> get_y <span class="token operator">=</span> get_y<span class="token punctuation">)</span>dsets <span class="token operator">=</span> dblock<span class="token punctuation">.</span>datasets<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># dsets.train[0]为(Path('/home/sunqx/.fastai/data/pascal_2007/train/006162.jpg'), ['aeroplane'])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了打开图像并转换为张量，需要一系列转换，使用block类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dblock <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>blocks<span class="token operator">=</span><span class="token punctuation">(</span>ImageBlock<span class="token punctuation">,</span> MultiCategoryBlock<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">#CategoryBlock只返回一个整数，这里每个数据项能有多个标签</span>                   get_x <span class="token operator">=</span> get_x<span class="token punctuation">,</span> get_y <span class="token operator">=</span> get_y<span class="token punctuation">)</span>dsets <span class="token operator">=</span> dblock<span class="token punctuation">.</span>datasets<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment"># (PILImage mode=RGB size=500x333,</span><span class="token comment"># TensorMultiCategory([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用到<code>独热编码</code>：在一个全0向量中，把存在数据的位置的数值置为1，通过这种方式，对一个整数列表进行编码。</p><p>查看这个例子中的类别代表什么：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">idxs <span class="token operator">=</span> torch<span class="token punctuation">.</span>where<span class="token punctuation">(</span>dsets<span class="token punctuation">.</span>train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1.</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>dsets<span class="token punctuation">.</span>train<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span>idxs<span class="token punctuation">]</span><span class="token comment"># (#1) ['bird']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那数据集如何划分训练集和验证集呢？</p><p>前面是DataBlock随机划分的，自定义如下，使用到<code>is_valid</code>字段：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">splitter</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    train <span class="token operator">=</span> df<span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token operator">~</span>df<span class="token punctuation">[</span><span class="token string">'is_valid'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    valid <span class="token operator">=</span> df<span class="token punctuation">.</span>index<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'is_valid'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train<span class="token punctuation">,</span>validdblock <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>blocks<span class="token operator">=</span><span class="token punctuation">(</span>ImageBlock<span class="token punctuation">,</span> MultiCategoryBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>                   splitter<span class="token operator">=</span>splitter<span class="token punctuation">,</span>                   get_x<span class="token operator">=</span>get_x<span class="token punctuation">,</span>                    get_y<span class="token operator">=</span>get_y<span class="token punctuation">)</span>dsets <span class="token operator">=</span> dblock<span class="token punctuation">.</span>datasets<span class="token punctuation">(</span>df<span class="token punctuation">)</span>dsets<span class="token punctuation">.</span>train<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataLoader将数据集中的数据整合为一个小批次，这是一个张量元组，每个张量都只是将来自数据集中对应位置的数据堆叠起来。要确保每个数据有相同的大小，才可以创建DataLoaders。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dblock <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span>blocks<span class="token operator">=</span><span class="token punctuation">(</span>ImageBlock<span class="token punctuation">,</span> MultiCategoryBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>                   splitter<span class="token operator">=</span>splitter<span class="token punctuation">,</span>                   get_x<span class="token operator">=</span>get_x<span class="token punctuation">,</span>                    get_y<span class="token operator">=</span>get_y<span class="token punctuation">,</span>                   item_tfms <span class="token operator">=</span> RandomResizedCrop<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> min_scale<span class="token operator">=</span><span class="token number">0.35</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dls <span class="token operator">=</span> dblock<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token comment">#fastai批大小默认64</span><span class="token comment"># dls = dblock.dataloaders(df,bs=32) 可自定义</span><span class="token comment">#dls.show_batch(nrows=1, ncols=3) #展示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果从DataBlock创建DataLoaders的过程中出错了，或者如果想查看你的DataBlock，可以使用<code>summary</code>方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用summary方法</span>dblock<span class="token punctuation">.</span>summary<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="创建Learner"><a href="#创建Learner" class="headerlink" title="创建Learner"></a>创建Learner</h2><p>Learner主要包含4项：模型、一个DataLoaders对象，一个优化器和损失函数。</p><h3 id="损失函数：二元交叉熵"><a href="#损失函数：二元交叉熵" class="headerlink" title="损失函数：二元交叉熵"></a>损失函数：二元交叉熵</h3><p>已有数据块，模型使用深度残差神经网络resnet，使用SGD优化器。</p><p>创建Learner：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet18<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Learner中的模型通常是一个继承自<code>nn.Module</code>的类的对象，可以用圆括号调用它，它返回一个模型的激活值。</p><p>把自变量作为一个小批次的处理数据传给它。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token punctuation">,</span>y <span class="token operator">=</span> to_cpu<span class="token punctuation">(</span>dls<span class="token punctuation">.</span>train<span class="token punctuation">.</span>one_batch<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#将一个训练批次的数据从 GPU（如果正在使用）转移到 CPU。</span>activs <span class="token operator">=</span> learn<span class="token punctuation">.</span>model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment">#这批数据被传递给模型以获取激活值（或预测）</span>activs<span class="token punctuation">.</span>shape <span class="token comment">#通过 activs.shape 查询激活值的形状</span><span class="token comment"># torch.Size([64, 20])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>activs形状？因为批大小是64，而我们需要计算20个类别中的每个类别的概率。</p><p>查看激活值：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">activs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># TensorImage([-2.5563, -0.1716,  3.3514, -1.9079, -1.0211,  1.9026,  0.3355,  1.1839,  0.1848, -0.9886, -0.7055,  1.3745, -1.2583,  0.9657,  4.8114, -1.4315, -2.9368,  3.2201, -1.7628,  3.3106],grad_fn=&lt;AliasBackward0&gt;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以通过sigmoid函数将概率缩放到0到1之间。</p><p>损失函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_cross_entropy</span><span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    inputs <span class="token operator">=</span> inputs<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#模型的输出</span>    <span class="token keyword">return</span> <span class="token operator">-</span>torch<span class="token punctuation">.</span>where<span class="token punctuation">(</span>targets<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span>inputs<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#targets标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在二分类问题中，我们通常将概率分布表示为<code>y = sigmoid(x)</code>，其中<code>x</code>是模型输出的 logits（未归一化的概率），<code>y</code>是预测的类别概率（0到1之间的实数）。</p><p>函数的输入参数包括<code>inputs</code>和<code>targets</code>。<code>inputs</code>是一个张量，表示模型输出的 logits；<code>targets</code>是一个张量，表示真实标签（0或1）。</p><p>函数首先使用<code>sigmoid</code>函数激活<code>inputs</code>张量，使其表示为概率分布。然后，使用<code>torch.where</code>函数根据<code>targets</code>张量中的值计算损失。<code>torch.where</code>函数的输入是一个条件表达式，这里我们使用<code>targets==1</code>作为条件表达式。如果<code>targets</code>中的值等于1，那么损失等于<code>1-inputs</code>；否则，损失等于<code>inputs</code>。最后，使用<code>log</code>函数计算损失的 log 值，并使用<code>mean</code>函数计算损失的平均值。</p><p>总之，这个函数计算了二分类问题中模型预测的概率分布与真实标签之间的交叉熵损失。</p><blockquote><p>因为有一个独热编码的因变量，所以不能直接使用nll_loss或softmax（也因此不能使用cross_entropy）</p></blockquote><p><strong>Softmax</strong>函数要求所有预测值的和为1，并且由于使用了指数函数，它倾向于使一个激活值远大于其他值；然而，我们可能确信在一幅图像中出现了多个对象，因此限制激活值的最大和为1并不是一个好主意。同样的道理，如果我们认为图像中没有任何类别出现，我们可能希望激活值的和小于1。</p><p>我们看到的<strong>nll_loss</strong>只返回一个激活值：与单个项目的单个标签相对应的激活值。当我们有多个标签时，这种做法没有意义。</p><p>另一方面，<strong>binary_cross_entropy</strong>函数，它只是<code>mnist_loss</code>与<code>log</code>对数结合，正好提供了我们所需要的，这要归功于PyTorch的逐元素层面操作的魔力。每个激活值将与每列的每个目标进行比较，所以我们不必做任何事情就能让这个函数作用于多列。</p><p>PyTorch确实为我们提供了这个函数。事实上，它提供了许多版本，名称有些令人困惑！</p><p><code>F.binary_cross_entropy</code> 及其模块等效 <code>nn.BCELoss</code> 计算的是对独热编码（one-hot-encoded）目标的交叉熵，但不包括初始的sigmoid。通常对于独热编码的目标，你会想要使用 <code>F.binary_cross_entropy_with_logits</code>（或 <code>nn.BCEWithLogitsLoss</code>），它在单个函数中同时完成sigmoid和二元交叉熵的计算，就像前面的例子一样。</p><p>对于单标签数据集（如MNIST或宠物数据集），其中目标被编码为单个整数，没有初始softmax的版本是 <code>F.nll_loss</code> 或 <code>nn.NLLLoss</code>，有初始softmax的版本是 <code>F.cross_entropy</code> 或 <code>nn.CrossEntropyLoss</code>。</p><p>由于我们有一个独热编码的目标，我们将使用 <code>BCEWithLogitsLoss</code>。</p><p>现在，让我解释一下这些函数的作用：</p><ul><li><code>F.binary_cross_entropy</code> 和 <code>nn.BCELoss</code>：这两个函数用于计算独热编码目标的二元交叉熵损失，但它们不包括sigmoid激活函数。这意味着在使用这些函数之前，你需要手动应用sigmoid函数来获取预测概率。</li><li><code>F.binary_cross_entropy_with_logits</code> 和 <code>nn.BCEWithLogitsLoss</code>：这些函数结合了sigmoid激活和二元交叉熵损失的计算。它们适用于独热编码的目标，并且在内部自动应用sigmoid函数，这使得它们在数值上更稳定，尤其是在处理极端预测值时。</li><li><code>F.nll_loss</code> 和 <code>nn.NLLLoss</code>：这些函数用于没有初始softmax的单标签数据集。它们计算的是负对数似然损失，适用于分类任务中每个实例只有一个正确类别的情况。</li><li><code>F.cross_entropy</code> 和 <code>nn.CrossEntropyLoss</code>：这些函数结合了softmax激活和负对数似然损失的计算。它们适用于单标签数据集，其中目标被编码为单个整数。</li></ul><p>在多标签分类任务中，我们通常会选择 <code>BCEWithLogitsLoss</code>，因为它能够处理每个类别独立的概率，并且在计算损失时考虑到了每个类别的预测概率。这对于那些可能有多个正确标签的情况非常有用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">activs <span class="token operator">=</span> activs<span class="token punctuation">.</span>as_subclass<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span>y <span class="token operator">=</span> y<span class="token punctuation">.</span>as_subclass<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span><span class="token comment"># 确保这些变量具有 Tensor 类型，以便可以对它们应用 PyTorch 的操作和函数</span>loss_func <span class="token operator">=</span> nn<span class="token punctuation">.</span>BCEWithLogitsLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>loss <span class="token operator">=</span> loss_func<span class="token punctuation">(</span>activs<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment"># tensor(1.0336, grad_fn=&lt;BinaryCrossEntropyWithLogitsBackward0&gt;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然而，不必告诉fastai使用哪个损失函数（也可以这么做），因为它会自动选择合适的损失函数。fastai知道DataLoaders有多个类别标签，所以使用默认的nn.BCEWithLogitsLoss。</p></blockquote><p>计算准确率，但是这里不使用准确率</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">accuracy</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> targ<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pred <span class="token operator">=</span> inp<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span>axis<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> targ<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>argmax</code>被预测的类别是激活值最高的那一个。但这里不起作用，因为要求一张图像能有不止一个预测类别。</p><p>在将sigmoid操作应用到激活值上（令它们介于0与1之间）之后，我们需要选择一个阈值来决定哪些是0、哪些是1。每个高于阈值的值被认为是1，低于阈值的值被认为是0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">accuracy_multi</span><span class="token punctuation">(</span>inp<span class="token punctuation">,</span> targ<span class="token punctuation">,</span> thresh<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> sigmoid<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> sigmoid<span class="token punctuation">:</span> inp <span class="token operator">=</span> inp<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>inp<span class="token operator">&gt;</span>thresh<span class="token punctuation">)</span><span class="token operator">==</span>targ<span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以调整默认阈值0.5，创建不同默认值的<code>accuracy_multi</code>版本。为了实现这一点可以使用<code>partial</code>函数，它可以将一个函数与一些参数或关键字绑定在一起，从而使得新版本的函数无论何时被调用，都能始终包含这些参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> say_what<span class="token operator">=</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>say_what<span class="token punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">."</span></span>say_hello<span class="token punctuation">(</span><span class="token string">'Jeremy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>say_hello<span class="token punctuation">(</span><span class="token string">'Jeremy'</span><span class="token punctuation">,</span> <span class="token string">'Ahoy!'</span><span class="token punctuation">)</span><span class="token comment"># ('Hello Jeremy.', 'Ahoy! Jeremy.')</span>f <span class="token operator">=</span> partial<span class="token punctuation">(</span>say_hello<span class="token punctuation">,</span> say_what<span class="token operator">=</span><span class="token string">"Bonjour"</span><span class="token punctuation">)</span>f<span class="token punctuation">(</span><span class="token string">"Jeremy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>f<span class="token punctuation">(</span><span class="token string">"Sylvain"</span><span class="token punctuation">)</span><span class="token comment"># 'Bonjour Jeremy.', 'Bonjour Sylvain.')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><p>这里多分类指标的阈值设为0.2</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet50<span class="token punctuation">,</span> metrics<span class="token operator">=</span>partial<span class="token punctuation">(</span>accuracy_multi<span class="token punctuation">,</span> thresh<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fine_tune<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> base_lr<span class="token operator">=</span><span class="token number">3e-3</span><span class="token punctuation">,</span> freeze_epochs<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>learn.fine_tune(3, base_lr=3e-3, freeze_epochs=4)</code></p></li><li><p><code>fine_tune</code> 方法用于微调模型。首先，它冻结预训练模型的大部分层，只训练最后几层以适应新的数据集。然后，它解冻所有层并继续训练整个模型。</p></li><li><p>第一个参数 <code>3</code> 指定在解冻所有层后训练的周期数（epochs）。</p></li><li><p><code>base_lr=3e-3</code> 设置了学习率。这是在微调过程中使用的基础学习率。</p></li><li><p><code>freeze_epochs=4</code> 指定在开始微调之前，只训练最后几层时使用的周期数。在这个阶段，模型的大部分层都是冻结的。</p></li><li><p>在 <code>fastai</code> 库中，当使用 <code>fine_tune</code> 方法对模型进行微调时，”解冻” 的具体层取决于模型的架构和 <code>fine_tune</code> 方法的实现细节。对于大多数预训练模型，如 <code>resnet50</code>，<code>fine_tune</code> 方法的工作流程大致如下：</p><ol><li><strong>初始阶段</strong>（冻结状态）：在第一阶段，模型的大部分预训练层都被冻结，只有模型的最后几层（通常是头部的几层，这些层负责将预训练模型的特征转换为特定任务的输出）是可训练的。这意味着在这个阶段，只有这些最后的层的权重会被更新。</li><li><strong>解冻并微调</strong>：在第二阶段，<code>fine_tune</code> 方法会解冻模型的所有层，使得整个网络的权重都可以更新。这个阶段通常使用更小的学习率，以避免破坏预训练层学到的有用特征。</li></ol><p>具体到 <code>resnet50</code> 或其他类似的 CNN 架构，”解冻” 的层包括：</p><ul><li><strong>卷积层</strong>：这些层负责从输入图像中提取特征。在微调的第二阶段，所有卷积层都会被解冻，允许模型调整这些层以更好地适应新的数据集。</li><li><strong>批归一化层</strong>（如果有的话）：这些层用于标准化前一层的输出，有助于加速训练过程并提高模型的稳定性。在微调过程中，这些层的参数也可以被更新。</li><li><strong>全连接层</strong>：这是模型的最后几层，通常直接负责生成最终的预测输出。在初始阶段，这些层就已经是可训练的，微调的第二阶段会继续调整它们的权重。</li></ul></li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406200952550.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练模型</div></center><p>如果阈值过低，经常无法得到正确的标记对象。可以通过调整指标，然后调用能够返回验证集上的损失值和所设置的指标的验证函数validate来观察是否得到了正确标记的对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>metrics <span class="token operator">=</span> partial<span class="token punctuation">(</span>accuracy_multi<span class="token punctuation">,</span> thresh<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># (#2) [0.10325726121664047,0.932948112487793]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果阈值设置过高，则只能选出模型十分确信的对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>metrics <span class="token operator">=</span> partial<span class="token punctuation">(</span>accuracy_multi<span class="token punctuation">,</span> thresh<span class="token operator">=</span><span class="token number">0.99</span><span class="token punctuation">)</span>learn<span class="token punctuation">.</span>validate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># (#2) [0.10325726121664047,0.9447012543678284]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过调整 <code>thresh</code> 参数，可以控制将预测概率转换为类别标签的灵敏度，进而影响模型性能的评估。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">preds<span class="token punctuation">,</span>targs <span class="token operator">=</span> learn<span class="token punctuation">.</span>get_preds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># preds.shape #torch.Size([2510, 20])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>learn.get_preds()</code> 方法被用于获取模型在验证集上的预测结果和真实目标（标签）。<code>learn</code> 是一个 <code>Learner</code> 对象，它封装了模型、数据以及训练过程中使用的其他配置。<code>get_preds</code> 方法默认在模型的验证集上执行，并返回两个元素：</p><ol><li>**<code>preds</code>**：一个张量（Tensor），包含了对每个样本的预测概率。在多标签分类问题中，这个张量的形状通常是 <code>(N, C)</code>，其中 <code>N</code> 是样本数量，<code>C</code> 是类别数量。每个元素的值表示模型预测相应样本属于特定类别的概率。</li><li>**<code>targs</code>**：一个张量（Tensor），包含了每个样本的真实标签。在多标签分类问题中，这通常也是一个 <code>(N, C)</code> 形状的张量，采用独热编码表示，即如果样本属于某个类别，则对应位置的值为1，否则为0。</li></ol><p>这个方法非常有用，因为它允许你直接获取模型的预测结果和真实标签，进而可以用于计算各种评估指标，如准确率、召回率、F1 分数等，或者进行进一步的分析和可视化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">accuracy_multi<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> targs<span class="token punctuation">,</span> thresh<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> sigmoid<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment"># TensorBase(0.9579)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>get_preds</code>函数在默认输出时调用激活函数，所以这里<code>accuracy_multi</code>函数不再调用激活函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">xs <span class="token operator">=</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">,</span><span class="token number">0.95</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token comment"># 0.05到0.95的等差为阈值，共设29个点</span>accs <span class="token operator">=</span> <span class="token punctuation">[</span>accuracy_multi<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> targs<span class="token punctuation">,</span> thresh<span class="token operator">=</span>i<span class="token punctuation">,</span> sigmoid<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> xs<span class="token punctuation">]</span>max_acc_index <span class="token operator">=</span> accs<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>accs<span class="token punctuation">)</span><span class="token punctuation">)</span>max_acc_thresh <span class="token operator">=</span> xs<span class="token punctuation">[</span>max_acc_index<span class="token punctuation">]</span><span class="token comment"># 绘制精确度曲线</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> accs<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Accuracy'</span><span class="token punctuation">)</span><span class="token comment"># 标记最大精确度点</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span>max_acc_thresh<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token builtin">max</span><span class="token punctuation">(</span>accs<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token comment"># 添加文本说明</span>plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span>max_acc_thresh<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>accs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'(</span><span class="token interpolation"><span class="token punctuation">{</span>max_acc_thresh<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token builtin">max</span><span class="token punctuation">(</span>accs<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">)'</span></span><span class="token punctuation">,</span> ha<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span> va<span class="token operator">=</span><span class="token string">'bottom'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Threshold'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Accuracy'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Accuracy vs. Threshold'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202406201033213.png" width="500">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">阈值vs精确度</div></center><p>本例中使用验证集来选择超参数（阈值），正是验证集的目的。</p><blockquote><p>如上改变阈值产生的是一个平滑的曲线，所以不用担心这样做会使验证集过拟合。</p><p>当阈值改变导致的准确率变化呈现出平滑曲线时，意味着模型对于阈值的选择具有一定的鲁棒性，即小幅度调整阈值不会导致准确率发生剧烈变化。这种情况下，选择一个最优阈值不太可能是因为偶然地在验证集上表现良好（即过拟合验证集），而是因为模型本身对于不同的阈值具有稳定的泛化能力。理论上，频繁尝试大量超参数值可能会导致模型在验证集上过拟合，因为可能恰好找到了某个特定的超参数值，使得模型在验证集上表现异常良好，但这并不意味着模型在未见过的数据上也能保持同样的表现。</p><p>然而，在实践中，如果超参数调整导致的性能变化呈现出平滑的趋势，这表明模型的性能对于超参数的变化不是特别敏感，因此找到的最优超参数值更有可能是因为模型本身的泛化能力，而不是过度拟合了验证集的特定特征。这种情况下，即使尝试了多个超参数值，也不太可能导致过拟合验证集的问题，因为模型表现的变化是平滑且稳定的，反映了模型对于超参数变化的真实反应，而不是随机波动或偶然误差。</p><p>总结来说，平滑的性能变化曲线意味着模型对超参数的选择具有一定的容错性，这减少了因选择了特定超参数值而导致的验证集过拟合的风险。这是理论与实践之间的一个重要区别，实践中观察到的平滑变化趋势表明了模型的稳定性和泛化能力，而不是过拟合。</p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> CV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多标签分类 </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot3实战篇(一)</title>
      <link href="/2024/05/18/springboot-1/"/>
      <url>/2024/05/18/springboot-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot-实战篇-一"><a href="#Spring-Boot-实战篇-一" class="headerlink" title="Spring Boot 实战篇(一)"></a>Spring Boot 实战篇(一)</h1><h2 id="SpringBoot3-Vue3-前后端知识整合"><a href="#SpringBoot3-Vue3-前后端知识整合" class="headerlink" title="SpringBoot3+Vue3 前后端知识整合"></a>SpringBoot3+Vue3 前后端知识整合</h2><p><strong>后台：</strong></p><ul><li>Validation 数据校验</li><li>Mybatis 数据库操作</li><li>Redis 缓存</li><li>Junit 单元测试</li><li>项目部署</li><li>…</li></ul><p><strong>前端：</strong></p><ul><li>Vite Vue项目脚手架</li><li>Router 路由</li><li>Pina 状态管理</li><li>Element-Plus UI组件</li></ul><p>开发模式：前后端分离</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407122053378.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">开发模式 </div></center><p>开发标准：接口文档</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407122045432.png" width="700">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">标准：接口文档</div></center><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul><li>准备数据库表（MySQL）</li><li>创建springboot工程，引入对应依赖（web、mybatis、mysql驱动）</li><li>配置文件application.yml中引入mybatis的配置信息</li><li>创建包结构并准备实体类</li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407122059115.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">搭建</div></center><h2 id="用户模块相关接口"><a href="#用户模块相关接口" class="headerlink" title="用户模块相关接口"></a>用户模块相关接口</h2><ul><li>注册</li><li>登录</li><li>获取用户详细信息</li><li>更新用户基本信息</li><li>更新用户头像</li><li>更新用户密码</li></ul><p>实体类：根据字段生成 setter, getter, toString 方法。</p><p>使用工具<strong>lombok</strong>：在编译阶段，为实体类自动生成 setter, getter, toString 方法。在pom.xml文件中引入依赖，在实体类添加注解<code>@Data</code>。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--lombok依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开发流程：</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407161606047.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">开发流程</div></center><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407161610775.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">注册</div></center><p>Result类定义统一的响应结果。</p><p><strong>参数校验</strong>：接口文档中对请求参数的格式要求进行校验。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> username<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> username<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">16</span> <span class="token operator">&amp;&amp;</span>            password <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//查询用户</span>            <span class="token class-name">User</span> u <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findByUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//没有占用</span>                <span class="token comment">//注册</span>                userService<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">//占用</span>                <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户名已被占用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"参数不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Spring Validation</code>：Spring提供的一个参数校验框架，使用预定义的注解完成参数校验。</p><ul><li>引入Spring Validation 起步依赖</li><li>在校验参数前面添加@Pattern（还有其他注解可用）注解指定校验规则</li><li>在Controller类上添加@Validated注解</li><li>全局异常处理器，来处理参数校验失败的异常</li></ul><p>在 Spring Boot 中，可以直接在方法参数上使用 <code>@NotNull</code> 注解来确保传入的参数不为 <code>null</code>。不过，为了使 <code>@NotNull</code> 注解生效，需要在方法所在的类上添加 <code>@Validated</code> 注解。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407162039574.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">登录</div></center><p><strong>登录认证</strong>：在未登录的情况下，不可以访问到其他资源。</p><p>令牌就是一段字符串：</p><ul><li>承载业务数据，减少后续请求查询数据库的次数；</li><li>防篡改，保证信息的合法性和有效性；</li></ul><blockquote><p>JWT(<a href="https://jwt.io/">JSON Web Tokens - jwt.io</a>)</p><p>定义了一种简洁的、自包含的格式，用于通信双方以json数据格式安全的传输信息。</p><p>组成：</p><ul><li>第一部分：Header（头），记录令牌类型、签名算法等。</li><li>第二部分：Payload（有效载荷），携带一些自定义信息、默认信息等。（Base64编码，不要存放私密数据）</li><li>第三部分：Signature（签名），防止Token被篡改、确保安全性。将header、payload、借助于指定密钥，通过指定签名算法计算而来。</li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407162118479.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">JWT Token</div></center></blockquote><p>单元测试：JUnit / Spring Boot Test</p><p>JWT生成和验证</p><p>注意事项</p><ul><li>JWT校验时使用的签名秘钥，必须和生成JWT令牌时使用的秘钥是配套的；</li><li>如果JWT令牌解析校验时报错，则说明JWT令牌被篡改或过期失效了，令牌非法。</li></ul><p><strong>如果多个接口有同样的操作要完成，可以使用拦截器。</strong></p><ul><li><p>使用拦截器统一验证令牌；</p></li><li><p>登录和注册接口需要放行。</p></li></ul><h3 id="获取用户详细信息"><a href="#获取用户详细信息" class="headerlink" title="获取用户详细信息"></a>获取用户详细信息</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407171050597.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">获取用户详细信息</div></center><p><strong>开启驼峰命名和下划线命名的自动转换</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ThreadLocal:</p><ul><li>提供线程局部变量<ul><li>用来存取数据：set()/get()</li><li>使用ThreadLocal存储的数据，线程安全</li><li>用完记得调用remove方法释放</li></ul></li></ul><h3 id="更新用户基本信息"><a href="#更新用户基本信息" class="headerlink" title="更新用户基本信息"></a>更新用户基本信息</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407171532951.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">更新用户详细信息</div></center><p><strong>实体-参数校验</strong></p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407171549492.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">实体参数校验</div></center><ul><li>实体类的成员变量上添加注解<ul><li>@NotNull: 详解 <a href="https://springdoc.cn/java-notnull-method-parameter/">https://springdoc.cn/java-notnull-method-parameter/</a></li><li>@NotEmpty</li><li>@Email</li></ul></li><li>接口方法的实体参数上添加@Validated注解</li></ul><h3 id="更新用户头像"><a href="#更新用户头像" class="headerlink" title="更新用户头像"></a>更新用户头像</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407171559477.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">更新用户头像</div></center><p><strong>URL地址-参数校验</strong></p><p>使用<code>@URL</code>注解</p><h3 id="更新用户密码"><a href="#更新用户密码" class="headerlink" title="更新用户密码"></a>更新用户密码</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407171622863.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">更新用户密码</div></center>## Redis-登录优化<h3 id="令牌主动失效机制"><a href="#令牌主动失效机制" class="headerlink" title="令牌主动失效机制"></a>令牌主动失效机制</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407182111235.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">令牌主动失效</div></center><h3 id="SpringBoot集成redis"><a href="#SpringBoot集成redis" class="headerlink" title="SpringBoot集成redis"></a>SpringBoot集成redis</h3><ul><li>导入 spring-boot-starter-data-redis 起步依赖</li><li>在yml配置文件中，配置redis连接信息</li><li>调用API(StringRedisTemplate)完成字符串的存取操作。</li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407182120644.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">SpringBoot集成redis</div></center><h3 id="令牌主动失效"><a href="#令牌主动失效" class="headerlink" title="令牌主动失效"></a>令牌主动失效</h3><ul><li>登录成功后，给浏览器响应令牌的同时，把该令牌存储到redis中;</li><li>LoginInterceptor拦截器中，需要验证浏览器携带的令牌，并同时需要获取到redis中存储的与之相同的令牌;</li><li>当用户修改密码成功后，删除redis中存储的旧令牌。</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NER</title>
      <link href="/2024/02/26/ner/"/>
      <url>/2024/02/26/ner/</url>
      
        <content type="html"><![CDATA[<p><strong>命名实体识别（Named Entity Recognition，NER）</strong>是NLP中一项非常基础的任务。NER是信息提取、问答系统、句法分析、机器翻译等众多NLP任务的重要基础工具。</p><p>实体识别，就是将你想要获取到的实体类型，从一句话里面挑出来的过程。</p><p>“小明在北京大学的燕园看了中国男篮 的一场比赛”。通过NER模型，将“小明 ”以PER，“北京大学”以ORG，“燕园”以LOC，“中国男篮”以ORG为类别分别挑了出来。</p><p>NER是一种序列标注问题，因此他们的数据标注方式也遵照序列标注问题的方式，主要是BIO和BIOES两种。</p><p>B，即Begin，表示开始</p><p>I，即Intermediate，表示中间</p><p>E，即End，表示结尾</p><p>S，即Single，表示单个字符</p><p>O，即Other，表示其他，用于标记无关字符</p><p>“小明在北京大学的燕园看了中国男篮 的一场比赛”按字标注：</p><p>[B-PER，E-PER，O, B-ORG，I-ORG，I-ORG，E-ORG，O，B-LOC，E-LOC，O，O，B-ORG，I-ORG，I-ORG，E-ORG，O，O，O，O]</p><p><strong>NER的过程，就是根据输入的句子，预测出其标注序列的过程。</strong></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MNIST数字分类器</title>
      <link href="/2024/02/25/mnist/"/>
      <url>/2024/02/25/mnist/</url>
      
        <content type="html"><![CDATA[<h1 id="数字分类器"><a href="#数字分类器" class="headerlink" title="数字分类器"></a>数字分类器</h1><h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><p><code>像素相似度</code>：可以使用平均像素值。训练时将所有数字7的图片堆叠在一起，形成<code>(dim,height,weight)</code>。</p><p><code>平均绝对差/L1范数</code>:先对差取绝对值，再求绝对值的平均值。</p><p><code>均方根误差（RMSE）/L2范数</code>:取差平方的均值，然后取其平方根。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">F<span class="token punctuation">.</span>l1_loss<span class="token punctuation">(</span>a_3<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mean7<span class="token punctuation">)</span><span class="token punctuation">,</span> F<span class="token punctuation">.</span>mse_loss<span class="token punctuation">(</span>a_3<span class="token punctuation">,</span>mean7<span class="token punctuation">)</span><span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#l1范数（平均绝对值） mse均方差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="广播机制计算指标"><a href="#广播机制计算指标" class="headerlink" title="广播机制计算指标"></a>广播机制计算指标</h2><p>不是遍历数据集中的每一张图片，而是传递一个张量（tensor），广播机制不同张量可以匹配（相同阶数）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mnist_distance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># dim*h*w，这里求的后两位</span>mnist_distance<span class="token punctuation">(</span>a_3<span class="token punctuation">,</span> mean3<span class="token punctuation">)</span><span class="token comment"># tensor(0.1114)</span>valid_3_dist <span class="token operator">=</span> mnist_distance<span class="token punctuation">(</span>valid_3_tens<span class="token punctuation">,</span> mean3<span class="token punctuation">)</span>valid_3_dist<span class="token punctuation">,</span> valid_3_dist<span class="token punctuation">.</span>shape<span class="token comment"># (tensor([0.1115, 0.1365, 0.1111,  ..., 0.1170, 0.1276, 0.1176]), torch.Size([1010]))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h1><p>梯度下降</p><blockquote><ol><li><p>初始化权重</p></li><li><p>对任意一张图像，使用这些权重进行预测，预测其类别是3还是7</p></li><li><p>基于上述预测结果，通过计算损失来表示模型的准确率</p></li><li><p>计算<strong>梯度</strong>，梯度表明了每个权重对于整个损失变化的影响程度</p></li><li><p>根据计算得到的梯度信息对权重进行迭代</p></li><li><p>回到步骤2，并重复整个操作</p></li><li><p>迭代完成，停止训练过程（模型达到足够的准确率或训练时间达到上限）</p></li></ol></blockquote><p>计算梯度</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> tensor<span class="token punctuation">(</span><span class="token number">3.</span><span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 想得到x**2函数在3.处的梯度，标记变量</span><span class="token comment"># 定义一个函数</span>y <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token comment"># 计算反向传播</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 打印x的梯度</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>  <span class="token comment"># 输出：tensor(6.)</span>xt <span class="token operator">=</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.</span><span class="token punctuation">,</span><span class="token number">4.</span><span class="token punctuation">,</span><span class="token number">10.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 以一个向量作为参数</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 函数中求和，以便接收一个矢量（即一阶张量）并且能够返回一个标量（即一个0阶张量）</span>yt <span class="token operator">=</span> f<span class="token punctuation">(</span>xt<span class="token punctuation">)</span>yt<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>xt<span class="token punctuation">.</span>grad<span class="token comment"># tensor([ 6.,  8., 20.])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>梯度告诉了函数的斜率但是没有告诉确切的参数调整范围。如果斜率很大，则表明需要做更大的调整，而如果斜率很小，则表明已接近最佳值。</p><h1 id="通过学习率迭代"><a href="#通过学习率迭代" class="headerlink" title="通过学习率迭代"></a>通过学习率迭代</h1><p>基于梯度进行模型参数的修改，从将梯度乘以一些很小的值开始的，而这些很小的值被称为<code>学习率（LR）</code>。学习率通常是一个取值范围在0.001到0.1之间的整数，也可以是其他形式。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">-=</span> gradient<span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">*</span> lr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405251527919.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">小学习率下的梯度下降</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405251532977.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">大学习率下的梯度下降</div></center><h2 id="直观的随机梯度下降案例"><a href="#直观的随机梯度下降案例" class="headerlink" title="直观的随机梯度下降案例"></a>直观的随机梯度下降案例</h2><p>模拟圆筒滚过土坡顶峰的速度</p><p>数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">time <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>speed <span class="token operator">=</span> speed <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0.75</span><span class="token operator">*</span><span class="token punctuation">(</span>time<span class="token operator">-</span><span class="token number">9.5</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment"># 二次函数上添加噪声</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>time<span class="token punctuation">,</span>speed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405251555824.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">模拟圆筒滚过土坡顶峰的速度</div></center><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 猜测为二次函数</span>    a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token operator">=</span> params    <span class="token keyword">return</span> a<span class="token operator">*</span><span class="token punctuation">(</span>t<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token comment"># 参数 a,b,c,</span><span class="token keyword">def</span> <span class="token function">mse</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>preds<span class="token operator">-</span>targets<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 损失函数 均方差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>step 1 初始化参数</p><p>将参数初始化为随机值，并通过requires_grad_函数跟踪相关参数的梯度信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">params <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>step 2 计算预测值</p><p>计算出函数的结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">preds <span class="token operator">=</span> f<span class="token punctuation">(</span>time<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构建一个距离函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">show_preds</span><span class="token punctuation">(</span>preds<span class="token punctuation">,</span> ax<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> ax <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span> ax<span class="token operator">=</span>plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>time<span class="token punctuation">,</span> speed<span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>time<span class="token punctuation">,</span> to_np<span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>    ax<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    show_preds<span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数的功能是将预测的速度和实际的速度在同一张图上绘制出来，预测的速度用红色表示，实际的速度用默认的颜色表示。这样，你就可以直观地看到预测的准确性了。</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405251604380.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">计算预测值</div></center></li><li><p>step 3 计算损失</p><p>计算损失</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss <span class="token operator">=</span> mse<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token comment"># tensor(25823.8086, grad_fn=&lt;MeanBackward0&gt;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>step 4 计算梯度</p><p>对修改参数的一个估计</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span>gradparams<span class="token punctuation">.</span>grad <span class="token operator">*</span> <span class="token number">1e-5</span><span class="token comment"># 用梯度优化参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>step 5 迭代权重</p><p>根据得到的梯度对参数更新</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lr <span class="token operator">=</span> <span class="token number">1e-5</span>params<span class="token punctuation">.</span>data <span class="token operator">-=</span> lr <span class="token operator">*</span> params<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>dataparams<span class="token punctuation">.</span>grad <span class="token operator">=</span> <span class="token boolean">None</span><span class="token comment">#链式法则计算梯度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察优化结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">preds <span class="token operator">=</span> f<span class="token punctuation">(</span>time<span class="token punctuation">,</span>params<span class="token punctuation">)</span>mse<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> speed<span class="token punctuation">)</span>show_preds<span class="token punctuation">(</span>preds<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405251615118.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">计算预测值</div></center></li><li><p>step 6 重复以上流程</p><p>定义一个一次迭代的步骤</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">apply_step</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> prn<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    preds <span class="token operator">=</span> f<span class="token punctuation">(</span>time<span class="token punctuation">,</span> params<span class="token punctuation">)</span>    loss <span class="token operator">=</span> mse<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> speed<span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    params<span class="token punctuation">.</span>data <span class="token operator">-=</span> lr <span class="token operator">*</span> params<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data    params<span class="token punctuation">.</span>grad <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> prn<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> preds<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span> apply_step<span class="token punctuation">(</span>params<span class="token punctuation">)</span>_<span class="token punctuation">,</span>axs <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> ax <span class="token keyword">in</span> axs<span class="token punctuation">:</span> show_preds<span class="token punctuation">(</span>apply_step<span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ax<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>损失的确下降了</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405251621364.png" width="700">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">损失下降</div></center></li><li><p>step 7 停止</p><p>迭代了10个epoch停止</p></li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405251627602.png" width="700">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">梯度下降总结</div></center><h1 id="MNIST损失函数"><a href="#MNIST损失函数" class="headerlink" title="MNIST损失函数"></a>MNIST损失函数</h1><blockquote><p>batch @ weights + bias</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">init_params</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token operator">*</span>std<span class="token punctuation">)</span><span class="token punctuation">.</span>requires_grad_<span class="token punctuation">(</span><span class="token punctuation">)</span>weights <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bias <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">mnist_loss</span><span class="token punctuation">(</span>predictions<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>where<span class="token punctuation">(</span>targets<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span>predictions<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>torch.where(condition, x, y)</code>是PyTorch中的一个函数，它的功能是根据一个条件来从两个张量中选择元素。具体来说，<code>condition</code>是一个布尔类型的张量，<code>x</code>和<code>y</code>是两个形状相同的张量。<code>torch.where(condition, x, y)</code>会返回一个新的张量，这个张量的元素来自<code>x</code>和<code>y</code>。如果<code>condition</code>在某个位置的元素为<code>True</code>，那么结果张量在这个位置的元素就是<code>x</code>在这个位置的元素；否则，结果张量在这个位置的元素就是<code>y</code>在这个位置的元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">trgts  <span class="token operator">=</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>prds   <span class="token operator">=</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 假设三张图像，分别是3，7，3 对第一张图像为3具有较高的置信度0.9，第二张图像为7具有较低的置信度0.4，认为是3，第三张图像为3的置信度为0.2，认为是7</span>torch<span class="token punctuation">.</span>where<span class="token punctuation">(</span>trgts<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span>prds<span class="token punctuation">,</span> prds<span class="token punctuation">)</span><span class="token comment"># tensor([0.1000, 0.4000, 0.8000])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，当预测更准确，或者说准确的预测更可靠（绝对值更高），及不准确的预测更不可靠时，此函数返回的数值更小。总是假设损失函数的值越小越好。</p><p>因为需要一个标量作为最终损失，所以mnist_loss会对上一个张量取平均值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mnist_loss<span class="token punctuation">(</span>prds<span class="token punctuation">,</span>trgts<span class="token punctuation">)</span><span class="token comment"># tensor(0.4333)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果将一个假目标的预测值从0.2改为0.8，损失会下降，表明这是一个更好的预测</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mnist_loss<span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>trgts<span class="token punctuation">)</span><span class="token comment"># tensor(0.2333)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>预测的输出设置在0，1之间</strong></p><h2 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h2><p>$\mathrm{S}(\mathrm{x})=\frac{1}{1+\mathrm{e}^{-\mathrm{x}}}$</p><p>总是输出一个介于0和1之间的数值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>torch<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>plot_function<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'Sigmoid'</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405251925941.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Sigmoid</div></center><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mnist_loss</span><span class="token punctuation">(</span>predictions<span class="token punctuation">,</span> targets<span class="token punctuation">)</span><span class="token punctuation">:</span>    predictions <span class="token operator">=</span> predictions<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> torch<span class="token punctuation">.</span>where<span class="token punctuation">(</span>targets<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span>predictions<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>损失必须是一个有意义的可导函数，不能有大的平坦部分和大的跳跃，而且必须相当平滑。会对置信水平的微小变化做出反应。</p><h2 id="SGD和Mini-Batches"><a href="#SGD和Mini-Batches" class="headerlink" title="SGD和Mini-Batches"></a>SGD和Mini-Batches</h2><p><code>小批次</code>：一次计算几个数据项的平均损失。小批次中数据项的大小称为批次大小。</p><p>为获得更好的通用性，在创建小批次之前，在每个周期中随机地对数据集进行洗牌，而不是按顺序列举。</p><p>Pytorch和fastai提供了类<code>DataLoader</code>，执行洗牌和小批次排序。</p><p>DataLoader可以获得任何的Python集合，并将其转换为多个批次的迭代器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">coll <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>coll<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token builtin">list</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token comment"># [tensor([ 3, 12,  8, 10,  2]),</span><span class="token comment"># tensor([ 9,  4,  7, 14,  5]),</span><span class="token comment"># tensor([ 1, 13,  0,  6, 11])]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还需要包含自变量和因变量（模型的输入和输出）的集合，称为<code>Dataset</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ds <span class="token operator">=</span> L<span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token comment"># (#26) [(0, 'a'),(1, 'b'),(2, 'c'),(3, 'd'),(4, 'e'),(5, 'f'),(6, 'g'),(7, 'h'),(8, 'i'),(9, 'j')...]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当将Dataset传递给DataLoader时，将得到许多批数据，这些数据本身就可以表示为自变量和因变量的张量元组。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>ds<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token builtin">list</span><span class="token punctuation">(</span>dl<span class="token punctuation">)</span><span class="token comment"># 输出如下</span><span class="token punctuation">[</span><span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将它们集成在一起"><a href="#将它们集成在一起" class="headerlink" title="将它们集成在一起"></a>将它们集成在一起</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 初始化参数</span>weights <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bias <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 从Dataset中创建DataLoader</span>dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span>xb<span class="token punctuation">,</span>yb <span class="token operator">=</span> first<span class="token punctuation">(</span>dl<span class="token punctuation">)</span>xb<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>yb<span class="token punctuation">.</span>shape<span class="token comment"># (torch.Size([256, 784]), torch.Size([256, 1]))</span>valid_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>valid_dset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token comment"># 构建大小为4的批数据作为测试</span>batch <span class="token operator">=</span> train_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>batch<span class="token punctuation">.</span>shape<span class="token comment"># torch.Size([4, 784])</span>preds <span class="token operator">=</span> linear1<span class="token punctuation">(</span>batch<span class="token punctuation">)</span>loss <span class="token operator">=</span> mnist_loss<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> train_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>weights<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>weights<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bias<span class="token punctuation">.</span>grad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="放在一个函数里"><a href="#放在一个函数里" class="headerlink" title="放在一个函数里"></a>放在一个函数里</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc_grad</span><span class="token punctuation">(</span>xb<span class="token punctuation">,</span> yb<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">:</span>    preds <span class="token operator">=</span> model<span class="token punctuation">(</span>xb<span class="token punctuation">)</span>    loss <span class="token operator">=</span> mnist_loss<span class="token punctuation">(</span>preds<span class="token punctuation">,</span> yb<span class="token punctuation">)</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并对其测试：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">calc_grad<span class="token punctuation">(</span>batch<span class="token punctuation">,</span> train_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> linear1<span class="token punctuation">)</span>weights<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bias<span class="token punctuation">.</span>grad<span class="token comment"># (tensor(-0.0098), tensor([-0.0653]))</span><span class="token comment"># 再运行一次</span><span class="token comment"># (tensor(-0.0148), tensor([-0.0979]))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>loss.backward</code>函数会对现有损失计算得到的梯度与之前已经保存过的梯度进行相加。因此要重置现有梯度为0：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">weights<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>bias<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>In-Place操作：Pytorch中下划线结尾的方法会直接对对象进行修改。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 一个周期的基本训练函数</span><span class="token keyword">def</span> <span class="token function">train_epoch</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> xb<span class="token punctuation">,</span>yb <span class="token keyword">in</span> dl<span class="token punctuation">:</span>        calc_grad<span class="token punctuation">(</span>xb<span class="token punctuation">,</span> yb<span class="token punctuation">,</span> model<span class="token punctuation">)</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> params<span class="token punctuation">:</span>            p<span class="token punctuation">.</span>data <span class="token operator">-=</span> p<span class="token punctuation">.</span>grad<span class="token operator">*</span>lr            p<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>preds<span class="token operator">&gt;</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> train_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment"># 计算验证集的识别准确率            </span><span class="token keyword">def</span> <span class="token function">batch_accuracy</span><span class="token punctuation">(</span>xb<span class="token punctuation">,</span> yb<span class="token punctuation">)</span><span class="token punctuation">:</span>    preds <span class="token operator">=</span> xb<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    correct <span class="token operator">=</span> <span class="token punctuation">(</span>preds<span class="token operator">&gt;</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">==</span> yb    <span class="token keyword">return</span> correct<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>batch_accuracy<span class="token punctuation">(</span>linear1<span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">,</span> train_y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">validate_epoch</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>    accs <span class="token operator">=</span> <span class="token punctuation">[</span>batch_accuracy<span class="token punctuation">(</span>model<span class="token punctuation">(</span>xb<span class="token punctuation">)</span><span class="token punctuation">,</span> yb<span class="token punctuation">)</span> <span class="token keyword">for</span> xb<span class="token punctuation">,</span>yb <span class="token keyword">in</span> valid_dl<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">round</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>accs<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>validate_epoch<span class="token punctuation">(</span>linear1<span class="token punctuation">)</span><span class="token comment"># 训练一周期</span>lr <span class="token operator">=</span> <span class="token number">1.</span>params <span class="token operator">=</span> weights<span class="token punctuation">,</span>biastrain_epoch<span class="token punctuation">(</span>linear1<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> params<span class="token punctuation">)</span>validate_epoch<span class="token punctuation">(</span>linear1<span class="token punctuation">)</span><span class="token comment"># 多训练几个周期</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_epoch<span class="token punctuation">(</span>linear1<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> params<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>validate_epoch<span class="token punctuation">(</span>linear1<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token comment"># 0.9477 0.957 0.9599 0.9633 0.9672 0.9682 0.9682 0.9702 0.9706 0.9716 0.9721 0.9721 0.9726 0.9731 0.9726 0.9736 0.9736 0.974 0.9745 0.9745 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建一个优化器"><a href="#创建一个优化器" class="headerlink" title="创建一个优化器"></a>创建一个优化器</h2><p><code>优化器</code>：在深度学习中，优化器是用来更新和计算模型内部参数以减少模型误差的工具。优化算法决定了如何改变模型的权重以改善其在训练数据上的表现。优化器的目标是找到模型误差函数的最小值。</p><p>PyTorch提供了许多优化器，包括SGD（随机梯度下降）、Adam、RMSProp等。每种优化器都有其特点，适用于不同的情况和需求。</p><p>Pytorch中的<code>nn.Linear</code>模块代替<code>Linear</code>函数。与<code>init_params</code>和<code>linear</code>两个函数做的事情是相同的。它在单独的一个类中同时包含了权重和偏差。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">linear_model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>w<span class="token punctuation">,</span>b <span class="token operator">=</span> linear_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 优化器</span><span class="token keyword">class</span> <span class="token class-name">BasicOptim</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>params<span class="token punctuation">,</span>lr<span class="token punctuation">)</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>params<span class="token punctuation">,</span>self<span class="token punctuation">.</span>lr <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">,</span>lr    <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> self<span class="token punctuation">.</span>params<span class="token punctuation">:</span> p<span class="token punctuation">.</span>data <span class="token operator">-=</span> p<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>data <span class="token operator">*</span> self<span class="token punctuation">.</span>lr    <span class="token keyword">def</span> <span class="token function">zero_grad</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> p <span class="token keyword">in</span> self<span class="token punctuation">.</span>params<span class="token punctuation">:</span> p<span class="token punctuation">.</span>grad <span class="token operator">=</span> <span class="token boolean">None</span>opt <span class="token operator">=</span> BasicOptim<span class="token punctuation">(</span>linear_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token punctuation">)</span><span class="token comment"># 训练循环</span><span class="token keyword">def</span> <span class="token function">train_epoch</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> xb<span class="token punctuation">,</span>yb <span class="token keyword">in</span> dl<span class="token punctuation">:</span>        calc_grad<span class="token punctuation">(</span>xb<span class="token punctuation">,</span> yb<span class="token punctuation">,</span> model<span class="token punctuation">)</span>        opt<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        opt<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        validate_epoch<span class="token punctuation">(</span>linear_model<span class="token punctuation">)</span> <span class="token comment"># 验证函数</span><span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        train_epoch<span class="token punctuation">(</span>model<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>validate_epoch<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        train_model<span class="token punctuation">(</span>linear_model<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># 0.4932 0.5356 0.665 0.874 0.9189 0.937 0.9512 0.9575 0.9638 0.9663 0.9673 0.9702 0.9717 0.9736 0.9751 0.9761 0.9765 0.9775 0.978 0.978 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fastai</code>提供的默认的SGD优化器类可以做到和我们的BasicOptim相同的事情。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">linear_model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>opt <span class="token operator">=</span> SGD<span class="token punctuation">(</span>linear_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token punctuation">)</span>train_model<span class="token punctuation">(</span>linear_model<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以用fastai提供的<code>Learner.fit</code>来代替<code>train_model</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls <span class="token operator">=</span> DataLoaders<span class="token punctuation">(</span>dl<span class="token punctuation">,</span> valid_dl<span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> opt_func<span class="token operator">=</span>SGD<span class="token punctuation">,</span>                loss_func<span class="token operator">=</span>mnist_loss<span class="token punctuation">,</span> metrics<span class="token operator">=</span>batch_accuracy<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405252047726.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练结果</div></center><h2 id="增加一个非线性特征"><a href="#增加一个非线性特征" class="headerlink" title="增加一个非线性特征"></a>增加一个非线性特征</h2><p>在线性分类器上进行了函数参数的优化，下面在两个线性分类器之间添加一些非线性的东西，成为神经网络。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">simple_net</span><span class="token punctuation">(</span>xb<span class="token punctuation">)</span><span class="token punctuation">:</span>     res <span class="token operator">=</span> xb@w1 <span class="token operator">+</span> b1 <span class="token comment"># @操作符，矩阵乘</span>    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>tensor<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> res@w2 <span class="token operator">+</span> b2    <span class="token keyword">return</span> res<span class="token comment"># 初始化参数</span>w1 <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#w1的激活值输出30，w2的激活值输入30，要匹配</span>b1 <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>w2 <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b2 <span class="token operator">=</span> init_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>res.max(tensor(0.0))</code>被称为<strong>线性修正单元</strong>，也成<code>ReLU</code>，把所有的负数替换成0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_function<span class="token punctuation">(</span>F<span class="token punctuation">.</span>relu<span class="token punctuation">)</span> <span class="token comment">#PyTorch中这样用 </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405252100126.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">ReLU</div></center><p>线性层堆叠相当于一个线性层，在其中加上非线性层才有意义。</p><blockquote><p>数学上，两个线性函数的组合是另一个线性函数</p><p>如果能找到w1和w2的正确参数并且把这些矩阵做的足够大，那么这个小函数就可以在数学上证明它可以以任意高的准确率解决任何可计算的问题。对于任意的wiggly(波动)函数，可以把它近似为一组连接在一起的直线；为了使它更接近wiggly函数，只需要使用更短的线就好了，这就是近似逼近定理。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">simple_net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>learn <span class="token operator">=</span> Learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> simple_net<span class="token punctuation">,</span> opt_func<span class="token operator">=</span>SGD<span class="token punctuation">,</span>                loss_func<span class="token operator">=</span>mnist_loss<span class="token punctuation">,</span> metrics<span class="token operator">=</span>batch_accuracy<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405252115324.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练结果</div></center><p>训练过程记录在<code>learn.recorder</code>，输出的表格存储在<code>values</code>属性中。</p><p>绘制训练的准确率：</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405252118405.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">训练准确率</div></center><p><code>learn.recorder</code>不是存储在本地文件系统中的一个文件，而是FastAI<code>Learner</code>对象的一个属性。它在内存中保存了训练过程中的一些信息，如每个epoch的损失和度量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> cnn_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet34<span class="token punctuation">,</span> metrics<span class="token operator">=</span>accuracy<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token comment"># 打印每个epoch的损失和度量</span><span class="token keyword">for</span> epoch<span class="token punctuation">,</span> values <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>learn<span class="token punctuation">.</span>recorder<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Epoch </span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>values<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment"># 把learn.recorder的内容保存到本地，可以使用Python的标准库pickle</span><span class="token keyword">import</span> pickle<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'recorder.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>learn<span class="token punctuation">.</span>recorder<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Going-Deeper"><a href="#Going-Deeper" class="headerlink" title="Going Deeper"></a>Going Deeper</h2><p>事实证明，使用更小的矩阵和更多的层，得到的结果比使用更大的矩阵和少量神经层的结果要好，所以要使用更深层的模型。</p><h1 id="术语回顾"><a href="#术语回顾" class="headerlink" title="术语回顾"></a>术语回顾</h1><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405252133892.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">术语回顾</div></center><blockquote><p><a href="https://nbviewer.org/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb">https://nbviewer.org/github/fastai/fastbook/blob/master/04_mnist_basics.ipynb</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> fastiai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从模型到输出</title>
      <link href="/2024/01/28/production/"/>
      <url>/2024/01/28/production/</url>
      
        <content type="html"><![CDATA[<h1 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h1><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'AZURE_SEARCH_KEY'</span><span class="token punctuation">,</span> <span class="token string">'XXX'</span><span class="token punctuation">)</span><span class="token comment"># https://www.microsoft.com/en-us/bing/apis/bing-image-search-api</span>results <span class="token operator">=</span> search_images_bing<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'grizzly bear'</span><span class="token punctuation">)</span>ims <span class="token operator">=</span> results<span class="token punctuation">.</span>attrgot<span class="token punctuation">(</span><span class="token string">'contentUrl'</span><span class="token punctuation">)</span>bear_types <span class="token operator">=</span> <span class="token string">'grizzly'</span><span class="token punctuation">,</span><span class="token string">'black'</span><span class="token punctuation">,</span><span class="token string">'teddy'</span>path <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string">'bears'</span><span class="token punctuation">)</span>fns <span class="token operator">=</span> get_image_files<span class="token punctuation">(</span>path<span class="token punctuation">)</span>failed <span class="token operator">=</span> verify_images<span class="token punctuation">(</span>fns<span class="token punctuation">)</span> <span class="token comment"># 检查文件是否已损坏</span>failed<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>Path<span class="token punctuation">.</span>unlink<span class="token punctuation">)</span> <span class="token comment"># 删除失败的图像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fastai：文档帮助</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">??function_name?function_namedoc<span class="token punctuation">(</span>function_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="从数据到数据加载器"><a href="#从数据到数据加载器" class="headerlink" title="从数据到数据加载器"></a>从数据到数据加载器</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DataLoaders</span><span class="token punctuation">(</span>GetAttr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>loaders<span class="token punctuation">)</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>loaders <span class="token operator">=</span> loaders    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> self<span class="token punctuation">.</span>loaders<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    train<span class="token punctuation">,</span>valid <span class="token operator">=</span> add_props<span class="token punctuation">(</span><span class="token keyword">lambda</span> i<span class="token punctuation">,</span>self<span class="token punctuation">:</span> self<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DataLoaders是一个fastai类，用于储存传递给它的多个DataLoader对象，通常用它定义处理训练集的train和处理验证集的valid。</p><p>将下载的数据转换为DataLoaders对象，fastai中有已经预定义的方法，当对特定任务不适用时，<code>数据块API</code>，可以完全自定义适合的DataLoaders。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bears <span class="token operator">=</span> DataBlock<span class="token punctuation">(</span> <span class="token comment"># 提供了一个DataBlock对象，类似于创建了DataLoaders的模板</span>    blocks<span class="token operator">=</span><span class="token punctuation">(</span>ImageBlock<span class="token punctuation">,</span> CategoryBlock<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 指定自变量（数据）和因变量的类型（预测目标）</span>    get_items<span class="token operator">=</span>get_image_files<span class="token punctuation">,</span> <span class="token comment"># 接受一个路径，返回该路径下所有图像的列表</span>    splitter<span class="token operator">=</span>RandomSplitter<span class="token punctuation">(</span>valid_pct<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># </span>    get_y<span class="token operator">=</span>parent_label<span class="token punctuation">,</span> <span class="token comment"># 获取文件所在文件夹的名称，通常以文件夹名称为标签</span>    item_tfms<span class="token operator">=</span>Resize<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 数据转换，张量尺寸要一样</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>随机种子</code>，每次都将获得完全相同的列表，每次运行，训练集和验证集都以相同的方式拆分。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">dls <span class="token operator">=</span> bears<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token comment"># 告诉fastai数据的实际来源</span>dls<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span>max_n<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#show_batch方法查看其中的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p>默认情况下使用全宽或全高裁剪图像，但可能丢失细节，也可以用零（黑色）来填充图像，或者挤压/拉伸图像。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bears <span class="token operator">=</span> bears<span class="token punctuation">.</span>new<span class="token punctuation">(</span>item_tfms<span class="token operator">=</span>Resize<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> ResizeMethod<span class="token punctuation">.</span>Squish<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Squish</span><span class="token comment"># bears = bears.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode='zeros')) #黑色填充</span>dls <span class="token operator">=</span> bears<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">)</span>dls<span class="token punctuation">.</span>valid<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span>max_n<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 1行，四个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>挤压或拉伸会改变原图像的形状，裁剪会删除一些特征，填充会有大量空白空间，有效分辨率低。</p><p>通常实践中，先随机选取图像中的某一部分，然后直接将选择的这部分图像裁剪出来作为新的图像进行后续处理。在每个周期（完整的数据集中的所有图像进行处理的过程）中，随机选择每张图像的不同部分。这意味着模型可以学习关注并识别图像中的不同特征，它还反映了图像在现实世界中的工作方式：同一事物的不同照片可能以略微不同的方式被框起来。</p><h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><p><strong>数据增强</strong>是指创建输入数据的随机变体，以使他们看起来有所不同，但不会改变数据的含义。</p><p>图像的常见数据增强技术有：旋转、翻转、透视变形、亮度变化和对比度变化。</p><p>一个完全未经训练的神经网络对图像的各类特征一无所知，甚至不知道旋转1度之后仍是一个物体。</p><p>用<code>RandomResizedCrop</code>替换<code>Resize</code>，<code>min_scale</code>决定了每次至少选择多少张图像，<code>unique=True</code>生成了同一张图像的不同版本。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bears <span class="token operator">=</span> bears<span class="token punctuation">.</span>new<span class="token punctuation">(</span>item_tfms<span class="token operator">=</span>RandomResizedCrop<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> min_scale<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dls <span class="token operator">=</span> bears<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">)</span>dls<span class="token punctuation">.</span>train<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span>max_n<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>aug_transforms</code>函数提供了一组标准数据增强方法。由于图像现在具有相同的大小，因此可以使用GPU将这些数据增强方法应用于整批图像，以节省时间。为了告诉fastai在batch上使用这些转换，使用<code>batch_tfms</code>参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bears <span class="token operator">=</span> bears<span class="token punctuation">.</span>new<span class="token punctuation">(</span>item_tfms<span class="token operator">=</span>Resize<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_tfms<span class="token operator">=</span>aug_transforms<span class="token punctuation">(</span>mult<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#两倍的扩充量</span>dls <span class="token operator">=</span> bears<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">)</span>dls<span class="token punctuation">.</span>train<span class="token punctuation">.</span>show_batch<span class="token punctuation">(</span>max_n<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> nrows<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="训练模型，并使用模型进行数据清洗"><a href="#训练模型，并使用模型进行数据清洗" class="headerlink" title="训练模型，并使用模型进行数据清洗"></a>训练模型，并使用模型进行数据清洗</h1><h3 id="训练分类器"><a href="#训练分类器" class="headerlink" title="训练分类器"></a>训练分类器</h3><p>熊分类器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">bears <span class="token operator">=</span> bears<span class="token punctuation">.</span>new<span class="token punctuation">(</span>    item_tfms<span class="token operator">=</span>RandomResizedCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> min_scale<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    batch_tfms<span class="token operator">=</span>aug_transforms<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dls <span class="token operator">=</span> bears<span class="token punctuation">.</span>dataloaders<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建Learner，并微调</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn <span class="token operator">=</span> vision_learner<span class="token punctuation">(</span>dls<span class="token punctuation">,</span> resnet18<span class="token punctuation">,</span> metrics<span class="token operator">=</span>error_rate<span class="token punctuation">)</span>learn<span class="token punctuation">.</span>fine_tune<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="可视化模型的错误-混淆矩阵"><a href="#可视化模型的错误-混淆矩阵" class="headerlink" title="可视化模型的错误-混淆矩阵"></a>可视化模型的错误-混淆矩阵</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">interp <span class="token operator">=</span> ClassificationInterpretation<span class="token punctuation">.</span>from_learner<span class="token punctuation">(</span>learn<span class="token punctuation">)</span>interp<span class="token punctuation">.</span>plot_confusion_matrix<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405281530182.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">混淆矩阵</div></center><p>行代表数据集中的所有类别，包括黑熊、灰熊、泰迪熊，列代表模型预测为黑熊、灰熊、泰迪熊的图像。因此混淆矩阵的对角线显示正确分类的图像，非对角线单元代表分类错误的图像。（验证集计算得出的）</p><p><strong>混淆矩阵能很好地帮助我们查看模型究竟是在哪里产生错误的预测的，是数据集的问题（例如错误的数据’根本不是熊的图像’或标注不正确的数据）还是模型的问题（也许图像处理的方式造成了异常的亮度或是很奇怪的角度）。</strong>为此可以按照损失对其进行排序。</p><p>如果模型输出的结果不正确（尤其是如果模型对自己的错误答案有信心），或者模型输出的结果是正确的，但模型对正确答案不是很确信，则相应的<strong>损失</strong>就会更高。</p><p><code>plot_top_losses</code>显示数据集中损失最大的图像，每张图像都标有4样东西：预测结果、实际结果、损失、概率。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">interp<span class="token punctuation">.</span>plot_top_losses<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405281544485.png" width="600">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">数据集中损失最大的图像</div></center><p>先训练一个快速而简单的模型，然后再使用它来帮助数据清洗。</p><p>fastai包含一个便于使用的用于数据清洗的GUI，称为<code>ImageClassifierCleaner</code>，允许选择好特定的类别，以及训练集与验证集，并按顺序查看损失最大的图像，并且还含有选择图像进行删除或重新标记的菜单栏。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cleaner <span class="token operator">=</span> ImageClassifierCleaner<span class="token punctuation">(</span>learn<span class="token punctuation">)</span><span class="token comment"># for idx in cleaner.delete(): cleaner.fns[idx].unlink()</span><span class="token comment"># for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意: 不需要大数据: 在使用这些步骤清洗数据集后，通常会看到这个任务100% 的准确率。当我们下载的图像比我们在这里使用的每个类150张图片少得多时，我们甚至可以预见该结果。如你所见，通常大家都认为需要大量的数据才能进行深度学习，但这个例子证明，这种说法与现实情况可能相去甚远。</p></blockquote><h1 id="将模型转换为在线应用程序"><a href="#将模型转换为在线应用程序" class="headerlink" title="将模型转换为在线应用程序"></a>将模型转换为在线应用程序</h1><h2 id="使用模型进行推理"><a href="#使用模型进行推理" class="headerlink" title="使用模型进行推理"></a>使用模型进行推理</h2><p>训练完模型并对结果满意之后就可以进行部署模型。要模型部署到生产环境中，需要保存<strong>模型的架构</strong>和<strong>训练参数</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn<span class="token punctuation">.</span>export<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 导出名为export.pkl文件</span>path <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token punctuation">)</span>path<span class="token punctuation">.</span>ls<span class="token punctuation">(</span>file_exts<span class="token operator">=</span><span class="token string">'.pkl'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当使用模型来获取预测结果时，称为推理（<em>inference</em>）。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">learn_inf <span class="token operator">=</span> load_learner<span class="token punctuation">(</span>path<span class="token operator">/</span><span class="token string">'export.pkl'</span><span class="token punctuation">)</span>learn_inf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token string">'images/grizzly.jpg'</span><span class="token punctuation">)</span><span class="token comment"># ('grizzly', tensor(1), tensor([9.0767e-06, 9.9999e-01, 1.5748e-07]))</span>learn_inf<span class="token punctuation">.</span>dls<span class="token punctuation">.</span>vocab <span class="token comment"># vocab是一个存储了所有可能类别的列表</span><span class="token comment"># (#3) ['black','grizzly','teddy']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从模型创建notebook应用"><a href="#从模型创建notebook应用" class="headerlink" title="从模型创建notebook应用"></a>从模型创建notebook应用</h2><p>Jupyter notebook创建一个完整的、可工作的Web应用程序。安装以下两个插件：</p><ul><li>IPython widgets (ipywidgets)</li><li>Voilà</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">btn_upload <span class="token operator">=</span> widgets<span class="token punctuation">.</span>FileUpload<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">on_click_classify</span><span class="token punctuation">(</span>change<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> PILImage<span class="token punctuation">.</span>create<span class="token punctuation">(</span>btn_upload<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    out_pl<span class="token punctuation">.</span>clear_output<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> out_pl<span class="token punctuation">:</span> display<span class="token punctuation">(</span>img<span class="token punctuation">.</span>to_thumb<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pred<span class="token punctuation">,</span>pred_idx<span class="token punctuation">,</span>probs <span class="token operator">=</span> learn_inf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>img<span class="token punctuation">)</span>    lbl_pred<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'Prediction: </span><span class="token interpolation"><span class="token punctuation">{</span>pred<span class="token punctuation">}</span></span><span class="token string">; Probability: </span><span class="token interpolation"><span class="token punctuation">{</span>probs<span class="token punctuation">[</span>pred_idx<span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token format-spec">.04f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span>btn_run<span class="token punctuation">.</span>on_click<span class="token punctuation">(</span>on_click_classify<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202405281611141.png" width="300">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">GUI</div></center><h2 id="让notebook成为一个真正的应用程序"><a href="#让notebook成为一个真正的应用程序" class="headerlink" title="让notebook成为一个真正的应用程序"></a>让notebook成为一个真正的应用程序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#hide</span><span class="token comment"># !pip install voila # 安装</span><span class="token comment"># !jupyter serverextension enable --sys-prefix voila # 将voila连接到现有的Jupyter notebook</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将浏览器URL中的“notebook”替换为“volia/render”。</p><blockquote><p> <a href="https://nbviewer.org/github/fastai/fastbook/blob/master/02_production.ipynb">https://nbviewer.org/github/fastai/fastbook/blob/master/02_production.ipynb</a></p></blockquote><h1 id="数据伦理"><a href="#数据伦理" class="headerlink" title="数据伦理"></a>数据伦理</h1><p>追索权和问责制</p><p>反馈回路</p><p>偏见</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> fastai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络与深度学习（二）</title>
      <link href="/2024/01/22/dl2/"/>
      <url>/2024/01/22/dl2/</url>
      
        <content type="html"><![CDATA[<hr><p>机器学习是对能通过经验自动改进的计算机算法的研究。</p><p>———— 汤姆·米切尔（Tom Mitchell）</p><hr><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p>机器学习（Machine Learning，ML）就是让计算机从数据中进行自动学习，得到某种知识（或规律）。</p><p>机器学习问题在早期的工程领域也经常称为模式识别（Pattern Recognition，PR），但模式识别更偏向于具体的应用任务，比如光学字符识别、语音识别、人脸识别等。这些任务的特点是，对于我们人类而言，这些任务很容易完成，但我们不知道自己是如何做到的，因此也很难人工设计一个计算机程序来解决这些任务。一个可行的方法是设计一个算法可以让计算机自己从有标注的样本上学习其中的规律，并用来完成各种识别任务。</p><p>对一个预测任务，输入特征向量为${x}$，输 出标签为${y}$，我们选择一个函数集合$\mathcal{F}$，通过学习算法$\mathcal{A}$和一组训练样本${\mathcal{D}}$，从$\mathcal{F}$中学习到函数$f^{<em>}(x)$。这样对新的输入${x}$，就可以用函数$f^{</em>}(x)$进行预测。</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202401231116490.png" alt="机器学习系统示例" style="zoom:67%;"><h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>机器学习的目标是找到一个模型来近似真实映射函数$g(x)$或真实条件概率分布$p_r(y|\pmb{x})$。</p><p>由于我们不知道真实的映射函数$g(x)$或条件概率分布$p_r(y|\pmb{x})$的具体形式，因而只能根据经验来假设一个函数集合$\mathcal{F}$,称为假设空间(Hypothesis Space), 然后通过观测其在训练集$\mathcal{D}$上的特性，从中选择一个理想的假设(Hypothesis) $f^*\in\mathcal{F}$。</p><p>假设空间$\mathcal{F}$通常为一个参数化的函数族<br>$$<br>\mathcal{F}={f(\boldsymbol{x};\theta)|\theta\in\mathbb{R}^d},<br>$$<br>其中$f(x;\theta)$是参数为$\theta$的函数，也称为模型(Model),$d$为参数的数量。<br>常见的假设空间可以分为线性和非线性两种，对应的模型$f$也分别称为线性模型和非线性模型。</p><ol><li><p><strong>线性模型</strong></p><p>线性模型的假设空间为一个参数化的线性函数族，即</p></li></ol><p>$$<br>f(\boldsymbol{x};\theta)=\boldsymbol{w}^\mathrm{T}\boldsymbol{x}+b,<br>$$<br>其中参数$\theta$包含了权重向量$w$和偏置$b$。</p><ol start="2"><li><p><strong>非线性模型</strong></p><p>广义的非线性模型可以写为多个非线性基函数$\phi(x)$的线性组合</p><p>$$<br>f(\boldsymbol{x};\theta)=\boldsymbol{w}^\mathrm{T}\boldsymbol{\phi}(\boldsymbol{x})+b,<br>$$<br>其中$\phi(x)=[\phi_1(x),\phi_2(x),\cdots,\phi_K(x)]^{\mathrm{T}}$为$K$个非线性基函数组成的向量，参数$\theta$包含了权重向量$w$和偏置$b$。</p><p>如果$\phi(x)$本身为可学习的基函数，比如<br>$$<br>\phi_k(\boldsymbol{x})=h(\boldsymbol{w}_k^\mathrm{T}\boldsymbol{\phi}^{\prime}(\boldsymbol{x})+b_k),\forall1\leq k\leq K,<br>$$</p><p>其中$h(\cdot)$为非线性函数，$\phi^{\prime}(x)$为另一组基函数，$w_k$和$b_k$为可学习的参数，则$f(x;\theta)$ 就等价于神经网络模型。</p></li></ol><h3 id="学习准则"><a href="#学习准则" class="headerlink" title="学习准则"></a>学习准则</h3><p>一个好的模型$f(x,\theta^*)$应该在所有$(\pmb{x},y)$的可能取值上都与真实映射函数$y=g(x)$一致，即<br>$$<br>\begin{aligned}|f(\boldsymbol{x},\theta^*)-y|&lt;\epsilon,\quad\forall(\boldsymbol{x},y)\in\mathcal{X}\times\mathcal{Y},\end{aligned}<br>$$</p><p>或与真实条件概率分布$p_r(y|x)$一致，即</p><p>$$<br>\begin{aligned}|f_y(\boldsymbol{x},\theta^*)-p_r(y|\boldsymbol{x})|&lt;\epsilon,\quad\forall(\boldsymbol{x},y)\in\mathcal{X}\times\mathcal{Y},\end{aligned}<br>$$<br>其中$\epsilon$是一个很小的正数，$f_y(x,\theta^*)$为模型预测的条件概率分布中$y$对应的概率。<br>模型$f(\pmb{x};\theta)$的好坏可以通过期望风险(Expected Risk)$\mathcal{R}(\theta)$来衡量，其定义为<br>$$<br>\mathcal{R}(\theta)=\mathbb{E}_{(\boldsymbol{x},y)\sim p_r(\boldsymbol{x},y)}[\mathcal{L}\big(y,f(\boldsymbol{x};\theta)\big)],<br>$$</p><p>其中$p_r(\pmb{x},y)$为真实的数据分布，$\mathcal{L}(y,f(x;\theta))$为损失函数，用来量化两个变量之间的差异。</p><ol><li><p><strong>损失函数</strong></p><p>损失函数是一个非负实数函数，用来量化模型预测和真实标签之间的差异。</p><p><strong>0-1损失函数</strong> 最直观的损失函数是模型在训练集上的错误率，即0-1损失函数（0-1 Loss Function）：</p><p>$\begin{aligned}<br>\mathcal{L}(y,f(\boldsymbol{x};\theta))&amp; =\begin{cases}&amp;0&amp;\mathrm{<del>if</del>}y=f(\boldsymbol{x};\theta)\\&amp;1&amp;\mathrm{<del>if</del>}y\neq f(\boldsymbol{x};\theta)&amp;\end{cases}  \<br>&amp;=I\big(y\neq f(\boldsymbol{x};\theta)\big), \<br>\text{其中}I(\cdot)\text{ 是指示函数。}<br>\end{aligned}$</p><p>虽然0-1损失函数能够客观地评价模型的好坏，但其缺点是数学性质不是很 好：不连续且导数为0，难以优化。因此经常用连续可微的损失函数替代。</p><p><strong>平方损失函数</strong> 平方损失函数Quadratic Loss Function）经常用在预测标签y为实数值的任务中，定义为</p><p>$\mathcal{L}\big(y,f(\boldsymbol{x};\theta)\big)=\frac{1}{2}\Big(y-f(\boldsymbol{x};\theta)\Big)^2$</p><p>平方损失函数一般不适用于分类问题。</p><p><strong>交叉熵损失函数</strong> 交叉熵损失函数（Cross-Entropy Loss Function）一般用于分类问题。</p><p>假设样本的标签$y\in{1,\cdots C}$为离散的类别，模型$f(x;\theta)\in[0,1]^C$ 的输出为类别标签的条件概率分布，即</p></li></ol><p>$$<br>   \begin{aligned}p(y=c|\boldsymbol{x};\theta)=f_{c}(\boldsymbol{x};\theta),\end{aligned}<br>$$</p><p>   并满足</p><p>$$<br>   f_c(\boldsymbol{x};\theta)\in[0,1],\quad\sum_{c=1}^Cf_c(\boldsymbol{x};\theta)=1<br>$$</p><p>​假设样本的类别为k，那么它属于第k类的概率为1，其它类的概率为0。对于两个概率分布，一般可以用交叉熵来衡量它们的差异。标签的真实分布$y$和模型预测分布$f(x;\theta)$之间的交叉熵为<br>$$<br>\mathcal{L}(\boldsymbol{y},f(\boldsymbol{x};\theta))=-\sum_{c=1}^Cy_c\log f_c(\boldsymbol{x};\theta).<br>$$<br>​因为$y$为one-hot向量，上面公式也可以写为</p><p>$$<br>\mathcal{L}\big(y,f(\boldsymbol{x};\theta)\big)=-\log f_{y}(x;\theta),<br>$$</p><p>​其中$f_y(x;\theta)$可以看作真实类别$y$的似然函数。因此，交叉熵损失函数也就是负对数似然损失函数(Negative Log-Likelihood Function)。</p><p>​<strong>Hinge损失函数</strong></p><p>​对于二分类问题，假设$y$的取值为${-1,+1},f(x;\theta)\in\mathbb{R}$。$Hingc$ 损失函数(Hinge Loss Function)为</p><p>$$<br>\begin{aligned}<br>\mathcal{L}(y,f(\boldsymbol{x};\theta))&amp; =\max\left(0,1-yf(\boldsymbol{x};\theta)\right)  \<br>&amp;\triangleq[1-yf(\boldsymbol{x};\theta)]_{+},<br>\end{aligned}<br>$$</p><p>​其中$[x]_+=\operatorname*{max}(0,x)$。</p><ol start="2"><li><p><strong>风险最小化准则</strong></p><p>一个好的模型 $f(x;\theta)$ 应当有一个比较小的期望错误，但由于不知道真实的数据分布和映射函数，实际上无法计算其期望风险 $\mathcal{R}(\theta)$。给定一个训练集$\mathcal{D}={(x^{(n)},y^{(n)})}_{n=1}^N$,我们可以计算的是经验风险(Empirical Risk),即在训练集上的平均损失：</p><p>$$<br>\mathcal{R}<em>{\mathcal{D}}^{emp}(\theta)=\frac1N\sum</em>{n=1}^N\mathcal{L}(y^{(n)},f(x^{(n)};\theta)).<br>$$</p><p>因此，一个切实可行的学习准则是找到一组参数$\theta^*$使得经验风险最小，即</p><p>$$<br>\theta^{*}=\arg\min\mathcal{R}_{\theta}^{emp}(\theta),<br>$$</p><p>这就是经验风险最小化(Empirical Risk Minimization, ERM)准则。</p><p>验风险最小化原则很容易导致模型在训练集上错误率很 低，但是在未知数据上错误率很高。这就是所谓的<strong>过拟合（Overfitting）</strong>。</p><p><strong>过拟合</strong>：给定一个假设空间F，一个假设f属于F，如果 存在其他的假设f′也属于F,使得在训练集上f的损失比f′ 小，但在整个样本空间上f′ 比f的损失小，那么就说假设f过度拟合训练数据。</p></li><li><p><strong>优化算法</strong></p><p>参数与超参数在机器学习中，优化又可以分为参数优化和超参数优化。模型$f(x;\theta)$中的$\theta$称为模型的参数，可以通过优化算法进行学习。除了可学习的参数$\theta$之外，还有一类参数是用来定义模型结构或优化策略的，这类参数叫做超参数（Hyper-Parameter）。</p><p>常见的超参数包括：聚类算法中的类别个数、梯度下降法中的步长、正则化 项的系数、神经网络的层数、支持向量机中的核函数等。超参数的选取一般都是 组合优化问题，很难通过优化算法来自动学习。因此，超参数优化是机器学习的 一个经验性很强的技术，通常是按照人的经验设定，或者通过搜索的方法对一组<br>超参数组合进行不断试错调整。</p><p><strong>梯度下降法</strong>：</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 神经网络与深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法分析</title>
      <link href="/2023/12/22/dsandad1/"/>
      <url>/2023/12/22/dsandad1/</url>
      
        <content type="html"><![CDATA[<h2 id="大-O-记号（big-O-notation）（上界）"><a href="#大-O-记号（big-O-notation）（上界）" class="headerlink" title="大$O$记号（big-O notation）（上界）"></a>大$O$记号（big-O notation）（上界）</h2><p>$T(n) = O(f(n)) \iff \exists \ c&gt;0 ,当n &gt;&gt; 2 后，有T(n) &lt; c\cdot f(n).$</p><p>与T(n)相比，f(n)更为简洁，但依然反映前者的增长趋势。</p><p>常系数可忽略：$O(f(n))\quad=\quad O(c\times f(n))$</p><p>低次项可忽略：$O(n^{a}+n^{b})\quad=\quad O(n^{a}),\quad a&gt;b&gt;0$</p><h2 id="大-Omega-记号-（下界）"><a href="#大-Omega-记号-（下界）" class="headerlink" title="大$\Omega$记号 （下界）"></a>大$\Omega$记号 （下界）</h2><p>$ T(n)=\Omega(f(n))\iff\exists\ c&gt;0，当 n&gt;&gt;2 后，有 T(n) &gt; c\cdot f(n).$</p><h2 id="Theta-记号"><a href="#Theta-记号" class="headerlink" title="$\Theta$记号"></a>$\Theta$记号</h2><p>$\begin{aligned}&amp;\mathrm{T(n)<del>=</del>\Theta(f(n)~):}\&amp;\exists c_{1}&gt;c_{2}&gt;0\text{,当 n}&gt;&gt;2\text{ 后,有 }c_{1}\cdotp f(n)&gt;T(n)&gt;c_{2}\cdotp f(n)\end{aligned}$</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312222029342.png" alt="image-20231222202914964" style="zoom: 40%;"><h3 id="O-1"><a href="#O-1" class="headerlink" title="$O(1)$"></a>$O(1)$</h3><ul><li>常数复杂度：不含转向（循坏、调用、递归等）必顺序执行，即是$O(1)$</li></ul><h3 id="O-log-mathsf-c-text-n"><a href="#O-log-mathsf-c-text-n" class="headerlink" title="$O(\log^{\mathsf{c}}\text{n})$"></a>$O(\log^{\mathsf{c}}\text{n})$</h3><ul><li><p>对数$O(\log\text{n})$$lnn,|, lgn ,|, log_{100}n ,|, log_{2013}n$</p></li><li><p>常底数无所谓$\begin{array}{rcl}{\forall\mathrm{a},\mathrm{b}&gt;0,\mathrm{log}<em>{a}n}&amp;{=\mathrm{log}</em>{a}\mathrm{b}\cdot\mathrm{log}<em>{b}n}&amp;{=\Theta\left(\mathrm{log}</em>{b}n\right)}\\end{array}$</p></li></ul><p><strong>换底公式：$\log_ab=\frac{\log_cb}{\log_ca}.$</strong></p><ul><li><p>常数次幂无所谓$\forall c&gt;0,\mathrm{logn}^c=c\cdot\mathrm{logn}=\Theta(\mathrm{logn})$</p></li><li><p>对数多项式（ploy-log function）$123*\log^{321}n+\log^{105}(n^{2}-n+1)\quad=\Theta(\log^{321}n)$</p></li><li><p>这类算法非常有效，复杂度无限接近于常数$\forall\mathrm{<del>c</del>}&gt;0,\mathrm{<del>}\mathrm{</del>}\mathrm{<del>}\mathrm{logn</del>}=\mathrm{~}O(n^{\mathrm{c}})$</p></li></ul><h3 id="O-left-n-c-right"><a href="#O-left-n-c-right" class="headerlink" title="$O\left(n^{c}\right)$"></a>$O\left(n^{c}\right)$</h3><ul><li><p>多项式（polynomial function）</p><p>$a_{k}n^{k}+a_{k-1}n^{k-1}+\ldots+a_{1}n+a_{0}=O(n^{k}),\ a_{k}&gt;0$</p></li><li><p>线性（linear function）：所有$O(n)$类函数</p></li><li><p>从$O(n)$到$O(n^2)$：编程习题主要覆盖范围</p></li><li><p>幂：$[(n^{2013}-24n^{2009})^{1/3}+512n^{567}-1978n^{123}]^{1/11}=0(n^{61})$</p></li></ul><h3 id="O-2-n"><a href="#O-2-n" class="headerlink" title="$O(2^n)$"></a>$O(2^n)$</h3><ul><li><p>指数（exponential function）（难解）</p><p>$\forall\ c&gt;1,\ \mathrm{n}^{c}=O(2^{n})$</p></li></ul><p><strong>$e^{n}=1+n+n^{2}/2!+n^{3}/3!+n^{4}/4!+\ldots $</strong></p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312222131556.png" alt="image-20231222213154490" style="zoom: 33%;"><ul><li>从$O\left(n^{c}\right)$到$O(2^n)$，是从有效算法到无效算法的分水岭</li></ul><h3 id="2-Subset"><a href="#2-Subset" class="headerlink" title="2-Subset"></a>2-Subset</h3><p>【问题描述】：$S$包含$n$个正整数，$\Sigma S = 2m $;$S$是否有子集$T$,满足$\Sigma T = 2m ?$</p><p>【选举人制】各州议会选出的选举人团投票而不是由选民直接投票50个州加1个特区，共538票获270张选举人票，即可当选；但是若共有两位候选人，是否可能恰好各得269票?</p><p>直觉算法 : 逐一枚举S的每一子集，并统计其中元素的总和</p><p>定理：$|2^S| = 2^{|S|}=2^{n}$</p><p>亦即：直觉算法需要迭代$2^n$轮，并（在最坏情况下）至少需要花费这么多的时间——不甚理想</p><p>定理：2-Subset is NP-complete</p><p>NP-complete问题：就目前的计算模型而言，不存在可在多项式时间内回答此问题的算法。</p><h3 id="增长速度"><a href="#增长速度" class="headerlink" title="增长速度"></a>增长速度</h3><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312231020870.png" alt="image-20231223102013633" style="zoom: 33%;"><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="复杂度分析主要方法"><a href="#复杂度分析主要方法" class="headerlink" title="复杂度分析主要方法"></a>复杂度分析主要方法</h3><p>迭代：级数求和</p><p>递归：递归跟踪+递推方程</p><p>猜测+验证</p><h3 id="级数"><a href="#级数" class="headerlink" title="级数"></a>级数</h3><p><strong>算术级数</strong>：与末项平方同阶</p><p>$T(n)=1+2+\ldots+n=n(n+1)/2=O(n^{2})$</p><p><strong>幂方级数</strong>：比幂次高出一阶 $\boxed{\sum_{k=0}^{n}k^{d}{\approx}\int <em>{0}^{n}x^{d+1}dx=\frac{1}{d+1}x^{d+1}\Big|</em>{0}^{n}=\frac{1}{d+1}n^{d+1}=O(n^{d+1})}$</p><p>$T_{2}(n)<del>=</del>1^{2}+<del>2^{2}+</del>3^{2}+<del>\ldots</del>+<del>n^{2}</del>=<del>n(n+1)(2n+1)/6</del>=<del>O(n^{3})$<br>$T_{3}(n)</del>=<del>1^{3}+</del>2^{3}+<del>3^{3}+</del>\ldots+<del>n^{3}</del>=<del>n^{2}(n+1)^{2}/4</del>=~O(n^{4})$<br>$T_4(n)=1^4+2^4+3^4+\ldots+n^4=n(n+1)(2n+1)(3n^2+3n-1)/30=O(n^5)$</p><p><strong>几何级数</strong>（a&gt;1）:与末项同阶</p><p>$T_{a}(n)=a^{0}+a^{1}+\ldots+a^{n}=(a^{n+1}-1)/(a-1)\ =O(a^{n})$<br>$1+2+4+\ldots+2^{n}=2^{n+1}-1=O(2^{n+1})=O(2^{n})$</p><p><strong>收敛级数</strong>：</p><p>$\begin{aligned}<br>&amp;1/1/2+1/2/3+1/3/4+\ldots+1/(n-1)/n=1-1/n=O(1) \<br>&amp;{1}+1/2^{2}+\ldots+1/n^{2}&lt;1+1/2^{2}+\ldots=\pi^{2}/6=O(1) \<br>&amp;1/3+1/7+1/8+1/15+1/24+1/26+1/31+1/35+\ldots=1=0(1)<br>\end{aligned}$</p><p>几何分布：$(1-\lambda)\cdot[1+2\lambda+3\lambda^{2}+4\lambda^{3}+\ldots]=1/(1-\lambda)=0(1),0&lt;\lambda&lt;1$</p><p>可能未必收敛，然而长度有限</p><p>$\begin{aligned}<br>&amp;h(n)=1+1/2+1/3+\ldots+1/n=\Theta(\log n) \ 调和级数\<br>&amp;log1 + log2 + log3 + … + logn = log(n!) = O(n1ogn)\ 对数级数<br>\end{aligned}$</p><blockquote><p>Concrete Mathematics(书籍推荐)</p></blockquote><p><strong>循环与级数</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 0; i &lt; n; i++) {for(int j = 0; j &lt; n; j++)        O1Operation(i,j);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>算术级数：$\sum_{i=0}^{n-1}n=n+n+…+n=n*n=0(n^2)$</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312231949239.png" alt="image-20231223194935167" style="zoom: 67%;"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 0; i &lt; n; i++) {for(int j = 0; j &lt; i; j++)        O1Operation(i,j);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>算术级数：$\sum_{i=0}^{n-1}i=0+1+…+(n-1)=\frac{n(n-1)}2=O(n^2)$</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312231949800.png" alt="image-20231223194958733" style="zoom:40%;"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 0; i &lt; n; i++) {for(int j = 0; j &lt; i; j += 2013)        O1Operation(i,j);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>算术级数：$O(n^2)$</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312231953472.png" alt="image-20231223195327434" style="zoom: 67%;"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 0; i &lt; n; i &lt;&lt; = 1) {//i左移一位，乘以2for(int j = 0; j &lt; i; j++)        O1Operation(i,j);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>几何级数：</p><p>$1+2+4+\ldots+2^{\lfloor\log_2(n-1)\rfloor}$<br>$=\sum_{k=0}^{\left\lfloor\log_2(n-1)\right\rfloor}2^k\quad(let k=1og_{2}i)$</p><p>$=2^{\lceil{log_2n}\rceil}-1=O(n)$</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312232004317.png" alt="image-20231223200432269" style="zoom:50%;"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i = 0; i &lt; = n; i++) {for(int j = 1; j &lt; i; j+=j)        O1Operation(i,j);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>几何级数：$\sum_{k=0}^n\lceil\log_2\mathrm{i}\rceil= O(\mathrm{nlogn})$</p><h2 id="迭代与递归"><a href="#迭代与递归" class="headerlink" title="迭代与递归"></a>迭代与递归</h2><p>迭代乃人工，递归方神通</p><p>To iterate is human, to recurse, divine.</p><h3 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h3><p><strong>减而治之【Decrease-and-conquer】</strong></p><ul><li><p>为求解一个大规模的问题，可以将其划分为两个子问题：其一平凡，另一个<strong>规模缩减</strong>//单调性</p></li><li><p>分别求解子问题，由子问题的解，得到原问题的解</p></li></ul><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312241001996.png" alt="image-20231224100144841"></p><p><strong>递归算法分析</strong>：</p><ul><li><p>递归跟踪（recursion trace）分析</p></li><li><p><strong>数组求和（线性递归）</strong></p><ul><li>检查每个递归实例</li><li>累计所需时间（调用语句本身，计入对应的子实例）</li><li>其总和即算法执行时间</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sum(int A[], int n) {return (n &lt; 1) ? 0 : sum(A, n-1) + A[n-1];}//线性递归<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312241013514.png" alt="image-20231224101336407" style="zoom: 33%;"><ul><li><ul><li>本例中，单个递归实例自身只需$O(1)$时间</li><li>$T(n)=O(1)*(n+1)=O(n)$</li></ul></li><li><p>递推角度，为求解sum(A, n)，需</p><ul><li>递归求解规模为n-1的问题sum(A, n-1) // $T(n-1)$</li><li>再累加上A[n-1] // $O(1)$</li><li>递归基：sum(A, 0) // $O(1)$</li></ul></li><li><p>递归方程：$T(n)=T(n-1)+O(1)$ // recurrence</p></li><li><p>$T(0) = O(1)$ // base</p></li><li><p>$\begin{array}{rcl}{\mathrm{T(n)<del>-</del>n<del>=}}&amp;{\mathrm{T(n-1)</del>-<del>(n-1)}}&amp;{=}&amp;{\ldots}\{=}&amp;{\mathrm{T(2)</del>-<del>2}}\{=}&amp;{\mathrm{T(1)</del>-<del>1}}\{=}&amp;{\mathrm{T(0)}}\{\mathrm{T(n)</del>=<del>O(1)</del>+<del>n</del>=~O(n)}}\\end{array}$</p></li><li><p><strong>数组倒置</strong></p><ul><li><p>任给一数组A[0, n]，将其前后颠倒</p></li><li><p>统一接口：void reverse(int* A, int lo, int hi);</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//递归版if(lo &lt; hi) { //问题规模的奇偶性不变，需要两个递归基swap(A[lo], A[hi]);reverse(A, lo+1, hi - 1);}else return; //base case//迭代精简版while(lo &lt; hi)    swap(A[lo++], A[hi--]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>分而治之【Divide-and-conquer】</strong></p><ul><li><p>为求解一个大规模问题，可以</p></li><li><p>将其划分为若干（通常两个）子问题，规模大体相当</p></li><li><p>分别求解子问题</p></li><li><p>由子问题的解，得到原问题的解</p></li></ul><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312241100332.png" alt="image-20231224110024199"></p><ul><li><strong>数组求和（二分递归）</strong></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">sum(int A[], int lo, int hi) { //区间范围A[lo, hi]if(lo == hi) return A[lo];    int mi = (lo + hi) &gt; 1; //右移（/2）    return sum(A, lo, mi) + sum(A, mi+1, hi);} //入口形式为sum(A, 0, n-1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$T(n) = 各层递归实例所需时间之和$</p><p>$\begin{array}{rcl}=&amp;O(1)\times(2^0+2^1+2^2+\ldots+2^{\log n})\=&amp;O(1)\times(2^{\log n+1}-1)=O(n)\end{array}$</p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312241117108.png" alt="image-20231224111705972"></p><p>每层总数构成以2为倍数的几何级数：与末项同阶</p><ul><li><p>递推角度，为求解sum(A, lo, hi)，需</p><ul><li>递归求解sum(A, lo, mi)和sum(A, mi+1, hi) // 2*T(n/2)</li><li>进而将子问题的解累加 //O(1)</li><li>递归基：sum(A, lo, lo) //O(1)</li></ul></li><li><p>递推关系：</p><ul><li>$\mathrm{T(n)<del>=</del>2^*T(n/2)<del>+</del>0(1)}$</li><li>$T(1)=O(1)$</li></ul></li><li><p>求解：</p><p>$\begin{array}{rcl}\mathrm{T(n)}{=}&amp;2^<em>\mathrm{T(n/2)}+c_1\\mathrm{T(n)}+c_1{=}&amp;2^</em>(\mathrm{T(n/2)}+c_1){=}&amp;2^{2*}(\mathrm{T(n/4)}+c_1)\&amp;{=}&amp;\ldots\{=}&amp;2^{\log n}(\mathrm{T(1)}+c_1){=}&amp;n^*(\mathrm{c_2}+c_1)\\mathrm{T(n)}{=}&amp;(\mathrm{c_1}+c_2)\mathrm{n}-c_1{=}&amp;O(\mathrm{n})\end{array}$</p></li></ul><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p><strong>fib():迭代</strong>：</p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312241734047.png" alt="image-20231224173412379"></p><p>解决方法A（记忆：memoization n.记忆化；备忘；记忆表）</p><p>将已计算过实例的结果制表备查</p><p>解决方法B（动态规划：dynamic programming）</p><p>颠倒计算方向：由自顶而下递归，改为自底而上迭代</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312241738309.png" alt="image-20231224173804982" style="zoom:30%;"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">f = 0; g = 1;//fib(0),fib(1)while(0 &lt; n--) {    g = g + f;    f = g - f;}return g;//O(n)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最长公共子序列LCS</strong>：递归</p><p>子序列(Subsequence)：由序列中若干字符，按原相对次序构成</p><p>最长公共子序列(Longest Common Subsequence):两个序列公共子序列中的最长者</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312241752088.png" alt="image-20231224175213969" style="zoom:40%;"><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312241752008.png" alt="image-20231224175251962" style="zoom:80%;"><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
            <tag> cpp </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络与深度学习（一）</title>
      <link href="/2023/12/21/dl1/"/>
      <url>/2023/12/21/dl1/</url>
      
        <content type="html"><![CDATA[<hr><p>一个人在不接触对方的情况下，通过一种特殊的方式，和对方进行一系列的问答。如果在相当长时间内，他无法根据这些问题判断对方是人还是计算机，那么就可以认为这个计算机是智能的。————阿兰·图灵（Alan Turing） 图灵测试</p><hr><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>深度学习采用的模型一般比较复杂，指<strong>样本的原始输入到输出目标之间的数据流经过多个线性或非线性的组件（components）</strong>。因为每个组件都会对信息进行加工，并进而影响后续的组件。当我们最后得到输出结果时，我们并不清楚其中每个组件的贡献是多少。这个问题叫做<strong>贡献度分配问题（Credit Assignment Problem，CAP）</strong>。在深度学习中，贡献度分配问题是一个很关键的问题，这关系到如何学习每个组件中的参数。贡献度分配问题也经常翻译为信用分配问题或功劳分配问题。</p><p>如果我们把神经网络看作是由一组参数控制的复杂函数，并用来处理一些模式识别任务（比如语音识别、人脸识别等）时，神经网络的参数可以通过机器学习的方式来从数据中学习。由于神经网络模型一般比较复杂，从输入到输出的信息传递路径一般比较长，所以<strong>复杂神经网络</strong>的学习可以看成是一种深度的机器学习，即<strong>深度学习</strong>。</p><p>要使得计算机能通过图灵测试，计算机必须具备理解语言、学习、记忆、推理、决策等能力。这样，人工智能就延伸出了很多不同的子学科，比如机器感知（计算机视觉、语音信息处理），学习（模式识别、机器学习、强化学习），语言（自然语言处理）、记忆（知识表示）、决策（规划、数据挖掘）等。所有这些研究领域都可以看成是人工智能的研究范畴。</p><p><strong>1956年的达特茅斯（Dartmouth）会议</strong>。在这次会议上，“人工智能”被提出并作为本研究领域的名称。同时，人工智能研究的使命也得以确定。John McCarthy提出了人工智能的定义：<strong>人工智能就是要让机器的行为看起来就像是人所表现出的智能行为一样。</strong></p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202401211823656.png" alt="人工智能发展史" style="zoom:67%;"><p>目前，人工智能的主要领域大体上可以分为以下几个方面：</p><p><strong>感知</strong>即模拟人的感知能力，对外部刺激信息（视觉和语音等）进行感知和加工。主要研究领域包括语音信息处理和计算机视觉等。<br><strong>学习</strong>即模拟人的学习能力，主要研究如何从样例或与环境交互中进行学习。主要研究领域包括监督学习、无监督学习和强化学习等。<br><strong>认知</strong>即模拟人的认知能力，主要研究领域包括知识表示、自然语言理解、推理、规划、决策等。</p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p><strong>机器学习</strong>（Machine Learning，ML）是指从有限的观测数据中学习（或“猜测”）出具有一般性的规律，并利用这些规律对未知数据进行预测的方法。</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202312212045746.png" alt="传统机器学习的数据处理流程" style="zoom: 60%;"><p>开发一个机器学习系统的主要工作量都消耗在了预处理、<strong>特征提取</strong>以及特征转换上。</p><h2 id="表示学习"><a href="#表示学习" class="headerlink" title="表示学习"></a>表示学习</h2><p>为了提高机器学习系统的准确率，我们就需要将输入信息转换为有效的特征，或者更一般性称为表示（Representation）。如果有一种算法可以自动地学习出有效的特征，并提高最终机器学习模型的性能，那么这种学习就是可以叫做<strong>表示学习（Representation Learning）</strong>。</p><p><strong>语义鸿沟</strong>：表示学习的关键是解决语义鸿沟（Semantic Gap）问题。语义鸿沟问题是指<strong>输入数据的底层特征和高层语义信息之间的不一致性和差异性</strong>。比如给定一些关于“车”的图片，由于图片中每辆车的颜色和形状等属性都不尽相同，不同图片在像素级别上的表示（即底层特征）差异性也会非常大。但是我们人理解这些图片是建立在比较抽象的高层语义概念上的。如果一个预测模型直接建立在底层特征之上，会导致对预测模型的能力要求过高。如果可以有一个好的表示在某种程度上可以反映出数据的高层语义特征，那么我们就可以相对容易地构建后续的机器学习模型。在表示学习中，有两个<strong>核心问题</strong>：一是“什么是一个好的表示？”；二是“如何学习到好的表示？”</p><p><strong>好的表示</strong>：具有很强的表示能力，即同样大小的向量可以表示更多信息；使后续的学习任务变得简单，即需要包含更高层的语义信息；具有一般性，是任务或领域独立的。期望其学到的表示可以比较容易地迁移到其它任务上。</p><p><strong>局部表示</strong>通常可以表示为one-hot向量的形式：不同名字来命名不同的颜色；<strong>分布式表示</strong>通常可以表示为低维的稠密向量：用RGB值来表示颜色，不同颜色对应到R、G、B 三维空间中一个点。</p><p>我们可以使用神经网络来将高维的局部表示空间$\mathbb{R}^{|\mathcal{V}|}$映射到一个非常低维的分布式表示空间$\mathbb{R}^{|\mathcal{d}|},d≪|V|$。在这个低维空间中，每个特征不再是坐标轴上的点，而是分散在整个低维空间中。在机器学习中，这个过程也称为<strong>嵌入（Embedding）</strong>。嵌入通常指将一个度量空间中的一些对象映射到另一个低维的度量空间中，并尽可能保持不同对象之间的拓扑关系。比如自然语言中词的分布式表示，也经常叫做词嵌入。</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>为了学习一种好的表示，需要构建具有一定“深度”的模型，并通过学习算法来让模型自动学习出好的特征表示（从底层特征，到中层特征，再到高层特征），从而最终提升预测模型的准确率。所谓“深度”是指原始数据进行非线性特征转换的次数。如果把一个表示学习系统看作是一个有向图结构，深度也可以看作是从输入节点到输出节点所经过的最长路径的长度。这样我们就需要一种学习方法可以从数据中学习一个“深度模型”，这就 是深度学习（Deep Learning，DL）。深度学习是机器学习的一个子问题，其主要目的是从数据中自动学习到有效的特征表示。</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202401221032018.png" alt="深度学习的数据处理流程" style="zoom:50%;"><p>目前，深度学习采用的模型主要是神经网络模型，其主要原因是神经网络模型可以使用误差反向传播算法，从而可以比较好地解决贡献度分配问题。只要是超过一层神经网络都会存在贡献度分配问题，因此超过一层的神经网络都可以看作是深度学习模型。</p><p><strong>端到端学习（End-to-End Learning）</strong>，也称端到端训练，是指在学习过程中不进行分模块或分阶段进行训练，直接优化任务的总体目标。在端到端学习中，一般不需要明确地给出不同模块或阶段的功能，中间过程不需要人为干预。端到端学习的训练数据为“输入-输出”对的形式，无需提供其它额外信息。因此，端到端学习和深度学习一样，都是要<strong>解决贡献度分配问题</strong>。目前，大部分采用神经网络模型的深度学习也可以看作是一种端到端的学习。</p><blockquote><p>深度学习是将表示学习和预测模型的学习进行端到端的学习，中间不需要人工干预。深度学习所要解决的问题是贡献度分配问题，而神经网络恰好是解决这个问题的有效模型。套用马克思的一句名言“金银天然不是货币，但货币天然是金银”，我们可以说，神经网络天然不是深度学习，但深度学习天然是神经网络。</p></blockquote><p>国家自然科学基金体系中，人工智能是信息科学部（F）下的第6个一级分类（F06）。信息科学部中，人工智能之外，还有6个研究方向，分别是：F01 电子学与信息系统，F02 计算机科学，F03 自动化，F04 半导体科学与信息器件，F05 光学和光电子，F07 交叉学科中的信息科学。人工智能下分10个二级分类代码，分别为：</p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202402261444941.webp" alt="img"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 神经网络与深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加速计算基础-CUDA Python</title>
      <link href="/2023/10/14/cuda-python/"/>
      <url>/2023/10/14/cuda-python/</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>加速计算基础-CUDA C/C++</title>
      <link href="/2023/10/13/cuda/"/>
      <url>/2023/10/13/cuda/</url>
      
        <content type="html"><![CDATA[<h2 id="一、利用基本的CUDA内存管理技术来优化加速应用程序"><a href="#一、利用基本的CUDA内存管理技术来优化加速应用程序" class="headerlink" title="一、利用基本的CUDA内存管理技术来优化加速应用程序"></a>一、利用基本的CUDA内存管理技术来优化加速应用程序</h2><h3 id="使用-CUDA-C-x2F-C-加速应用程序"><a href="#使用-CUDA-C-x2F-C-加速应用程序" class="headerlink" title="使用 CUDA C/C++ 加速应用程序"></a>使用 CUDA C/C++ 加速应用程序</h3><ul><li>编写、编译及运行既可调用 CPU 函数也可<strong>启动</strong> GPU <strong>核函数</strong> 的 C/C++ 程序。</li><li>使用<strong>执行配置</strong>控制并行<strong>线程层次结构</strong>。</li><li>重构串行循环以在 GPU 上并行执行其迭代。</li><li>分配和释放可用于 CPU 和 GPU 的内存。</li><li>处理 CUDA 代码生成的错误。</li><li>加速 CPU 应用程序。</li></ul><ol><li><p>加速系统又称异构系统，由 CPU 和 GPU 组成。加速系统会运行 CPU 程序，这些程序也会转而启动将受益于 GPU 大规模并行计算能力的函数。</p></li><li><p><strong><code>nvidia-smi</code></strong> **(*Systems Management Interface*) 命令行命令查询有关此 GPU 的信息。</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">!</span>nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><code>.cu</code> 文件（<code>.cu</code> 是 CUDA 加速程序的文件扩展名）。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">CPUFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This function is defined to run on the CPU.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>__global__ <span class="token keyword">void</span> <span class="token function">GPUFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This function is defined to run on the GPU.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">CPUFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  GPUFunction<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">__global__ void GPUFunction()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>__global__</code> 关键字表明以下函数将在 GPU 上运行并可<strong>全局</strong>调用，而在此种情况下，则指由 CPU 或 GPU 调用。</li><li>通常，我们将在 CPU 上执行的代码称为<strong>主机</strong>代码，而将在 GPU 上运行的代码称为<strong>设备</strong>代码。</li><li>注意返回类型为 <code>void</code>。使用 <code>__global__</code> 关键字定义的函数需要返回 <code>void</code> 类型。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">GPUFunction<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span> NUMBER_OF_BLOCKS<span class="token punctuation">,</span> NUMBER_OF_THREADS_PER_BLOCK<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token comment">//&lt;&lt;&lt;第一个参数 线程块数  第二个参数 每个线程块的线程数&gt;&gt;&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>通常，当调用要在 GPU 上运行的函数时，我们将此种函数称为<strong>已启动</strong>的<strong>核函数</strong>。</li><li>启动核函数时，我们必须提供<strong>执行配置</strong>，即在向核函数传递任何预期参数之前使用 <code>&lt;&lt;&lt; ... &gt;&gt;&gt;</code> 语法完成的配置。</li><li>在宏观层面，程序员可通过执行配置为核函数启动指定<strong>线程层次结构</strong>，从而定义线程组（称为<strong>线程块</strong>）的数量，以及要在每个线程块中执行的<strong>线程</strong>数量。现在请注意正在使用包含 <code>1</code> 线程（第二个配置参数）的 <code>1</code> 线程块（第一个执行配置参数）启动核函数。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>与许多 C/C++ 代码不同，核函数启动方式为<strong>异步</strong>：CPU 代码将继续执行<em>而无需等待核函数完成启动</em>。</li><li>调用 CUDA 运行时提供的函数 <code>cudaDeviceSynchronize</code> 将导致主机 (CPU) 代码<strong>暂作等待</strong>，直至设备 (GPU) 代码执行完成，才能在 CPU 上恢复执行。</li></ul><h4 id="编写一个Hello-GPU核函数"><a href="#编写一个Hello-GPU核函数" class="headerlink" title="编写一个Hello GPU核函数"></a>编写一个Hello GPU核函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">helloCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello from the CPU.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* * Refactor the `helloGPU` definition to be a kernel * that can be launched on the GPU. Update its message * to read "Hello from the GPU!" */</span>__global__ <span class="token keyword">void</span> <span class="token function">helloGPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello also from the GPU.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">helloCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*   * Refactor this call to `helloGPU` so that it launches   * as a kernel on the GPU.   */</span>  helloGPU<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*   * Add code below to synchronize on the completion of the   * `helloGPU` kernel completion before continuing the CPU   * thread.   */</span><span class="token punctuation">}</span><span class="token operator">!</span>nvcc <span class="token operator">-</span>arch<span class="token operator">=</span>sm_70 <span class="token operator">-</span>o hello<span class="token operator">-</span>gpu <span class="token number">01</span><span class="token operator">-</span>hello<span class="token operator">/</span><span class="token number">01</span><span class="token operator">-</span>hello<span class="token operator">-</span>gpu<span class="token punctuation">.</span>cu <span class="token operator">-</span>run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编译-some-CUDA-cu-文件："><a href="#编译-some-CUDA-cu-文件：" class="headerlink" title="编译 some-CUDA.cu 文件："></a>编译 <code>some-CUDA.cu</code> 文件：</h4><pre class="line-numbers language-none"><code class="language-none">nvcc -arch=sm_70 -o out some-CUDA.cu -run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>nvcc</code> 是使用 <code>nvcc</code> 编译器的命令行命令。</li><li>将 <code>some-CUDA.cu</code> 作为文件传递以进行编译。</li><li><code>o</code> 标志用于指定编译程序的输出文件。</li><li><code>arch</code> 标志表示该文件必须编译为哪个<strong>架构</strong>类型。本示例中，<code>sm_70</code> 将用于专门针对本实验运行的 Volta GPU 进行编译，但有意深究的用户可以参阅有关 <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#options-for-steering-gpu-code-generation"><code>arch</code> 标志</a>、<a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list">虚拟架构特性</a> 和 <a href="http://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list">GPU特性</a> 的文档。</li><li>为方便起见，提供 <code>run</code> 标志将执行已成功编译的二进制文件。</li></ul><p><strong>启动核函数时，核函数代码由每个已配置的线程块中的每个线程执行</strong>。</p><p>因此，如果假设已定义一个名为 <code>someKernel</code> 的核函数，则下列情况为真：</p><ul><li><code>someKernel&lt;&lt;&lt;1, 1&gt;&gt;()</code> 配置为在具有单线程的单个线程块中运行后，将只运行一次。</li><li><code>someKernel&lt;&lt;&lt;1, 10&gt;&gt;()</code> 配置为在具有 10 线程的单个线程块中运行后，将运行 10 次。</li><li><code>someKernel&lt;&lt;&lt;10, 1&gt;&gt;()</code> 配置为在 10 个线程块（每个均具有单线程）中运行后，将运行 10 次。</li><li><code>someKernel&lt;&lt;&lt;10, 10&gt;&gt;()</code> 配置为在 10 个线程块（每个均具有 10 线程）中运行后，将运行 100 次。</li></ul><p><strong>线程和块的索引</strong></p><p>每个线程在其线程块内部均会被分配一个索引，从 <code>0</code> 开始。此外，每个线程块也会被分配一个索引，并从 <code>0</code> 开始。正如线程组成线程块，线程块又会组成<strong>网格</strong>，而网格是 CUDA 线程层次结构中级别最高的实体。简言之，CUDA 核函数在由一个或多个线程块组成的网格中执行，且每个线程块中均包含相同数量的一个或多个线程。</p><p>CUDA 核函数可以访问能够识别如下两种索引的特殊变量：正在执行核函数的线程（位于线程块内）索引和线程所在的线程块（位于网格内）索引。这两种变量分别为 <code>threadIdx.x</code> 和 <code>blockIdx.x</code>。</p><p>下图中，blockId.x=1,threadIx.x=3</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202310141615928.png" alt="image-20231014161546823" style="zoom:50%;"><p><strong>加速for循环</strong></p><p>并非要顺次运行循环的每次迭代，而是让每次迭代都在自身线程中并行运行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token comment">/* * Refactor `loop` to be a CUDA Kernel. The new kernel should * only do the work of 1 iteration of the original loop. */</span><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is iteration number %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/*   * When refactoring `loop` to launch as a kernel, be sure   * to use the execution configuration to control how many   * "iterations" to perform.   *   * For this exercise, only use 1 block of threads.   */</span>  <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token function">loop</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token comment">/* * Notice the absence of the previously expected argument `N`. */</span>__global__ <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/*   * This kernel does the work of only 1 iteration   * of the original for loop. Indication of which   * "iteration" is being executed by this kernel is   * still available via `threadIdx.x`.   */</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is iteration number %d\n"</span><span class="token punctuation">,</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/*   * It is the execution context that sets how many "iterations"   * of the "loop" will be done.   */</span>  loop<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>协调并行线程</strong></p><h2 id="调整线程块的大小以实现更多的并行化"><a href="#调整线程块的大小以实现更多的并行化" class="headerlink" title="调整线程块的大小以实现更多的并行化"></a>调整线程块的大小以实现更多的并行化</h2><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202310141644320.png" alt="image-20231014164448262" style="zoom:67%;"><p>线程块包含的线程具有数量限制：确切地说是 1024 个。为增加加速应用程序中的并行量，我们必须要能在多个线程块之间进行协调。</p><p>CUDA 核函数可以访问给出块中线程数的特殊变量：<code>blockDim.x</code>。通过将此变量与 <code>blockIdx.x</code> 和 <code>threadIdx.x</code> 变量结合使用，并借助惯用表达式 <code>threadIdx.x + blockIdx.x * blockDim.x</code> 在包含多个线程的多个线程块之间组织并行执行，并行性将得以提升。以下是详细示例。</p><p>执行配置 <code>&lt;&lt;&lt;10, 10&gt;&gt;&gt;</code> 将启动共计拥有 100 个线程的网格，这些线程均包含在由 10 个线程组成的 10 个线程块中。因此，我们希望每个线程（<code>0</code> 至 <code>99</code> 之间）都能计算该线程的某个唯一索引。</p><ul><li>如果线程块 <code>blockIdx.x</code> 等于 <code>0</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>0</code>。向 <code>0</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>0</code> 至 <code>9</code>。</li><li>如果线程块 <code>blockIdx.x</code> 等于 <code>1</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>10</code>。向 <code>10</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>10</code> 至 <code>19</code>。</li><li>如果线程块 <code>blockIdx.x</code> 等于 <code>5</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>50</code>。向 <code>50</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>50</code> 至 <code>59</code>。</li><li>如果线程块 <code>blockIdx.x</code> 等于 <code>9</code>，则 <code>blockIdx.x * blockDim.x</code> 为 <code>90</code>。向 <code>90</code> 添加可能的 <code>threadIdx.x</code> 值（<code>0</code> 至 <code>9</code>），之后便可在包含 100 个线程的网格内生成索引 <code>90</code> 至 <code>99</code>。</li></ul><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202310141645739.png" alt="image-20231014164519698" style="zoom:67%;"><p><strong>加速具有多个线程块的For循环</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>__global__ <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/*   * This idiomatic expression gives each thread   * a unique index within the entire grid.   */</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">/*   * Additional execution configurations that would   * work and meet the exercises contraints are:   *   * &lt;&lt;&lt;5, 2&gt;&gt;&gt;   * &lt;&lt;&lt;10, 1&gt;&gt;&gt;   */</span>  loop<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaDeviceSynchronize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> CUDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot3基础篇</title>
      <link href="/2023/09/26/springboot-0/"/>
      <url>/2023/09/26/springboot-0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot基础篇"><a href="#Spring-Boot基础篇" class="headerlink" title="Spring Boot基础篇"></a>Spring Boot基础篇</h1><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>SpringBoot是Spring提供的一个子项目，用于快速构建Spring应用程序。</p><p>SpringBoot<strong>特性</strong></p><ul><li>起步依赖：本质是一个Maven坐标，整合了完成一个功能需要的所有坐标。</li><li>自动配置：约定大于配置原则，在boot程序启动后，一些bean对象会自动注入到ioc容器，不需要手动声明，简化开发。</li><li>其他特性：内嵌的Tomacat、Jetty（无需部署WAR文件）；外部化配置；不需要XML配置（而使用properties/yml进行少量配置）等。</li></ul><p><strong>自动创建：</strong></p><ul><li>创建Maven工程</li><li>导入spring-boot-starter-web起步依赖</li><li>编写Controller</li><li>提供启动类</li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407111514968.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">a.创建工程</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407111514969.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">b.idea自动导入起步依赖</div></center><p>配置好maven并且写好controller后，运行启动类会自动配置好configurations。</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407111742183.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">配置本地maven</div></center><blockquote><p>IDEA maven 配置：<a href="https://blog.csdn.net/qq_42057154/article/details/106114515">https://blog.csdn.net/qq_42057154/article/details/106114515</a></p><p>maven下setting.xml中配置阿里云镜像，配置默认JDK版本</p></blockquote><p><strong>手动创建：</strong></p><ul><li>创建Maven工程</li><li>引入依赖</li><li>提供启动类</li></ul><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407111657589.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">a.手动创建Maven工程</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407111658555.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">b.手动创建Maven工程</div></center><p>设置pom.xml文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.nusqx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springboot-create-manual<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置启动类、创建resources目录及目录下的application.properties配置文件。</p><h2 id="配置文件-properties-和-yaml-二选一"><a href="#配置文件-properties-和-yaml-二选一" class="headerlink" title="配置文件(properties 和 yaml 二选一)"></a>配置文件(properties 和 yaml 二选一)</h2><h3 id="properties配置文件"><a href="#properties配置文件" class="headerlink" title="properties配置文件"></a>properties配置文件</h3><p>application.properties可以被springboot自动识别。</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token value attr-value">springboot-start</span><span class="token comment"># 服务端口</span><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">9090</span><span class="token comment"># 虚拟目录：http://localhost:9090/start/hello</span><span class="token key attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token value attr-value">/start</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://docs.spring.io/spring-boot/appendix/application-properties/index.html#appendix.application-properties">Common Application Properties :: Spring Boot</a> 官网</p></blockquote><h3 id="yaml配置文件（首选，层次更清晰，更关注数据）"><a href="#yaml配置文件（首选，层次更清晰，更关注数据）" class="headerlink" title="yaml配置文件（首选，层次更清晰，更关注数据）"></a>yaml配置文件（首选，层次更清晰，更关注数据）</h3><p><strong>application.yml</strong> 或 application.yaml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9191</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /start2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yml配置信息书写与获取"><a href="#yml配置信息书写与获取" class="headerlink" title="yml配置信息书写与获取"></a>yml配置信息书写与获取</h4><p><strong>书写：</strong></p><p>值前边必须有空格，作为分隔符；</p><p>使用空格作为缩进表示层级关系，相同的层级左侧对齐；</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407111958860.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">yml配置信息书写</div></center><p>加email前缀防止键名重复。</p><p><strong>获取：</strong></p><p><code>@Value("${键名}")</code></p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407111959148.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">yml配置信息获取之Value注解</div></center><p>简化@Value注解，使用</p><p><code>@ConfigurationProperties(prefix="前缀")</code></p><p>相同层级的共同前缀；</p><p>实体类的成员变量名与配置文件中的键名保持一致；</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407112006000.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">yml配置信息获取之ConfigurationProperties注解</div></center><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># yml</span><span class="token comment"># 发件人相关信息</span><span class="token key atrule">email</span><span class="token punctuation">:</span><span class="token key atrule">user</span><span class="token punctuation">:</span> nusqx@qq.com<span class="token key atrule">code</span><span class="token punctuation">:</span> pazubwsphisacjha<span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com<span class="token key atrule">auth</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 学生爱好（数组）</span><span class="token key atrule">hobbies</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 打篮球<span class="token punctuation">-</span> 看书<span class="token punctuation">-</span> 看电影<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pom.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--java mail 依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.eclipse.angus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jakarta.mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>三方技术配置信息(配置)</p></li><li><p>自定义配置信息(配置+获取)</p></li></ul><h2 id="SpringBoot整合MyBatis-不需声明Bean对象"><a href="#SpringBoot整合MyBatis-不需声明Bean对象" class="headerlink" title="SpringBoot整合MyBatis-不需声明Bean对象"></a>SpringBoot整合MyBatis-不需声明Bean对象</h2><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407112015059.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">spring整合myBatis</div></center><p>整合mybatis</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--pom.xml--&gt;</span><span class="token comment">&lt;!--mysql驱动依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--mybatis起步依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置数据源</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># application.yml</span><span class="token comment"># 只需配置，读取交给springboot</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> sqx123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>poji内编写实体类；</p><p>mapper内编写数据访问接口；</p><p>service内编写接口，声明mapper中方法，编写接口的实现类并重写方法；</p><p>controller内调用service层的接口来控制业务流程。</p><blockquote><h1 id="Mapper层和DAO层对比："><a href="#Mapper层和DAO层对比：" class="headerlink" title="Mapper层和DAO层对比："></a>Mapper层和DAO层对比：</h1><p><code> Mapper</code> 层和 <code>DAO</code>（Data Access Object）层是在持久层中用于处理数据访问的两个概念。虽然这两者的目的都是用于访问数据库，但它们之间有一些区别。在Java开发中，这两个概念通常与MyBatis（或其他ORM框架）结合使用。</p><h2 id="Mapper层："><a href="#Mapper层：" class="headerlink" title="Mapper层："></a>Mapper层：</h2><p><strong>定义</strong>：</p><ul><li><code>Mapper</code> 是 MyBatis 中的一个术语，指的是用于描述如何映射数据库中的数据到 Java 对象的接口。每一个 <code>Mapper</code> 接口对应一个数据操作接口。</li></ul><p><strong>职责</strong>：</p><ul><li>定义了数据访问的接口，提供了一组数据库操作的方法。</li><li>包含了与具体数据访问有关的 SQL 语句和映射规则。</li></ul><p><strong>注解</strong>：</p><ul><li>通常使用 MyBatis 的注解或 XML 文件来描述 SQL 映射。</li></ul><h2 id="DAO层："><a href="#DAO层：" class="headerlink" title="DAO层："></a>DAO层：</h2><p><strong>定义</strong>：</p><ul><li><code>DAO</code> 是一个更通用的设计模式，用于封装与数据存储交互的逻辑。在Java中，通常指的是数据访问对象。</li></ul><p><strong>职责</strong>：</p><ul><li>提供了一个抽象接口，定义了数据访问的方法。</li><li>包含了数据访问的具体实现，可以是直接对数据库进行操作，也可以通过调用其他服务、API等方式进行数据访问。</li></ul><p><strong>注解</strong>：</p><ul><li>通常不涉及注解，而是通过实现接口的方式来定义数据访问方法。</li></ul><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p><strong>技术栈</strong>：</p><ul><li><code>Mapper</code> 通常与 MyBatis 等 ORM 框架结合使用。</li><li><code>DAO</code> 是一个更通用的概念，可以用于任何形式的数据访问，包括直接 JDBC 操作、使用 ORM 框架、调用 RESTful API 等。</li></ul><p><strong>灵活性</strong>：</p><ul><li><code>Mapper</code> 更侧重于数据映射和 SQL 操作，通常会与具体的 ORM 框架绑定。</li><li><code>DAO</code> 层相对更加抽象，可以在不同的数据访问技术之间切换，提供更大的灵活性。</li></ul><p><strong>命名规范</strong>：</p><ul><li><code>Mapper</code> 接口方法通常直接与 SQL 语句对应，方法名和 SQL 语句之间的映射关系更为直观。</li><li><code>DAO</code> 接口方法可以根据业务逻辑进行更灵活的命名，而不受 SQL 语句的限制。</li></ul><p>在实际项目中，<code>Mapper</code> 层和 <code>DAO</code> 层有时会交替使用或者同时存在，具体的选择会根据项目的需求、技术栈和团队的开发习惯而定。在使用 MyBatis 等 ORM 框架时，常常使用 <code>Mapper</code> 来定义数据库操作接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// MyBatis Mapper 接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into user (name, age) values (#{name}, #{age})"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// DAO 接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// DAO 实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token comment">// 数据库操作的具体实现</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="Bean管理（第三方的Bean管理）"><a href="#Bean管理（第三方的Bean管理）" class="headerlink" title="Bean管理（第三方的Bean管理）"></a>Bean管理（第三方的Bean管理）</h2><h3 id="Bean扫描"><a href="#Bean扫描" class="headerlink" title="Bean扫描"></a>Bean扫描</h3><p>Spring中：</p><ul><li><p>xml标签：&lt;context:component-scan base-package=”com.nusqx/“&gt;</p></li><li><p>配置类注解：@ComponentScan(basePackages=”com.nusqx”)</p></li></ul><p>SpringBoot中：使用<code>@SpringBootApplication</code></p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121421619.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">SpringBoot启动类组合注解</div></center><p><strong>SpringBoot默认扫描启动类所在的包及其子包。</strong></p><p>也可以通过手动添加<code>@ComponentScan(basePackages = {"com.nusqx"})</code>指定扫描的包。</p><h3 id="Bean注册"><a href="#Bean注册" class="headerlink" title="Bean注册"></a>Bean注册</h3><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121428593.png" width="900">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Bean注册</div></center><p>如果要注册的bean对象来自第三方（不是自定义的），是无法用<code>@Component</code>及衍生注解声明bean的。</p><p>因而Spring提供了第三方bean对象管理注解</p><ul><li><p><code>@Bean</code></p><p>如果要注册第三方bean，建议在配置类中集中注册</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121450330.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">@Bean</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121450940.png" width="400">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">在config包下使用@Bean</div></center></li><li><p><code>@Import</code></p><ul><li><p>导入配置类</p></li><li><p>导入 ImportSelector 接口实现类</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121506335.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">@Import</div></center></li><li><p>@EnableXxxx注解，封装@Import注解</p></li></ul></li></ul><h3 id="注册条件"><a href="#注册条件" class="headerlink" title="注册条件"></a>注册条件</h3><p>SpringBoot提供了设置注册生效条件的注解@Conditional及衍生注解</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121515106.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">@Conditional常用衍生注解</div></center><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><ul><li><p>公共组件自定义成starter</p></li><li><p>面试</p></li></ul><p>遵循约定大于配置原则，在boot程序启动后，起步依赖中的一些bean对象会自动注入到ioc容器。</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121617887.png" width="1100">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">原理</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121607986.png" width="1100">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">自动配置-源码分析</div></center><p><strong>.imports配置文件是核心，springboot2.7以前使用的是spring.factories</strong></p><blockquote><p>简述：</p><p>在主启动类上添加了SpringBootApplication注解，这个注解组合了EnableAutoConfiguration注解（开启了自动配置）；</p><p>EnableAutoConfiguration注解又组合了Import注解，导入了AutoConfigurationImportSelector类；</p><p>AutoConfigurationImportSelector实现了selectImports方法，这个方法经过层层调用，最终会读取META-INF目录下的后缀名为imports的文件，boot2.7以前的版本，读取的是spring.factories文件，2.7-3.0之间两者兼容，3.0之后只支持imports。</p><p>读取到全类名了之后，会解析注册条件，也就是@Conditional及其衍生注解，把满足注册条件的Bean对象自动注入到IOC容器中。</p></blockquote><h2 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h2><p>在实际开发中，经常会自定义一些公共组件，提供给各个项目团队使用。而在SpringBoot的项目中，一般会将这些公共组件封装为SpringBoot的starter。</p><ul><li>Xxxx-autoconfiguration 自动配置功能</li><li>Xxxx-starter 依赖管理功能，并引入自动配置模块</li></ul><p>以自定义mybatis的starter为例，</p><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407121900084.png" width="1000">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">自定义mybatis</div></center><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.nusqx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dmybatis-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h2><p>IDEA2024.1.4 + maven3.9.5 + JDK17 + SpringBoot3.3.1 + MyBatis起步依赖3.0.3</p><p>当使用MyBatis3.0.0时会遇到问题😡</p><p>IDEA设置新建项目使用本地的maven而不需要重新下载</p><blockquote><p><a href="https://developer.baidu.com/article/details/2785547">https://developer.baidu.com/article/details/2785547</a></p></blockquote><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407161039242.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">新建项目设置</div></center><center>    <img src="https://gitee.com/nusqx/picgo/raw/master/blog/202407161040132.png" width="800">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">新建项目maven设置</div></center><p>测试工具：Apifox或Postman</p><blockquote><p>对比参考文章：<a href="https://apifox.com/apiskills/apifox-postman-comparison/">https://apifox.com/apiskills/apifox-postman-comparison/</a></p><p>Apifox：<a href="https://apifox.com/help/">https://apifox.com/help/</a></p><p>Postman：<a href="https://postman.org.cn/">https://postman.org.cn/</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习框架PyTorch</title>
      <link href="/2023/09/07/shen-du-xue-xi-kuang-jia-pytorch/"/>
      <url>/2023/09/07/shen-du-xue-xi-kuang-jia-pytorch/</url>
      
        <content type="html"><![CDATA[<h2 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h2><p>张量Tensor</p><p><img src="C:/Users/19764/AppData/Roaming/Typora/typora-user-images/image-20230907161128130.png" alt="image-20230907161128130"></p><img src="C:/Users/19764/AppData/Roaming/Typora/typora-user-images/image-20230907161247301.png" alt="image-20230907161247301" style="zoom:80%;"><p><img src="C:/Users/19764/AppData/Roaming/Typora/typora-user-images/image-20230907161516208.png" alt="image-20230907161516208"></p><p><img src="C:/Users/19764/AppData/Roaming/Typora/typora-user-images/image-20230909161305114.png" alt="image-20230909161305114"></p><p><img src="C:/Users/19764/AppData/Roaming/Typora/typora-user-images/image-20230909163841898.png" alt="image-20230909163841898"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习的数学基础</title>
      <link href="/2023/09/06/mathematical-foundations-in-deep-learning/"/>
      <url>/2023/09/06/mathematical-foundations-in-deep-learning/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062030720.png" alt="image-20230906203023643"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062032330.png" alt="image-20230906203205243"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062035790.png" alt="image-20230906203508681"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062041814.png" alt="image-20230906204123715"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062042497.png" alt="image-20230906204233449"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习</title>
      <link href="/2023/09/05/deeplearning01/"/>
      <url>/2023/09/05/deeplearning01/</url>
      
        <content type="html"><![CDATA[<h2 id="一、机器学习的应用"><a href="#一、机器学习的应用" class="headerlink" title="一、机器学习的应用"></a>一、机器学习的应用</h2><h3 id="1-计算机视觉"><a href="#1-计算机视觉" class="headerlink" title="1.计算机视觉"></a>1.计算机视觉</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309052004059.png" alt="image-20230905200400706"></p><h3 id="2-语音技术"><a href="#2-语音技术" class="headerlink" title="2.语音技术"></a>2.语音技术</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309051952995.png" alt="image-20230905195227897"></p><h3 id="3-自然语言处理"><a href="#3-自然语言处理" class="headerlink" title="3.自然语言处理"></a>3.自然语言处理</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309052004724.png" alt="image-20230905200451518"></p><h2 id="二、神经网络和深度学习"><a href="#二、神经网络和深度学习" class="headerlink" title="二、神经网络和深度学习"></a>二、神经网络和深度学习</h2><h3 id="1-发展历程"><a href="#1-发展历程" class="headerlink" title="1.发展历程"></a>1.发展历程</h3><p><img src="C:/Users/19764/AppData/Roaming/Typora/typora-user-images/image-20230905214305937.png" alt="image-20230905214305937"></p><h2 id="三、基础知识"><a href="#三、基础知识" class="headerlink" title="三、基础知识"></a>三、基础知识</h2><h3 id="1-机器学习的概念"><a href="#1-机器学习的概念" class="headerlink" title="1.机器学习的概念"></a>1.机器学习的概念<img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309061020272.png" alt="image-20230906102033968"></h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309061022567.png" alt="image-20230906102227505"></p><h3 id="2-机器学习的三要素"><a href="#2-机器学习的三要素" class="headerlink" title="2.机器学习的三要素"></a>2.机器学习的三要素</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309061030423.png" alt="image-20230906103030309"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309061259908.png" alt="image-20230906125932734"></p><h3 id="3-过拟合（overfitting）：经验风险的最小化原则使训练集上的误差很低，但是在未知数据上误差很高。"><a href="#3-过拟合（overfitting）：经验风险的最小化原则使训练集上的误差很低，但是在未知数据上误差很高。" class="headerlink" title="3.过拟合（overfitting）：经验风险的最小化原则使训练集上的误差很低，但是在未知数据上误差很高。"></a>3.过拟合（overfitting）：经验风险的最小化原则使训练集上的误差很低，但是在未知数据上误差很高。</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062008302.png" alt="image-20230906200829107"></p><h3 id="4-防止过拟合：正则化（regularization）"><a href="#4-防止过拟合：正则化（regularization）" class="headerlink" title="4.防止过拟合：正则化（regularization）"></a>4.防止过拟合：正则化（regularization）</h3><h3 id="5-常见机器学习的类型"><a href="#5-常见机器学习的类型" class="headerlink" title="5.常见机器学习的类型"></a>5.常见机器学习的类型</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062019422.png" alt="image-20230906201918302"></p><h2 id="四、线性模型（Linear-Model）"><a href="#四、线性模型（Linear-Model）" class="headerlink" title="四、线性模型（Linear Model）"></a>四、线性模型（Linear Model）</h2><h3 id="1-回归问题"><a href="#1-回归问题" class="headerlink" title="1.回归问题"></a>1.回归问题</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062048571.png" alt="image-20230906204815426"></p><h3 id="2-分类问题"><a href="#2-分类问题" class="headerlink" title="2.分类问题"></a>2.分类问题</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062047905.png" alt="image-20230906204718842"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062049658.png" alt="image-20230906204941560"></p><h3 id="Logistic回归"><a href="#Logistic回归" class="headerlink" title="Logistic回归"></a>Logistic回归</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062052947.png" alt="image-20230906205206827"></p><p>$${\sigma(x)=\frac{1}{1+e^{-x}}}$$</p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062104905.png" alt="image-20230906210426785"></p><h3 id="学习准则：确定损失函数"><a href="#学习准则：确定损失函数" class="headerlink" title="学习准则：确定损失函数"></a>学习准则：确定损失函数</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062114356.png" alt="image-20230906211419326"></p><p>衡量两个条件概率的差异——熵（Entropy）</p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062111096.png" alt="image-20230906211101990"></p><p><strong>交叉熵（Cross Entropy）</strong></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309062121076.png" alt="image-20230906212102027"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071014891.png" alt="image-20230907101441297"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071045322.png" alt="image-20230907104520096"></p><h3 id="3-多分类问题（Multi-class-Classification）"><a href="#3-多分类问题（Multi-class-Classification）" class="headerlink" title="3.多分类问题（Multi-class Classification）"></a>3.多分类问题（Multi-class Classification）</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071101314.png" alt="image-20230907110119235"></p><h3 id="Softmax回归"><a href="#Softmax回归" class="headerlink" title="Softmax回归"></a>Softmax回归</h3><p><strong>Softmax Regression，也称为多项（Multinomial）或多类（Multi-Class）的Logistic回归，是Logistic回归在多分类问题上的推广。</strong></p><p><strong>Softmax回归中，首先还是利用线性函数作特征的映射（判别函数）</strong></p><p><strong>然后利用softmax函数作为非线性的决策函数</strong></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071105187.png" alt="image-20230907110512154"></p><p><strong>归一化</strong></p><p>小结</p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071105215.png" alt="image-20230907110551177"></p><h3 id="感知机（Perceptron）"><a href="#感知机（Perceptron）" class="headerlink" title="感知机（Perceptron）"></a>感知机（Perceptron）</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071111273.png" alt="image-20230907111122195"></p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071111188.png" alt="image-20230907111142154"></p><blockquote><p>y是真实标签（取值为+1或-1）</p></blockquote><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071111181.png" alt="image-20230907111156150"></p><h3 id="线性分类模型小结"><a href="#线性分类模型小结" class="headerlink" title="线性分类模型小结"></a>线性分类模型小结</h3><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309071123620.png" alt="image-20230907112333535"></p><blockquote><p>one-hot向量，如010,100,001这种独热编码</p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（八）</title>
      <link href="/2023/08/08/python8/"/>
      <url>/2023/08/08/python8/</url>
      
        <content type="html"><![CDATA[<h3 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h3><ol><li><p>NumPy中，np.array()接收Python列表作为参数，生成NumPy数组（numpy.ndarray）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token comment"># 导入库</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 生成numpy数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># [1. 2. 3.]</span><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment"># numpy.ndarray</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token comment"># [3. 6. 9.]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token comment"># [-1. -2. -3.]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token comment"># [ 2.  8. 18.]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x <span class="token operator">/</span> y<span class="token punctuation">)</span> <span class="token comment"># [0.5 0.5 0.5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>“对应元素的”的英文是element-wise，NumPy数组不仅可以进行element-wise运算，也可以和单一的数值（标量）组合起来进行运算。此时，需要在NumPy数组的各个元素和标量之间进行运算。 这个功能也被称为广播。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x <span class="token operator">/</span> <span class="token number">2.0</span> <span class="token comment"># array([0.5, 1. , 1.5])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>NumPy不仅可以生成一维数组（排成一列的数组），也可以生成多维数组。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成二维数组</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token comment"># [[1 2]</span><span class="token comment"># [3 4]]</span>A<span class="token punctuation">.</span>shape <span class="token comment"># (2, 2) 生成一个2*2的矩阵A</span>A<span class="token punctuation">.</span>dtype <span class="token comment"># dtype('int32') 矩阵元素的数据类型</span>B <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>A <span class="token operator">+</span> BA <span class="token operator">*</span> B <span class="token comment"># 不是矩阵乘法，仍然是对应元素相乘</span>A <span class="token operator">*</span> <span class="token number">10</span> <span class="token comment"># 基于广播，数乘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>矩阵的形状可以通过shape查看，矩阵元素的数据类型可以通过dtype查看</p></blockquote></li><li><p><strong>广播</strong>：NumPy中，形状不同的数组之间也可以进行运算。前例中，标量10被扩展成了2×2的形状，然后再与矩阵A进行乘法运算。这个巧妙的功能叫做<em>广播</em>（broadcast）。</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309081719299.png" alt="image-20230908171921214" style="zoom:67%;"><pre class="line-numbers language-python" data-language="python"><code class="language-python">A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>B <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>C <span class="token operator">=</span> A <span class="token operator">*</span> BC<span class="token punctuation">.</span>shape <span class="token comment"># (2,2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202309081725013.png" alt="image-20230908172508990" style="zoom:80%;"></li><li><p>NumPy可以通过索引访问元素，也可以使用数组访问各个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [51 55] 第0行</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 55</span><span class="token comment"># 也可以使用for访问各个元素</span><span class="token keyword">for</span> row <span class="token keyword">in</span> X<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token comment"># 使用数组访问各个元素</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 将X转化为一维数组</span><span class="token keyword">print</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>X<span class="token punctuation">[</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># 获取索引为0,2,4的元素 array([51, 14,  0])</span>X <span class="token operator">&gt;</span> <span class="token number">15</span> <span class="token comment"># array([ True,  True, False,  True, False, False])</span>X<span class="token punctuation">[</span>X<span class="token operator">&gt;</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token comment"># array([51, 55, 19])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运用这个标记法可以获取满足一定条件的元素。对NumPy数组使用不等号运算符等（上例中是X &gt; 15）,结果会得到一个布尔型的数组。上例中就是使用这个布尔型数组取出了数组的各个元素（取出True对应的元素）。</p></li></ol><h3 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h3><ol><li><p>绘制图形</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 生成数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment"># 以0.1为单位，生成0-6的数据</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># 绘制图形</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用NumPy的<strong>arange方法</strong>生成了[0, 0.1, 0.2,…, 5.8, 5.9]的数据，将其设为x。对x的各个元素，应用NumPy的sin函数np.sin()，将x、y的数据传给<strong>plt.plot方法</strong>，然后绘制图形。最后，通过**plt.show()**显示图形。</p></li><li><p>pyplot的功能：添加标题标签等功能</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 生成数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span>y1 <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y2 <span class="token operator">=</span> np<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>x<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"sin"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> linestyle <span class="token operator">=</span> <span class="token string">"--"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"cos"</span><span class="token punctuation">)</span> <span class="token comment">#用虚线绘制</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span> <span class="token comment">#x轴标签</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">)</span> <span class="token comment">#y轴标签</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'sin &amp; cos'</span><span class="token punctuation">)</span> <span class="token comment">#标题</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="C:/Users/19764/AppData/Roaming/Typora/typora-user-images/image-20230909100655581.png" alt="image-20230909100655581" style="zoom: 50%;"></li><li><p>pyplot提供显示图像的方法<code>imshow()</code>、matplotlib.image模块提供<code>imread()</code>方法读入图像</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>image <span class="token keyword">import</span> imreadimg <span class="token operator">=</span> imread<span class="token punctuation">(</span><span class="token string">'./tutu/0.png'</span><span class="token punctuation">)</span> <span class="token comment">#读入图像</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><code>from...import *</code>语句和<code>import</code>的区别</p><ul><li><p><strong>import 模块</strong>：导入一个模块；注：相当于导入的是一个文件夹，是个相对路径。</p></li><li><p><strong>from…import</strong>：导入了一个模块中的一个函数；注：相当于导入的是一个文件夹中的文件，是个绝对路径。</p></li><li><p>所以使用上的的区别是当引用文件时是:</p><p><strong>import</strong> 导入模块，每次使用模块中的函数都要是定是哪个模块。</p><p><strong>from…import *</strong> 导入模块，每次使用模块中的函数，直接使用函数就可以了；注因为已经知道该函数是那个模块中的了。</p></li></ul><blockquote><p>参考书目：《深度学习入门：基于Python的理论与实现》</p><p><a href="https://www.ituring.com.cn/book/1921">https://www.ituring.com.cn/book/1921</a></p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> NumPy </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity脚本设计</title>
      <link href="/2023/04/24/unity-jiao-ben-she-ji/"/>
      <url>/2023/04/24/unity-jiao-ben-she-ji/</url>
      
        <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-深度学习</title>
      <link href="/2023/04/16/machinelearning1/"/>
      <url>/2023/04/16/machinelearning1/</url>
      
        <content type="html"><![CDATA[<ol><li>Regression</li><li>Classification</li><li>CNN</li><li>Self-attention</li><li>Transformer</li><li>GAN</li><li>BERT</li><li>Auto encoder</li><li>Explainable AI</li><li>Model Attack</li><li>Domain Adaptation</li><li>Reinforcement Learning</li><li>Network Compression</li><li>Life-long Learning</li><li>Meta Learning</li></ol><blockquote><p>李宏毅 YouTube Channel：<a href="https://www.youtube.com/c/HungyiLeeNTU">https://www.youtube.com/c/HungyiLeeNTU</a></p></blockquote><hr><h2 id="一、生成式AI（ChatGPT）"><a href="#一、生成式AI（ChatGPT）" class="headerlink" title="一、生成式AI（ChatGPT）"></a>一、生成式AI（ChatGPT）</h2><h3 id="一、文字接龙-函式（function）"><a href="#一、文字接龙-函式（function）" class="headerlink" title="一、文字接龙-函式（function）"></a>一、文字接龙-函式（function）</h3><h4 id="1-训练-f-测试"><a href="#1-训练-f-测试" class="headerlink" title="1. 训练 - f - 测试"></a>1. 训练 - f - 测试</h4><h4 id="2-Chat-GPT关键技术"><a href="#2-Chat-GPT关键技术" class="headerlink" title="2. Chat-GPT关键技术"></a>2. Chat-GPT关键技术</h4><ol><li><p>预训练 Pre-train：GPT,基石模型 Foundation Model;自督导式学习，通过网络资料学习的过程</p></li><li><p>GPT-&gt;ChatGPT：微调（finetune）</p></li><li><p>自监督式学习 Self-supervised Learning</p></li><li><p>ChatGPT: G-&gt;generative生成的 P-&gt;pre-trained预训练 T-&gt;Transformer</p></li><li><p>督导式学习-&gt;成对地训练</p></li><li><p>增强式学习Reinforcement Learning,RL </p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202308291844676.png" alt="image-20230829184440018"></p></li></ol><h3 id="3-ChatGPT带来的研究问题："><a href="#3-ChatGPT带来的研究问题：" class="headerlink" title="3. ChatGPT带来的研究问题："></a>3. ChatGPT带来的研究问题：</h3><ul><li><p>如何精确提出需求 Prompting</p><p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202308291847405.png" alt="image-20230829184739179"></p></li><li><p>如何更正错误 Neural Editing（修改错误不带来新的错误）</p></li><li><p>侦测AI生成的物件</p></li><li><p>不小心泄露秘密 Machine Unlearning（遗忘不想泄露的信息）</p></li><li><p>文字冒险游戏使用 Midjourney 生成文字描述的图片</p></li></ul><h2 id="二、Regression"><a href="#二、Regression" class="headerlink" title="二、Regression"></a>二、Regression</h2><h3 id="一、Model-确定模型"><a href="#一、Model-确定模型" class="headerlink" title="一、Model - 确定模型"></a>一、Model - 确定模型</h3><h4 id="1-Linear-model"><a href="#1-Linear-model" class="headerlink" title="1. Linear model:"></a>1. Linear model:</h4><h4 id="y-x3D-b-sum-w-ix-i"><a href="#y-x3D-b-sum-w-ix-i" class="headerlink" title="$$y=b+\sum{w_ix_i} $$"></a>$$y=b+\sum{w_ix_i} $$</h4><h4 id="x-i-an-attribute-of-input-x"><a href="#x-i-an-attribute-of-input-x" class="headerlink" title="$x_i$: an attribute of input x"></a>$x_i$: an attribute of input x</h4><h4 id="w-i-weight"><a href="#w-i-weight" class="headerlink" title="$w_i$: weight"></a>$w_i$: weight</h4><h4 id="b-bias"><a href="#b-bias" class="headerlink" title="$b$: bias"></a>$b$: bias</h4><h3 id="二、Goodness-of-Function-确定损失函数"><a href="#二、Goodness-of-Function-确定损失函数" class="headerlink" title="二、Goodness of Function - 确定损失函数"></a>二、Goodness of Function - 确定损失函数</h3><h4 id="1-Loss-function-L"><a href="#1-Loss-function-L" class="headerlink" title="1. Loss function L:"></a>1. Loss function L:</h4><p>​$$L(f) = L(w,b) $$</p><p>​$$= /sum{}$$</p><div class="row">    <embed src="/pdf/比对说明文档.pdf" width="100%" height="550" type="application/pdf"></div><p> kaggle JudgeBio </p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机专业课问答</title>
      <link href="/2023/04/01/ji-suan-ji-zhuan-ye-ke-wen-da/"/>
      <url>/2023/04/01/ji-suan-ji-zhuan-ye-ke-wen-da/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机组成原理"><a href="#一、计算机组成原理" class="headerlink" title="一、计算机组成原理"></a>一、计算机组成原理</h2><ol><li><p>上溢：双符号位的最高位表示的始终是结果的正负值，两个数进行运算，得到的结果的绝对值超过最大表示范围。两个正数的运算结果超出了数值位的表示的最大范围，所以数值位进位到符号位了，说明，其绝对值超过了表示的最大范围，为上溢。<strong>定点整数之间只会发生上溢</strong>。</p></li><li><p>下溢：两个浮点数运算，得到的结果的绝对值超过最小的表示范围。两个数是负数，这个两个数的运算结果超过了数值位的最小范围，所以数值位上的1被借走了，说明其绝对值超过了表示的最小范围，为下溢。<strong>只有浮点数的运算会发生下溢</strong>。</p></li><li><p>边界对齐：以空间换时间的思路，起始地址要能够被自身长度整除。采用边界对齐后，访问一个字只需要一次访存。</p></li><li><p>存储方式：大端存储和小端存储。</p></li><li><p>大端方式：高字节存储在低地址（顺着存），小端方式：高字节存储在高地址（逆着存）。</p></li><li><p>浮点数加减运算：</p><ul><li><p>对阶：小阶向大阶看齐</p></li><li><p>尾数加减</p></li><li><p>规格化</p><ul><li>左规：尾数的最高位为非有效位时进行左规吧  </li><li>右规：尾数溢出时右规</li></ul></li><li><p>舍入：在右规和对阶的过程中都有可能存在舍入的问题</p></li><li><p>溢出判断：</p><ul><li>阶码上溢：抛出异常</li><li>阶码下溢：按机器0处理</li></ul></li></ul></li><li><p>IEEE 754 标准：阶码用移码表示，尾数用原码表示，隐藏最高位的1。</p></li><li><p>并行进位加法器：加法器的多个进位同时产生（通过进位产生函数和进位传递函数）。</p></li><li><p>计算机的多级存储系统：</p><ul><li>主存-缓存：用来缓解速度压力，完全由硬件实现，缓存是主存的副本</li><li>主存-辅存：用来缓解容量压力，有操作系统和硬件配合实现，主存是辅存的副本</li></ul></li><li><p>硬布线控制器与微程序控制器</p><ul><li>硬布线控制器是用组合逻辑电路来实现控制器中的CU，微程序控制器是用存储程序的思想来实现CU</li><li>硬布线的执行速度块，微程序控制器执行速度慢</li><li>硬布线繁琐，不规整，微程序控制器较规整</li><li>硬布线应用于RISC，微程序控制器应用于CISC</li><li>硬布线不易扩充，微程序控制器易于扩充</li></ul></li><li><p>影响指令流水线的因素</p><ul><li>结构冲突：多条指令在同一时刻争用同一资源（比如取址与取数据争用内存）。</li><li>数据冲突：当指令在流水线中重叠执行时，后面的指令需要用到前面的指令的执行结果，而前面的指令尚未写回导致的冲突。</li><li>控制冲突：如果现在想要执行某条指令，是由之前指令的运行结果决定，而现在那条之前指令的结果还没产生，就导致了控制冲突。（遇到转移指令，或者其他改变PC的指令）</li></ul></li><li><p>增强总线效能的办法</p><ul><li>猝发传输：读写一组连续的字时，只需要给出首地址即可</li><li>总线复用：信号线在不同的时间传输不同的信息</li></ul></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机专业课 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（七）</title>
      <link href="/2023/01/06/python7/"/>
      <url>/2023/01/06/python7/</url>
      
        <content type="html"><![CDATA[<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ol><li><p><code>try...except...finally...</code>机制</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try...'</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'except:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span><span class="token comment"># try...</span><span class="token comment"># except: division by zero</span><span class="token comment"># finally...</span><span class="token comment"># END</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们认为某些代码可能会出错时，就可以用<code>try</code>来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即<code>except</code>语句块，执行完<code>except</code>后，如果有<code>finally</code>语句块，则执行<code>finally</code>语句块，至此，执行完毕。</p></li><li><p><code>finally</code>如果有，则一定会被执行（可以没有<code>finally</code>语句）。</p></li><li><p>Python的错误其实也是class，所有的错误类型都继承自<code>BaseException</code>，所以在使用<code>except</code>时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”。</p></li><li><p>使用<code>try...except</code>捕获错误还有一个巨大的好处，就是可以跨越多层调用，比如函数<code>main()</code>调用<code>bar()</code>，<code>bar()</code>调用<code>foo()</code>，结果<code>foo()</code>出错了，这时，只要<code>main()</code>捕获到了，就可以处理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> foo<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        bar<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Error: division by zero</span><span class="token comment"># finally...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Python内置的<code>logging</code>模块可以非常容易地记录错误信息，通过配置，<code>logging</code>还可以把错误记录到日志文件里，方便事后排查。</p></li><li><p><code>raise</code>语句抛出错误。</p></li></ol><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ol><li>单元测试可以有效地测试某个程序模块的行为，是未来重构代码的信心保证。</li><li>单元测试的测试用例要覆盖常用的输入组合、边界条件和异常。</li><li>单元测试代码要非常简单，如果测试代码太复杂，那么测试代码本身就可能有bug。</li><li>单元测试通过了并不意味着程序就没有bug了，但是不通过程序肯定有bug。</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 测试与异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（六）</title>
      <link href="/2022/06/02/python6/"/>
      <url>/2022/06/02/python6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、使用-slots-限制某个类的实例的属性"><a href="#一、使用-slots-限制某个类的实例的属性" class="headerlink" title="一、使用__slots__限制某个类的实例的属性"></a>一、使用<code>__slots__</code>限制某个类的实例的属性</h3><ol><li><p>给类的实例绑定属性和方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span> <span class="token comment"># 动态绑定属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token keyword">from</span> types <span class="token keyword">import</span> MethodTypes<span class="token punctuation">.</span>set_age <span class="token operator">=</span> MethodType<span class="token punctuation">(</span>set_age<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment"># 给实例绑定一个方法，只对该实例起作用</span>s<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token comment"># s1.set_age(20) #实例s1没有绑定方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>给所有实例都绑定方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 给所有实例都绑定方法</span><span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>score <span class="token operator">=</span> score    Student<span class="token punctuation">.</span>set_score <span class="token operator">=</span> set_score <span class="token comment"># 给class类绑定方法</span>s1<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>__slots__</code>限制实例的属性</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token comment"># 用tuple定义允许绑定的属性名称</span>    s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'GuLuyu'</span>s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">23</span>s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">99.9</span> <span class="token comment">#AttributeError: 'Student' object has no attribute 'score'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的，除非在子类中也定义<code>__slots__</code>，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p></li></ol><h3 id="二、使用-property"><a href="#二、使用-property" class="headerlink" title="二、使用@property"></a>二、使用@property</h3><ol><li><p>对属性的限制</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>score    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'must be an integer!'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> value <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'must between 0~100'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>score <span class="token operator">=</span> values <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>get_score<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以用Python内置的<code>@property</code>装饰器把一个方法变成属性调用。把一个getter方法变成属性，只需要加上<code>@property</code>就可以，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，把一个setter方法变成属性赋值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token decorator annotation punctuation">@property</span>        <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_score    <span class="token comment"># 属性的方法名不要跟实例变量名重名score\_score</span>    <span class="token decorator annotation punctuation">@score<span class="token punctuation">.</span>setter</span>    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'must be an integer!'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> value <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'must between 0~100'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_score <span class="token operator">=</span> values <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">96</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、多重继承"><a href="#三、多重继承" class="headerlink" title="三、多重继承"></a>三、多重继承</h3><ol><li><p>通过多重继承，一个子类就可以同时获得多个父类的所有功能。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Flyable</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Flying...'</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Mammal</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Mammal<span class="token punctuation">,</span> Runnable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Bat</span><span class="token punctuation">(</span>Mammal<span class="token punctuation">,</span> Flyable<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 蝙蝠</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Parrot</span><span class="token punctuation">(</span>Bird<span class="token punctuation">,</span> Flyable<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 鸵鸟</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Ostrich</span><span class="token punctuation">(</span>Bird<span class="token punctuation">,</span> Runnable<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 鹦鹉</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类层次设计</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202305051802615.png" alt="image-20230505180215465" style="zoom:50%;"></li><li><p>Mixln即<code>Mix-in</code>，常被译为“混入”，是一种编程模式，在Python等面向对象语言中，通常它是实现了某种功能单元的类，用于被其他子类继承，将功能组合到子类中。利用Python的多重继承，子类可以继承不同功能的 Mixin类，按需动态组合使用。当多个类都实现了同一种功能时，这时应该考虑将该功能抽离成Mixin类。</p></li><li><p>上例中，为了更好地看出继承关系，可以把Runnable和Flyable改为RunnableMixIn和FlyableMixIn。</p></li><li><p>只允许单一继承的语言（如Java）不能使用MixIn的设计。</p></li></ol><h3 id="四、枚举类"><a href="#四、枚举类" class="headerlink" title="四、枚举类"></a>四、枚举类</h3><ol><li><p>枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了<code>Enum</code>类来实现这个功能：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> EnumMonth <span class="token operator">=</span> Enum<span class="token punctuation">(</span><span class="token string">'Month'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">,</span> <span class="token string">'Mar'</span><span class="token punctuation">,</span> <span class="token string">'Apr'</span><span class="token punctuation">,</span> <span class="token string">'May'</span><span class="token punctuation">,</span> <span class="token string">'Jun'</span><span class="token punctuation">,</span> <span class="token string">'Jul'</span><span class="token punctuation">,</span> <span class="token string">'Aug'</span><span class="token punctuation">,</span> <span class="token string">'Sep'</span><span class="token punctuation">,</span> <span class="token string">'Oct'</span><span class="token punctuation">,</span> <span class="token string">'Nov'</span><span class="token punctuation">,</span> <span class="token string">'Dec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> member <span class="token keyword">in</span> Month<span class="token punctuation">.</span>__members__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'=&gt;'</span><span class="token punctuation">,</span> member<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> member<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>value</code>属性则是自动赋给成员的<code>int</code>常量，默认从<code>1</code>开始计数</p></li><li><p>如果需要更精确地控制枚举类型，可以从<code>Enum</code>派生出自定义类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span> unique<span class="token decorator annotation punctuation">@unique</span> <span class="token comment">#@unique装饰器可以帮助我们检查保证没有重复值</span><span class="token keyword">class</span> <span class="token class-name">Weekday</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    Sun <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># Sun的value被设定为0</span>    Mon <span class="token operator">=</span> <span class="token number">1</span>    Tue <span class="token operator">=</span> <span class="token number">2</span>    Wed <span class="token operator">=</span> <span class="token number">3</span>    Thu <span class="token operator">=</span> <span class="token number">4</span>    Fri <span class="token operator">=</span> <span class="token number">5</span>    Sat <span class="token operator">=</span> <span class="token number">6</span><span class="token keyword">print</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span>Mon<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span>Tue<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。</p></li></ol><h3 id="五、元类"><a href="#五、元类" class="headerlink" title="五、元类"></a>五、元类</h3><ol><li><p><code>type()</code>函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过<code>type()</code>函数创建出<code>Hello</code>类，而无需通过<code>class Hello(object)...</code>的定义：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 先定义函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s.'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>Hello <span class="token operator">=</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>hello<span class="token operator">=</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 创建Hello class</span>h <span class="token operator">=</span> Hello<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Hello, world.</span>h<span class="token punctuation">.</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>Hello<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要创建一个class对象，<code>type()</code>函数依次传入3个参数：</p><ul><li>class的名称；</li><li>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</li><li>class的方法名称与函数绑定，这里我们把函数<code>fn</code>绑定到方法名<code>hello</code>上。</li></ul></li><li><p><code>metaclass</code>，直译为元类，简单的解释就是：</p><p>当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。</p><h3 id="真叫人头大"><a href="#真叫人头大" class="headerlink" title="真叫人头大"></a><strong>真叫人头大</strong></h3></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 面向对象编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（五）</title>
      <link href="/2022/03/26/python5/"/>
      <url>/2022/03/26/python5/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象编程-OOP"><a href="#面向对象编程-OOP" class="headerlink" title="面向对象编程(OOP)"></a>面向对象编程(OOP)</h2><ol><li><p>OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p></li><li><p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p></li><li><p>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p></li><li><p>面向对象的设计思想是抽象出Class，根据Class创建Instance。</p><p>面向对象的抽象程度比函数要高，因为一个Class既包含数据，又包含操作数据的方法。</p></li><li><p><strong>数据封装、继承和多态是面向对象的三大特点。</strong></p></li></ol><h3 id="一、类和实例"><a href="#一、类和实例" class="headerlink" title="一、类和实例"></a>一、类和实例</h3><ol><li><p>以Student类为例，类名通常是大写开头，紧接着是(object)，表示该类是从哪个类继承下来的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>sq <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>sq<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'guluyu'</span> <span class="token comment"># 可以自由地给一个实例变量绑定属性。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p></li><li><p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但self不需要传，Python解释器自己会把实例变量传进去：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">haha <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'niuwa'</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self，并且调用时，不用传递该参数。</strong></p></li><li><p>面向对象编程的一个重要特点就是<code>数据封装</code>。</p><p>上例中Student类内部拥有数据，要访问这些数据，不必从外面的函数去访问，而是直接在内部定义访问数据的函数，这样就把这些数据<strong>封装</strong>起来了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score            <span class="token keyword">def</span> <span class="token function">pr_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span>haha <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'niuwa'</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span>haha<span class="token punctuation">.</span>pr_score<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>sq <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>sq<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'guluyu'</span>ls <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>ls<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、访问限制"><a href="#二、访问限制" class="headerlink" title="二、访问限制"></a>二、访问限制</h3><ol><li><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>就变成了一个私有变量（private），只有内部可以访问，外部不能访问。</p></li><li><p>如果外部代码要获取内部变量，可以在类中增加get函数，如果想修改可以增加set函数。用这种方法的原因是在方法中可以对参数做检查，避免传入无效的参数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score            <span class="token keyword">def</span> <span class="token function">pr_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__score<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name        <span class="token keyword">def</span> <span class="token function">get_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__score        <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'bad score'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>__xxx__</code>是特殊变量，可以直接访问的，不是private变量。</p></li></ol><h3 id="三、继承和多态"><a href="#三、继承和多态" class="headerlink" title="三、继承和多态"></a>三、继承和多态</h3><ol><li><p>在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p></li><li><p>子类获得了父类的全部功能，子类也可以增加方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span>   dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Animal is running...</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># Cat is running...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>继承的另一个好处：多态</p></li><li><p>在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 编写一个函数，这个函数接受一个Animal类型的变量</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> run_twice<span class="token punctuation">(</span>cat<span class="token punctuation">)</span> <span class="token comment"># Cat is running...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新增一个Animal的子类，不必对run_twice()做任何修改，实际上，任何依赖Animal作为参数的函数或者方法都可以不加修改地正常运行。</p></li><li><p>调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的<strong>开闭</strong>原则，即对扩展开放：允许新增Animal子类；对修改封闭：不需要修改依赖Animal类型的run_twice()等函数。</p></li><li><p>继承树</p><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202305041137921.png" alt="image-20230504113709797" style="zoom:50%;"></li><li><p>静态语言和动态语言</p><ul><li><p>对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。</p></li><li><p>对于Python这样的动态语言来说，则不一定需要传入Animal类型。只需要保证传入的对象有一个run()方法就可以了。</p></li></ul><p>动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p></li></ol><h3 id="四、获取对象信息"><a href="#四、获取对象信息" class="headerlink" title="四、获取对象信息"></a>四、获取对象信息</h3><ol><li><p><code>type()</code>函数返回对应的Class类型。</p></li><li><p>要判断class的类型，可以使用<code>isinstance()</code>函数。</p></li><li><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">)</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'ab'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token keyword">import</span> types<span class="token builtin">type</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> types<span class="token punctuation">.</span>LambdaTypea <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 判断一个变量是否是某些类型中的一种</span><span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>优先使用<code>isinstance()</code>判断类型。</p></li></ol><h3 id="五、实例属性和类属性"><a href="#五、实例属性和类属性" class="headerlink" title="五、实例属性和类属性"></a>五、实例属性和类属性</h3><ol><li>实例属性优先级比类属性高，不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</li><li>实例属性属于各个实例所有，互不干扰。</li><li>类属性属于类所有，所有实例共享一个属性。</li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 面向对象编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda函数</title>
      <link href="/2022/03/25/lambda-han-shu/"/>
      <url>/2022/03/25/lambda-han-shu/</url>
      
        <content type="html"><![CDATA[<ol><li><p><code>匿名函数lambda</code>是指一类无需定义标识符（函数名）的函数或子程序。</p></li><li><p>lambda 函数可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值。</p><blockquote><p>lambda [arg1 [,arg2,…..argn]]:expression</p></blockquote></li><li><p>将lambda函数赋值给一个变量，通过这个变量间接调用该lambda函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y <span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将lambda函数作为参数传递给其他函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DIGITS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> DIGITS<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将lambda函数作为其他函数的返回值，返回给调用者。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y <span class="token comment"># 返回一个加法函数</span><span class="token comment"># 此时lambda函数实际上是定义在某个函数内部的函数，称之为嵌套函数，或者内部函数。对应的，将包含嵌套函数的函数称之为外部函数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>内部函数能够访问外部函数的局部变量，这个特性是闭包(Closure)编程的基础。</strong></p></li><li><p>将lambda函数赋值给其他函数，从而将其他函数用该lambda函数替换。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 屏蔽(Mock)标准库time中的函数sleep，可在程序初始化时调用：</span>time<span class="token punctuation">.</span>sleep <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token boolean">None</span><span class="token comment"># 之后调用</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">#程序不会休眠3秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将<code>if...else...</code>语句缩减为单一的条件表达式。语法为：expression1 if A else expression2</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">"yes"</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token string">"no"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda函数 </tag>
            
            <tag> 高阶函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（四）</title>
      <link href="/2022/03/19/python4/"/>
      <url>/2022/03/19/python4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>函数是Python内建支持的一种封装，通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种<strong>分解</strong>可以称之为<strong>面向过程的程序设计</strong>。函数就是面向过程的程序设计的基本单元。</p></blockquote><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ol><li>函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。</li><li>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数。</li><li>Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。</li></ol><h3 id="一、高阶函数"><a href="#一、高阶函数" class="headerlink" title="一、高阶函数"></a>一、高阶函数</h3><ol><li><p>高阶函数（Higher-order function）：</p></li><li><p>函数本身也可以赋值给变量，即：变量可以指向函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span>f<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>函数名也是变量，函数名其实就是指向函数的变量。</p></li><li><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>y<span class="token punctuation">)</span>a <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">)</span><span class="token comment"># 参数x，y和f分别接收-5，6和abs</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment"># 11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> xr <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token builtin">list</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment"># map()传入的第一个参数是f，即函数对象本身。由于结果r是一个Iterator，Iterator是惰性序列，因此通过list()函数让它把整个序列都计算出来并返回一个list。</span>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token comment"># map()作为高阶函数，事实上它把运算规则抽象了</span><span class="token comment"># 计算任意复杂的函数，比如，把这个list所有数字转为字符串：</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>reduce</code>把一个函数作用在一个序列[x1,x2,x3,…]上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 效果：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1,x2) ,x3), x4)</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token builtin">reduce</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 求和可以直接用sum()</span><span class="token comment"># 把序列[1, 3, 5, 7, 9]变换成整数13579</span><span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 把str转换为int的函数</span><span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    digits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> digits<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> <span class="token string">'246'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 整理成一个str2int的函数</span>DIGITS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y    <span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> DIGITS<span class="token punctuation">[</span>s<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>str2int<span class="token punctuation">(</span><span class="token string">'13579'</span><span class="token punctuation">)</span><span class="token comment"># 用lambda函数进一步简化</span>DIGITS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> DIGITS<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token builtin">map</span><span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>filter()</code>函数用于过滤序列，接收一个函数和一个序列，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1.在一个list中，删掉偶数，只保留奇数。</span><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># [1, 3, 5, 7, 9]</span><span class="token comment"># 2.删除一个序列中的空字符</span><span class="token keyword">def</span> <span class="token function">not_empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s <span class="token keyword">and</span> s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>not_empty<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'  '</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># ['A', 'b', 'C']</span><span class="token comment"># strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</span>str1<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'h'</span><span class="token punctuation">)</span> <span class="token comment">#删除str1中首尾的h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用<code>埃氏筛法</code>求素数。埃拉托斯特尼筛法：要得到自然数n以内的全部素数，必须把不大于根号n的所有素数的倍数剔除，剩下的就是素数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> primes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token comment"># 输出1000以内的素数</span><span class="token keyword">def</span> <span class="token function">_odd_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#构造从3开始的奇数序列</span>    n <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">2</span>        <span class="token keyword">yield</span> n<span class="token keyword">def</span> <span class="token function">_not_divisible</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义筛选函数</span>    <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#定义生成器不断返回下一个素数</span>    <span class="token keyword">yield</span> <span class="token number">2</span>    it <span class="token operator">=</span> _odd_iter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#初始序列</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token keyword">yield</span> n        it <span class="token operator">=</span> <span class="token builtin">filter</span><span class="token punctuation">(</span>_not_divisible<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span>    <span class="token comment">#这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span> <span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>filter()</code>的作用是从一个序列中筛出符合条件的元素。</p></li><li><p><code>sorted()函数</code>排序算法，是一个高阶函数，关键在于实现一个映射函数。它还可以接收一个<code>key</code>函数来实现自定义的排序。key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。</p></li><li><p>要进行反向排序，不必改动key函数，可以传入第三个参数<code>reverse=True</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">abs</span><span class="token punctuation">)</span> <span class="token comment"># 按绝对值大小排序</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NUS'</span><span class="token punctuation">,</span> <span class="token string">'GLY'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Dau'</span><span class="token punctuation">,</span><span class="token string">'bob'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#字符串排序，依次比较ASCII码值</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NUS'</span><span class="token punctuation">,</span> <span class="token string">'GLY'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Dau'</span><span class="token punctuation">,</span><span class="token string">'bob'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">)</span> <span class="token comment"># 排序忽略大小写，可将字符串都改为大写或小写</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NUS'</span><span class="token punctuation">,</span> <span class="token string">'GLY'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Dau'</span><span class="token punctuation">,</span><span class="token string">'bob'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 反向排序</span><span class="token keyword">from</span> operator <span class="token keyword">import</span> itemgetterstudents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Bart'</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Lisa'</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> t<span class="token punctuation">:</span> t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>students<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、返回函数"><a href="#二、返回函数" class="headerlink" title="二、返回函数"></a>二、返回函数</h3><ol><li><p>函数作为返回值，高阶函数可以接收函数作为参数，也可以把函数作为一个返回值。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>            s <span class="token operator">=</span> s <span class="token operator">+</span> i        <span class="token keyword">return</span> s    <span class="token keyword">return</span> addf <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内部函数可以引用外部函数的参数和局部变量，上例中sum返回函数add时，相关参数和变量都保存在返回函数中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f1 <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1 <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token comment"># False</span><span class="token comment"># 每次调用都会返回一个新的函数，即使传入相同的参数，f1()和f()的调用结果互不影响。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>闭包</code>：在Python中，闭包也被称为闭包函数或者闭合函数，与局部函数类似，不同之处在于，闭包中外部函数返回的不是一个具体的值，而是一个函数。一般情况下，返回的函数会赋值给一个变量，这个变量可以在后面被继续执行调用。</p></li><li><p>返回闭包时：<strong>返回函数不要引用任何循环变量，或者后续会发生变化的变量</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> i <span class="token operator">*</span> i        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> fsf1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span>f3<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 全部都是9 返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若要引用循环变量，再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j<span class="token operator">*</span>j        <span class="token keyword">return</span> g    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># f(i)立刻被执行，因此i的当前值被传入f()</span>    <span class="token keyword">return</span> fsf1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 4</span><span class="token keyword">print</span><span class="token punctuation">(</span>f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 9 缺点是代码较长，可利用lambda函数缩短代码。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用闭包时，内层函数对外层变量赋值前，需要先使用nonlocal声明该变量不是当前函数的局部变量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#局部函数fn()和局部函数引用到的函数外的x形成一个整体，构成了闭包</span>    x <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">nonlocal</span> x        x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> x    <span class="token keyword">return</span> fnf <span class="token operator">=</span> inc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>闭包的记忆功能，在 Python 中，被捕获到闭包中的变量让闭包本身拥有了记忆效应，闭包中的逻辑可以修改闭包捕获的变量，变量会跟随闭包生命期一直存在，闭包本身就如同变量一样拥有了记忆功能。</p></li><li><p>闭包就是一个函数和与其相关的引用环境组合的一个整体。</p></li></ol><h3 id="三、匿名函数"><a href="#三、匿名函数" class="headerlink" title="三、匿名函数"></a>三、匿名函数</h3><ol><li>关键字<code>lambda</code>表示匿名函数，冒号前面的<code>x</code>表示函数参数。</li><li>不必担心函数名冲突。</li><li>在传入函数时，有时不需要显式地定义函数，直接传入匿名函数更方便。</li></ol><h3 id="四、装饰器"><a href="#四、装饰器" class="headerlink" title="四、装饰器"></a>四、装饰器</h3><ol><li>在代码运行期间动态增加功能的方式，称之为<strong>装饰器</strong>（Decorator）。</li><li>在面向对象（OOP）的设计模式中，decorator被称为装饰模式。OOP的装饰模式需要通过继承和组合来实现，而Python除了能支持OOP的decorator外，直接从语法层次支持decorator。Python的decorator可以用函数实现，也可以用类实现。</li><li>decorator可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便。</li></ol><h3 id="五、偏函数"><a href="#五、偏函数" class="headerlink" title="五、偏函数"></a>五、偏函数</h3><ol><li><p>偏函数（Partial function）：通过设定参数的默认值，可以降低函数调用的难度。</p></li><li><p><code>functools.partial</code>创建一个偏函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> functoolsint2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>int2<span class="token punctuation">(</span><span class="token string">'10101100'</span><span class="token punctuation">)</span>int16 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>int16<span class="token punctuation">(</span><span class="token string">'20'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> python </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2022/03/06/cpp/"/>
      <url>/2022/03/06/cpp/</url>
      
        <content type="html"><![CDATA[<ol><li><p>泛型编程强调的是独立于特定的数据类型。</p></li><li><p>C++是C语言的超集。</p></li><li><p>动态链接库 DLL(<strong>Dynamic Linker Library</strong>)：可以把DLL看做是一个仓库，它提供了一些可以直接拿来用的变量，函数或者类（但是不建议从DLL中获取变量），在历史的发展中，仓库经历了从“无库 - 静态链接库 - 动态链接库”的时代。静态链接库(.lib)和动态链接库(.dll)都是共享代码的方式。如果采用了静态链接库，则无论你愿不愿意lib中的代码指令都被直接包含进了最终生成的.exe程序中。但若是使用了动态链接库，该DLL则不会被包含进.exe程序中，当.exe程序执行的时候，再“动态”的来引用或者卸载DLL。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt; //预处理器将iostream文件的内容添加到程序中（预处理操作：在源代码被编译之前，替换或添加文本）using namespace std;//输入输出工具cin/cout//若不加上句，则如下：std::cin &gt;&gt; n;std::cout &lt;&lt; n &lt;&lt; std::endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>命名空间<strong>namespace</strong>同名时，命名空间::名称来区分。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">//当包含多个命名空间时,用如下声明using std::cout;using std::endl;using std::cin;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插入运算符&lt;&lt;与按位左移运算符&lt;&lt;属于运算符的重载。</p></li><li><p>控制符endl：重起一行。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cmath&gt;cout &lt;&lt; endl;//cout &lt;&lt; "\n";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>函数声明：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void simon(int n);  //函数声明int stonetolb(int sts);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>面向对象编程(OOP)的本质是设计并扩展自己的数据类型。</p></li><li><p>变量名字母数字下划线，数字不做第一个字符，区分大小写，不能使用关键字，不限长，多个下划线保留使用。</p></li><li><p><strong>类型占字节</strong></p><ul><li>short 至少16位，</li><li>int 至少与 short 一样长，</li><li>long 至少32位，且至少与 int 一样长，</li><li>longlong 至少64位，且至少与 long 一样长。</li></ul></li><li><p>符号常量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;climits&gt;</span> <span class="token comment">//limits.h 最大最小值</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>sizeof 是运算符，可查看类型或变量所占用的字节数，类型名需放在括号中，变量均可。</p></li><li><p>赋值，可用圆括号形式赋值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">emus</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> emm<span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> emn <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> rocs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//赋0</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> sue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第一位是0，第二位为1~7位8进制，0x为16进制。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> cheat <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token keyword">int</span> waist <span class="token operator">=</span> <span class="token number">0x42</span><span class="token punctuation">;</span><span class="token keyword">int</span> inseam <span class="token operator">=</span> <span class="token number">042</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cheat = "</span> <span class="token operator">&lt;&lt;</span> cheat <span class="token operator">&lt;&lt;</span><span class="token string">" in dec."</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"waist = "</span> <span class="token operator">&lt;&lt;</span> waist <span class="token operator">&lt;&lt;</span><span class="token string">" in hex."</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"inseam = "</span> <span class="token operator">&lt;&lt;</span> inseam <span class="token operator">&lt;&lt;</span><span class="token string">" in oct."</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> hex<span class="token punctuation">;</span><span class="token comment">//十六进制打印</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cheat = "</span> <span class="token operator">&lt;&lt;</span> cheat <span class="token operator">&lt;&lt;</span><span class="token string">" in hex."</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> dec<span class="token punctuation">;</span><span class="token comment">//十进制打印</span>cout <span class="token operator">&lt;&lt;</span> oct<span class="token punctuation">;</span><span class="token comment">//八进制打印</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>数组赋值</strong></p><ul><li><p>只有在定义数组时才可以初始化，此后可以用下标分别给数组元素赋值，</p></li><li><p>不能将一个数组赋值给另一个数组，</p></li><li><p>初始化数组时提供的元素可以少于数组元素数目。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">long total[500] = {0};//初始化为0{}short things[] = {1, 5, 8};//数组有3个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>字符串以空字符结尾</strong>，空字符被写作\0，其ASCII码为0。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> dog<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'b'</span><span class="token punctuation">,</span><span class="token char">' '</span><span class="token punctuation">,</span><span class="token char">'c'</span><span class="token punctuation">,</span><span class="token char">'e'</span><span class="token punctuation">,</span><span class="token char">'I'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//字符数组</span><span class="token keyword">char</span> cat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'c'</span><span class="token punctuation">,</span><span class="token char">'f'</span><span class="token punctuation">,</span><span class="token char">'s'</span><span class="token punctuation">,</span><span class="token char">'\0'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">//字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>字符数组初始化为字符串，只需使用一个用引号括起的字符串即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> bird<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mr. Cheeps"</span><span class="token punctuation">;</span><span class="token comment">//隐式的包括结尾的空字符</span><span class="token keyword">char</span> fish<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Bubbles"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>字符串常量与字符常量</strong></p><table><thead><tr><th align="center"></th><th align="center">字符常量</th><th align="center">字符串常量</th></tr></thead><tbody><tr><td align="center">形式</td><td align="center">单引号引起的一个字符，’S’</td><td align="center">双引号引起的若干字符，”S”表示字符S和\0</td></tr><tr><td align="center">含义</td><td align="center">相当于一个整型值，可参加表达式运算</td><td align="center">表示字符串所在的内存地址</td></tr><tr><td align="center"></td><td align="center">字符常量可以赋值给字符变量，char b=’a’</td><td align="center">字符串常量不能赋值给字符变量</td></tr><tr><td align="center">占内存</td><td align="center">占一字节</td><td align="center">若干字节，至少一个字符结束标志</td></tr></tbody></table><p>strlen()计算字符串长度时不计入结束字符。</p></li><li><p>cin将空白字符（空格、换行、制表）作为结束符（忽略空白字符）。</p></li><li><p>istream中的类（如cin）提供了一些面向行的类成员函数：<code>getline()</code>和<code>get()</code>，每次读取一行字符串输入：<strong>getline()，丢弃换行符；get()换行符保留在输入序列中</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment">/* 最多读19个字符，余下空间存储自动在结尾处添加的空字符，读取指定数目的字符或遇到换行符时停止两个参数，第一个存储输入行的数组的名称，第二个是要读取的字符数 */</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//name为字符数组</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name2<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a problem</span><span class="token comment">//由于第一次调用后换行符留在输入队列中，因此第二次调用时看到的第一个字符便是换行符。因此get()认为已到达行尾。</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//单个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不带任何参数的<code>cin.get()</code>调用可读取下一个字符（即使是换行符）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数字和字符串交替输入时，用cin.get()消耗掉回车符</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name2<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另一种是将两个类成员函数拼接起来（合并）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>Arsize<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cin.get(name,Arsize)返回一个cin对象，该对象随后用来调用get()函数。</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> year<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*cin &gt;&gt; year;cin.get();*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>函数重载</strong>：函数名相同，函数的参数不同。</p></li><li><p><strong>string类</strong>：提供了一种将字符串作为一种数据类型的表示方法，而不是字符数组来存储字符串。</p><ul><li><p>要使用string类，必须在程序中包含头文件string，</p></li><li><p>string类位于名称空间std中，</p></li><li><p>使用string对象的方式与使用字符数组的方式相同，</p></li><li><p>可以使用cin来将键盘输入存储到string对象中，cout来显示string对象，</p></li><li><p>数组表示法来访问存储在string对象中的字符。</p><ul><li><p>主要区别：可以将string对象声明为简单变量，而不是数组</p></li><li><p>类设计让程序能够自动处理string的大小，方便安全</p></li></ul></li><li><p>赋值：可以将string对象赋值给另一个string对象，而字符数组不可以互相赋值</p></li><li><p>拼接：可以用运算符+将两个string对象合并起来，+=将字符串附加到string对象末尾</p></li></ul></li><li><p>string的其他操作：c++新增string类之前，使用c语言库中的函数来完成C-风格字符串的操作，头文件cstring（以前为string.h）提供了这些函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">strcpy</span><span class="token punctuation">(</span>char1<span class="token punctuation">,</span> char2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//copy char2 to char1字符数组赋值</span><span class="token function">strcat</span><span class="token punctuation">(</span>char1<span class="token punctuation">,</span> char2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//append contents of char2 to char1追加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>string类I/O</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> charr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>charr<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//istream中cin类提供的成员函数</span><span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>charr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//==================================================//</span>string str<span class="token punctuation">;</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//string类的方法</span><span class="token keyword">int</span> len2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结构体struct：同一结构可以存储多种数据类型的数据</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">inflatable</span><span class="token comment">//声明结构体类型</span><span class="token punctuation">{</span><span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//std::string name;</span>    <span class="token keyword">float</span> volume<span class="token punctuation">;</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">student</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> weight<span class="token punctuation">;</span>    <span class="token keyword">double</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span> infor <span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"guluyu"</span><span class="token punctuation">,</span>    <span class="token number">56.5</span><span class="token punctuation">,</span>    <span class="token number">178.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//结构体对象/变量，也可创建结构体时创建结构体对象并初始化</span>inflatable guest <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Glorious Gloria"</span><span class="token punctuation">,</span><span class="token number">1.88</span><span class="token punctuation">,</span><span class="token number">29.99</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//C++允许在声明结构变量时省略关键字struct</span>guest<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">//通过成员名可以访问结构的成员</span>guest<span class="token punctuation">.</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>inflatable choice <span class="token operator">=</span> guest<span class="token punctuation">;</span><span class="token comment">//结构体可以用赋值运算符初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>C++推荐使用局部变量，外部（全局）结构体。</p></li><li><p>结构数组：数组中的每个元素都是结构体。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">student informantion<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span>    <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token string">"gulu"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"fish"</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span> <span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> informantion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" is "</span> <span class="token operator">&lt;&lt;</span> informantion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">&lt;&lt;</span> <span class="token string">" cm and "</span> <span class="token operator">&lt;&lt;</span> informantion<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">&lt;&lt;</span> <span class="token string">" kg."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>c++位字段允许指定占用特定位数的结构成员，用于硬件寄存器数据结构的创建。</p></li><li><p>共用体/联合体（union）可以存储不同的数据类型，但只能同时存储一种数据类型，共用内存空间，长度为其最大成员的长度。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">union</span> one2all<span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//共用体占四字节，取大</span><span class="token punctuation">}</span><span class="token punctuation">;</span>one2all num<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(num) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>num<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num.ch = "</span> <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">.</span>ch <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>枚举：可进行连续多个的符号常量赋值，代替const 。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">enum</span> <span class="token class-name">spectrum</span><span class="token punctuation">{</span>red<span class="token punctuation">,</span> orange<span class="token punctuation">,</span> yellow<span class="token punctuation">,</span> green<span class="token punctuation">,</span> blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//spectrum为新类型名,内容为符号常量，依次为0~4</span>spectrum band<span class="token punctuation">;</span>band <span class="token operator">=</span> blue<span class="token punctuation">;</span><span class="token keyword">int</span> color <span class="token operator">=</span> blue<span class="token punctuation">;</span><span class="token comment">//枚举型可提升为int型。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>指针</strong>存储值的地址，指针名表示地址。</p></li><li><p><code>*运算符</code>被称为间接值或解除引用运算符，取值运算符。&amp;取址运算符。</p></li><li><p>指针的危险： 在对指针的内容修改之前，一定要将指针初始化为一个确定的、适当的地址。</p></li><li><p>内存分配：new运算符，返回开辟空间的首地址。指针可在运行阶段分配未命名的内存以存储值。</p></li><li><p>为一个数据对象获得并指定分配内存的通用格式：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">typeName <span class="token operator">*</span>point_name <span class="token operator">=</span> <span class="token keyword">new</span> typeName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>new分配的内存块通常与常规变量声明分配的内存块不同，常规都存储在栈中，而new从被称为堆或者自由存储区的内存区域分配内存。</p></li><li><p>new可能会导致内存被耗尽，可以使用delete释放内存。delete和new要配对使用，否则内存泄漏，不可以释放已经释放的内存块，不能使用delete释放声明变量所获得的内存。 </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">delete</span> ps<span class="token punctuation">;</span><span class="token comment">//只是释放ps指向的内存，并不会删除指针ps本身</span><span class="token keyword">int</span> <span class="token operator">*</span>psome <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用new创建动态数组</span><span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> psome<span class="token punctuation">;</span><span class="token comment">//释放整个数组,如果不加方扩号只释放指针指向的第一个元素，即首元素（不可以）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>new</code>和<code>delete</code>时，遵守规则：</p><ul><li><p>不要使用delete来释放不是new分配的内存</p></li><li><p>不要使用delete释放同一个内存块两次</p></li><li><p>如果使用new[ ]为数组分配内存，则应该使用delete[ ]来释放</p></li><li><p>如果使用new[ ]为一个实体分配内存，则应使用delete(没有方括号)来释放内存</p></li><li><p>对空指针应用delete是安全的</p></li></ul></li><li><p>指针和动态数组基本等价：指针算术和C++内部处理数组的方式。将指针变量加1后，其增量的值等于指向的类型占用的字节数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span>p3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>p3 <span class="token operator">=</span> p3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//指针可以，数组不可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果cout输出指针，将打印它的地址，但如果指针类型为char*，则cout将显示指向的字符串。如果要显示字符串的地址，则必须将这种指针强制转换为另一种指针类型。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> animal<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bear"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> bird <span class="token operator">=</span> <span class="token string">"wren"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span> ps <span class="token operator">=</span> animal<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> animal <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> bird <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> animal <span class="token operator">&lt;&lt;</span> <span class="token string">" at "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> animal <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ps <span class="token operator">&lt;&lt;</span> <span class="token string">" at "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> ps <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>应使用strcpy()或strncpy()，而不是赋值运算符来给字符串赋给数组。</p></li><li><p>自动存储、静态存储、动态存储、线性存储</p></li><li><p>模板类<code>vector</code>类似于string类，也是一种动态数组。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vi<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">vd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模板类<code>array</code>，长度固定使用栈（静态内存分配）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;array&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> ai<span class="token punctuation">;</span><span class="token comment">//固定</span>array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> ad <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">2.4</span><span class="token punctuation">,</span> <span class="token number">3.7</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当用字符数组接收时用<code>cin.getline(name, size);</code></p><p>当用string接收时用<code>getline(cin, str);</code></p></li><li><p>cout在显示bool之前将它们转换为int，但<code>cout.setf(ios::boolalpha)</code>函数调用设置了一个标记，该标记命令cout显示true和false，而不是1和0。</p></li><li><p><strong>递增/递减运算符和指针</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">21.1</span><span class="token punctuation">,</span> <span class="token number">32.8</span><span class="token punctuation">,</span> <span class="token number">23.4</span><span class="token punctuation">,</span> <span class="token number">45.2</span><span class="token punctuation">,</span> <span class="token number">37.4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token operator">*</span>pt <span class="token operator">=</span> arr<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*++pt = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token operator">++</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//前缀递增/递减与取值运算符*优先级相同，优先级一样时从右到左,32.8</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"++*pt = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span><span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//33.8</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(*pt)++ = "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>pt<span class="token punctuation">)</span><span class="token operator">++</span> <span class="token comment">//后缀，先括号，取出32.8(上述表达式已将指针后移)，再执行++,33.8</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", *pt = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//后++，34.8</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"*pt++ = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt<span class="token operator">++</span> <span class="token comment">//后缀优先级优于前缀,先取出*pt值，然后pt++是加在地址上,34.8</span><span class="token operator">&lt;&lt;</span> <span class="token string">", *pt = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//23.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>关系运算符的优先级比算数运算符的低。</p></li><li><p>C++为类型建立别名的方式有两种</p><ul><li>预处理器：不能声明一系列变量 <code>#define BYTE char</code> </li><li><code>typedef typeName aliasName</code></li></ul></li><li><p>基于范围的for循环(C++11)，对数组（或容器类，如vector和array）的每个元素执行相同的操作。</p></li><li><p>头文件iostream将cin.get(ch);的参数声明为<code>引用类型</code>，因此可以修改其参数的值。</p></li><li><p>文件尾条件——检测文件尾(EOF)</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment">//cin.fail()为true时文件结束，判断输入是否结束,win下ctrl+Z，unix为ctrl+D</span><span class="token comment">//cin.clear();可以清楚EOF标记，使以后输入继续进行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>变量写在右侧，常量写在左侧更佳</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">==</span> myNumber<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>逻辑运算符</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">逻辑与运算符。两个操作数都 true，则条件为 true</td><td align="center">(A &amp;&amp; B) 为false</td></tr><tr><td align="center">||</td><td align="center">逻辑或运算符。两个操作数中有任意一个 true，则条件为 true，左为真则不判断右</td><td align="center">(A ||B) 为 true</td></tr><tr><td align="center">!</td><td align="center">逻辑非运算符。用来逆转操作数的逻辑状态，条件为 true 则将使其为 false</td><td align="center">!(A &amp;&amp; B) 为 true</td></tr></tbody></table></li><li><p><code>cctype</code>中的字符函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cctype&gt;</span><span class="token comment">/* C++从C语言中继承了一个与字符相关的函数库(cctype)，它可以确定字符是否为大写或小字母、数字、标点符号等工作，这些函数包含在以下头文件中*/</span></span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">bool</span> yes <span class="token operator">=</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303300148244.png" alt="image-20230306114141188"></p></li><li><p>条件运算符<code>?:</code></p></li><li><p>输入内容和类型不匹配：</p><ul><li><p>n的值保持不变</p></li><li><p>不匹配的输入将被留在输入队列中</p></li><li><p>cin对象中的一个错误标记被设置</p></li><li><p>对cin方法的调用将返回false</p></li></ul> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重置错误输入标记，同时也重置EOF条件</span><span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消耗输入队列中的错误内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>简单文件的输入/输出</code></p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fstream&gt;</span>   <span class="token comment">//1.头文件 ofstream      ifstream </span></span>ofstream outFile<span class="token punctuation">;</span>   <span class="token comment">//2.创建输出流对象</span><span class="token comment">//输出流对象用法同cout</span>outFile <span class="token operator">&lt;&lt;</span> fixed<span class="token punctuation">;</span><span class="token comment">//小数</span>outFile<span class="token punctuation">.</span><span class="token function">precision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两位精度</span>outFile<span class="token punctuation">.</span><span class="token function">setf</span><span class="token punctuation">(</span>ios_base<span class="token double-colon punctuation">::</span>showpoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示小数点后0</span>outFile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"carinfo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.将对象和文件关联起来,文件路径</span>outFile <span class="token operator">&lt;&lt;</span> <span class="token string">"Make and model: "</span> <span class="token operator">&lt;&lt;</span> automobile <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>ifstream inFile<span class="token punctuation">;</span><span class="token comment">//输入流</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>综合实例</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fstream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span><span class="token comment">//使用到exit()；</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> SIZE <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> filename<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    ifstream inFile<span class="token punctuation">;</span>    ofstream ouFile<span class="token punctuation">;</span>    ouFile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"score.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ouFile <span class="token operator">&lt;&lt;</span> <span class="token string">"350 360 380 408 292 319\n985 211 900"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter name of data file:"</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    inFile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>inFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//打开失败时</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Could not open the file "</span> <span class="token operator">&lt;&lt;</span> filename <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Program terminating."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Success open the txt file."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">double</span> value<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    inFile <span class="token operator">&gt;&gt;</span> value<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>inFile<span class="token punctuation">.</span><span class="token function">good</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取的数据是否可用</span>    <span class="token punctuation">{</span>        <span class="token operator">++</span>count<span class="token punctuation">;</span>        sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>        inFile <span class="token operator">&gt;&gt;</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>inFile<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读到文件末尾</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"End of file reached."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>inFile<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input terminated by data mismachted."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input terminated by unknow reason."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> count<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No data processed."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Items read: "</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum: "</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Average: "</span> <span class="token operator">&lt;&lt;</span> sum<span class="token operator">/</span>count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    inFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>C++编程模块</p><ul><li><p>函数传递成员变量时为其拷贝值，传递数组时为原来的数组。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> cookie<span class="token punctuation">[</span>ArSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> ArSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组名视为指针，解释为第一个元素的地址，对数组名sizeof得到整个数组的长度（字节）</span><span class="token comment">//为将数组类型和元素数量告诉数组处理函数</span><span class="token keyword">int</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组表示法</span><span class="token keyword">int</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指针表示法</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span>cookie<span class="token punctuation">,</span> cookie<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//区间的方式</span><span class="token keyword">int</span> <span class="token function">sum_arr</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>begin<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>end<span class="token punctuation">)</span><span class="token comment">//第一个与最后一个的后一个位置</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">*</span><span class="token punctuation">(</span>arr <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr <span class="token operator">+</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为使操作不修改原数组，可使用<code>const</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">show_array</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pt<span class="token punctuation">;</span><span class="token comment">//read-only,pt指针的指向可自定义，但不能通过这个指针修改所指的内容</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> pt<span class="token punctuation">;</span><span class="token comment">//可通过指针修改所指内容，但是不能更改指针的指向</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token keyword">const</span> pt<span class="token punctuation">;</span><span class="token comment">//指针只能指向一个变量，并不能通过该指针修改内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>二维数组和结构体：获取结构的地址，必须使用地址运算符&amp;，与数组不同，数组名即为首地址</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>ar2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//括号不可少，size为行，4为列</span><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> ar2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">polar</span><span class="token comment">//极坐标</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> distance<span class="token punctuation">;</span>    <span class="token keyword">double</span> angle<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>polar <span class="token function">rect_to_polar</span><span class="token punctuation">(</span>rect xypos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_polar</span><span class="token punctuation">(</span>polar dapos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">rect_to_polar</span><span class="token punctuation">(</span><span class="token keyword">const</span> rect <span class="token operator">*</span>xy<span class="token punctuation">,</span> polar <span class="token operator">*</span>pda<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_polar</span><span class="token punctuation">(</span><span class="token keyword">const</span> polar <span class="token operator">*</span>dapos<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>引用变量</p><p>用途：作为函数参数，结构和对象参数，不可以是常量；</p><p>必须在声明引用变量时进行初始化；</p><p>如何实参和引用参数不匹配，C++将生成临时变量，仅当参数为const引用时才可以。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> rats<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span> rodents <span class="token operator">=</span> rats<span class="token punctuation">;</span><span class="token comment">//这里&amp;不是地址运算符，而是类型标识符的一部分int &amp;是指向int的引用</span><span class="token comment">//上述声明允许将rats和rodents互换——它们指向相同的值和内存单元，相当于同一变量的两个名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>应尽可能使用const</p><ul><li>可以避免无意中修改数据的编程错误</li><li>使函数能够处理const和非const实参，否则将只能接收非const数据</li><li>使函数能够正确生成并使用临时变量</li></ul></li><li><p>继承：使得能够将特性从一个类传递给另一个类的语言特性叫做继承。</p><ul><li>派生类继承了基类的方法</li><li>基类引用可以指向派生类的对象而无需进行强制类型转换</li></ul></li><li><p>重载：重载声明是指一个与之前已经在该作用域内声明过的函数或方法具有相同名称的声明，但是它们的参数列表和定义（实现）不相同。</p><p>左值引用，可取地址；否则用const修饰作为常引用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//a为左值，10为右值</span><span class="token comment">//int &amp;c = 10;//invalid</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>c <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>C++11引入了右值引用，为了支持移动</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>函数模板：使用泛型来定义函数。</p><p>如此编写，但编译后最终仍将由独立的函数定义，可将函数模板放在头文件中。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> T b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//模板重载</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token comment">//typename = class</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    T temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++标准模板库</title>
      <link href="/2022/02/28/c-biao-zhun-ku/"/>
      <url>/2022/02/28/c-biao-zhun-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="C-STL库"><a href="#C-STL库" class="headerlink" title="C++ STL库"></a>C++ STL库</h2><h3 id="一、数据结构角度观测C-与C"><a href="#一、数据结构角度观测C-与C" class="headerlink" title="一、数据结构角度观测C++与C"></a>一、数据结构角度观测C++与C</h3><ol><li><p>C++是C的超集，也就是说C++是可以兼容C语言的，C++在C语言的基础上增加了许多的特性和概念。</p></li><li><p>头文件引用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//C语言的方法：带.h的方式进行include</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;math.h&gt;</span></span>  <span class="token comment">//C++的方法，直接引用即可</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span><span class="token comment">//C++引用C语言标准</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输入/输出：C++采用“流”的思路去进行输入输出设计，这样的做法可以大大简化我们的设计，但是这样的做法确是更慢。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment">//定义n为整形</span><span class="token comment">//C语言的输入输出（需要指定类型，如下指定为整形）</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//C++语言的输入输出（不需要指定类型，会根据n进行自主的判定）</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>STL：STL是Standard Template Library的简称，中文名标准模板库，惠普实验室开发的一系列软件的统称。</p></li><li><p>STL是一些“容器”与“算法”的集合，所谓的这些“容器”无非就是已经实现好了数据结构，能够让程序设计者更为方便的进行调用，“算法”则顾名思义就是已预先实现好了的算法集合。STL的目的是标准化组件，不用重新开发，可以使用现成的组件。STL现在是C++的一部分，因此不用安装额外的库文件。</p></li><li><p>在C++标准中，STL被组织为下面的13个头文件：<algorithm>、<deque>、<functional>、<iterator>、<vector>、<list>、<map>、<memory>、<numeric>、<queue>、<set>、<stack>和<utility>。</utility></stack></set></queue></numeric></memory></map></list></vector></iterator></functional></deque></algorithm></p></li></ol><h3 id="二、标准模板库"><a href="#二、标准模板库" class="headerlink" title="二、标准模板库"></a>二、标准模板库</h3><ol><li><p>容器（Container）：是一种数据结构，list（链表）、vector（向量数组）、stack（栈）、队列（queque），以模板类的方式提供，为了访问容器中的数据，可以使用由容器类输出的迭代器。</p></li><li><p>迭代器（Iterator）：是一种特殊的指针，提供了访问容器中的对象的方法，在程序设计中，扮演了容器和算法之间的胶合剂，利用迭代器可以快速而安全的对容器内容进行操作，或是进行算法模板的使用。</p></li><li><p>算法（Algorithm）：是一类常用的算法模板，既可以对容器进行操作，同时其开放性也让算法类本身可以针对数组或者是自定义结构体等结构进行直接的操作。</p></li><li><p>仿函数（Function object），（又称为函数对象，function object），是一种行为类似函数，重载了()操作符的结构体与类。</p></li><li><p>迭代适配器（Iterator Adaptor），一种用来修饰容器或者仿函数的接口，它使得得带适配器使算法能够以逆向模式，安插模式进行工作，甚至还可以与流配合，它对容器起到非常大的辅助作用，同时他还将迭代器进行了更高级别的抽象。</p></li><li><p>空间配制器（allocator），是负责空间的配置与管理，重点就是对容器的空间申请和空间释放进行管理，理解为C的malloc和free函数，C++的new和delete关键字。</p></li></ol><h3 id="三、Vector容器"><a href="#三、Vector容器" class="headerlink" title="三、Vector容器"></a>三、Vector容器</h3><ol><li><p>Vector就是一个动态创建空间，且预先加载了常用的数组操作的数组。</p></li><li><p>格式为：vector<data_types> name;</data_types></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token comment">//不带参数的构造函数初始化</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v1<span class="token punctuation">;</span><span class="token comment">//创建一个空的向量v1,size = 0</span><span class="token comment">//带参数的构造函数初始化</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">v2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//其已开辟10个元素的空间，double v2[10];</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//其已开辟10个元素的空间并全部赋值为5</span><span class="token comment">//通过insert初始化</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v4</span><span class="token punctuation">(</span>v3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//v4,其内容为向量v3的内容</span><span class="token comment">//insert初始化方式将同类型的迭代器对应的始末区间（左闭右开区间）内的值插入到vector中</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vecot<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> b<span class="token punctuation">;</span><span class="token comment">//将a[0]~a[2]插入到b中，b.size()由0变为3</span>b<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//insert也可通过数组地址区间实现插入</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> b<span class="token punctuation">;</span><span class="token comment">//将a的所有元素插入到b中，同样是左闭右开区间</span>b<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//insert还可以插入m个值为n的元素</span><span class="token comment">//在b开始位置处插入6个7</span>b<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过同类型的vector初始化</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v5</span><span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个向量v5，其包含了v4的全部内容</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//通过数组a的地址初始化，注意地址是从0到5（左闭右开区间）</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过copy函数赋值</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*将a中元素全部拷贝到b开始的位置中,注意拷贝的区间为a.begin() ~ a.end()的左闭右开的区间*/</span><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拷贝区间也可以是数组地址构成的区间</span><span class="token function">copy</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a1<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>迭代器：一种安全的访问控制器，它本身是一种指针，用于直接的元素访问。其遍历访问的大致思路是，创建容器的迭代器，让迭代器指向第一个元素，逐步向后移动并最终指向最后一个元素结束。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>       <span class="token comment">//创建一个向量vs</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span>   <span class="token comment">//C98标准</span><span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常用接口</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span><span class="token comment">//在向量的末尾添加一个新元素val，并自动让容器大小增大一个</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//插入一个数据10</span><span class="token comment">//移除向量尾的最后一个元素，并且将容器大小减小一个</span>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入元素到指定位置，通过在元素之前在指定位置插入新元素来扩展向量，从而有效地增加容器大小所插入的元素数量</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//在向量最前端插入数据10</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在向量最前端插入5个数据20</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">k</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建一个新的向量k,其拥有2个元素内容均为50</span> v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在向量v最前端插入向量K的全部内容</span><span class="token comment">//删除一个元素，或者是一段区间的元素，将会自动缩减空间使用</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//删除第一个元素</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除从第一个开始后4个元素（包括第一个）</span><span class="token comment">//将向量中所有元素清空</span>v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清空向量</span><span class="token comment">//返回向量中的数据元素个数</span>cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token comment">//输出5</span><span class="token comment">//返回向量最大已开辟的空间大小</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建默认有3个值为10的元素的向量v</span>v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在向量最前端插入10个值为20的数据</span>v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除从第一个开始后4个元素（包括第一个）</span>cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token comment">//输出13</span><span class="token comment">//返回计算机支持开辟vector的最大空间值，一般来说和计算机内存和CPU相关，是一个极大的数据，而且不同计算机中可能有不同的值</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建默认有5个值为10的元素的向量v</span>cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token comment">//输出4611686018427387903</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="四、List容器"><a href="#四、List容器" class="headerlink" title="四、List容器"></a>四、List容器</h3><ol><li><p>初始化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> l1<span class="token punctuation">;</span>           <span class="token comment">//创建一个空链表</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">l2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//创建一个链表其有10个空元素</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">l3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//创建一个链表其有5个元素内容为20</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">l4</span><span class="token punctuation">(</span>l3<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l3<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建一个链表其内容为l3的内容</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">l5</span><span class="token punctuation">(</span>l4<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//创建一个链表其内容为l4的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>迭代器</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> li<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>li<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token char">' '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常用接口</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> li<span class="token punctuation">;</span><span class="token comment">//判断是否为空empty()</span><span class="token comment">//返回一个bool类型的值，只存在真和假，当链表为空时为真，不为空时为假</span><span class="token keyword">if</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//当链表为空的时候执行</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"is empty()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"not empty()"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//获取大小size()，返回链表元素的个数</span>cout<span class="token operator">&lt;&lt;</span>li<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//链表前插入push_front() &amp;&amp;链表前删除 pop_front()</span>li<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>li<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//链表后插入push_back() &amp;&amp;链表后删除 pop_back()</span>li<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>li<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入元素到指定位置，通过在元素之前在指定位置插入新元素来扩展向量</span>li<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//在链表最前端插入数据10</span>li<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在链表最前端插入5个数据内容为20</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">k</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建一个新的链表k,其拥有2个元素内容均为50</span>li<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//在链表li最前端插入链表上K的全部内容</span><span class="token comment">//删除一个元素，或者是一段区间的元素，将会自动缩减空间使用</span>li<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//删除第一个元素</span>li<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除前4个元素</span><span class="token comment">//让整个链表变成升序状态，或者变成自定义的排序状态</span>li<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//升序</span>li<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//降序</span><span class="token comment">//相对于自定义的降序方法</span>li<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="五、stack栈容器"><a href="#五、stack栈容器" class="headerlink" title="五、stack栈容器"></a>五、stack栈容器</h3><ol><li><p>初始化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span><span class="token comment">//创建一个栈</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个栈为s的全部内容</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意，&gt; &gt;符号之间需要有一个空格隔开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常用接口</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token comment">//直接返回栈中元素的个数</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>     <span class="token comment">//直接返回输出即可</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+=</span><span class="token number">100</span><span class="token punctuation">;</span>            <span class="token comment">//也可以直接对栈定元素进行修改操作</span>s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5入栈</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判空</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="六、Queue容器"><a href="#六、Queue容器" class="headerlink" title="六、Queue容器"></a>六、Queue容器</h3><ol><li><p>初始化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span><span class="token comment">//创建一个空的没有数据的队列q</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个队列v其元素为q的全部内容</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token function">s</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内容就是vector数组的全部内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常用接口</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//100入队</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//出队</span><span class="token comment">//访问对头元素，可以返回其数值，也可以进行相应的操作</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token number">500</span><span class="token punctuation">;</span> <span class="token comment">//对队头元素进行修改</span>cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//直接输出内容</span><span class="token comment">//访问队尾元素，较为少用</span>q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+=</span><span class="token number">500</span><span class="token punctuation">;</span>     <span class="token comment">//对队尾元素进行修改</span>cout<span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判空</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="七、优先队列（Priority-queue）"><a href="#七、优先队列（Priority-queue）" class="headerlink" title="七、优先队列（Priority_queue）"></a>七、优先队列（Priority_queue）</h3><ol><li><p>优先队列的底层是以散列的状态（非线性）表现的，他与标准的队列有如下的区别，标准的队列遵从严格的先进先出，优先队列并不遵从标准的先进先出，而是对每一个数据赋予一个权值，根据当前队列权值的状态进行排序，使得权值最大（或最小）的永远排在队列的最前面。</p></li><li><p>初始化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span>priority_queue<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Container<span class="token punctuation">,</span> Compare<span class="token operator">&gt;</span>priority_queue<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token comment">//直接输入元素则使用默认容器和比较函数</span>a<span class="token punctuation">)</span> T就是Type为数据类型b<span class="token punctuation">)</span> Container是容器类型，（Container必须是用数组实现的容器，比如vector<span class="token punctuation">,</span>deque等等，但不能用 list。STL里面默认用的是vector）c<span class="token punctuation">)</span> Compare是比较方法，类似于sort第三个参数那样的比较方式，对于自定义类型，需要我们手动进行比较运算符的重载。与sort直接Bool一个函数来进行比较的简单方法不同，Compare需要使用结构体的运算符重载完成，直接<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">;</span> <span class="token punctuation">}</span> 这么写是无法通过编译的。    <span class="token keyword">struct</span> <span class="token class-name">cmp</span><span class="token punctuation">{</span> <span class="token comment">//这个比较要用结构体表示</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>cmp<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    <span class="token comment">//使用自定义比较方法</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pq<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="八、Set容器"><a href="#八、Set容器" class="headerlink" title="八、Set容器"></a>八、Set容器</h3><ol><li><p>Set（集合）属于关联式容器，依据特定的排序准则，自动为其元素排序。Set集合的底层使用一颗红黑树，其属于一种非线性的数据结构，每一次插入数据都会自动进行排序。</p></li><li><p>Set的性质有：数据自动进行排序且数据唯一，是一种集合元素，允许进行数学上的集合相关的操作。</p></li><li><p>初始化</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span> <span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span>                                   <span class="token keyword">class</span> <span class="token class-name">Compare</span> <span class="token operator">=</span> less<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span>                   <span class="token keyword">class</span> <span class="token class-name">Alloc</span> <span class="token operator">=</span> allocator<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>                 <span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">set</span><span class="token punctuation">;</span><span class="token comment">//基本上就是三个参数，第一个是值，第二个比较器，用于比较内容，默认为less&lt;Key&gt;即降序，第三个是内存配置器，负责内存的分配和销毁。</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>       <span class="token comment">//直接指定值的类型创建，其他为默认方法</span><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span><span class="token comment">//迭代器</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//直接返回元素个数</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//插入一个元素，插入元素的类型必须与创建的容器类型一致</span><span class="token comment">//删除一个元素，或者是一段区间的元素，将会自动缩减空间使用。</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//使用迭代器的方法删除第一个元素</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//删除一段内容，这里是全部删除</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里只是清空元素，其所占用的最大内存空间还是不会改变的。</span><span class="token comment">//查找元素find()</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（三）</title>
      <link href="/2022/01/19/python3/"/>
      <url>/2022/01/19/python3/</url>
      
        <content type="html"><![CDATA[<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="一、切片（Slice）"><a href="#一、切片（Slice）" class="headerlink" title="一、切片（Slice）"></a>一、切片（Slice）</h3><ol><li><p>取一个list或tuple的部分元素的操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 法一：若截断N个元素，该方法不好用</span><span class="token punctuation">[</span>L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> L<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 法二：循环</span>r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 0~n-1</span>    r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment"># 法三：切片操作符</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 0-2</span><span class="token comment"># 如果第一个索引是0，可以省略</span>L<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>L<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># 从1开始，取2个元素</span><span class="token comment"># 同样支持倒数切片</span>L<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># 倒数第2个到最后</span>L<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># -2到-1，不含-1</span>A <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#0-99的列表</span>A<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">#后10个数</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token comment">#前10个数</span>A<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token comment">#前11-20个数 10-19</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># 前10个数，每两个取一个</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment">#所有数，每5个取一个</span>A<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">#只写[:]就可以原样复制一个list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># (0, 1, 2)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># (2, 3, 4, 5)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># (0, 2, 4)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>字符串<code>'xxx'</code>也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'ABCDEFG'</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># 'ABC'</span><span class="token string">'ABCDEFG'</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># 'BDF'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="二、迭代"><a href="#二、迭代" class="headerlink" title="二、迭代"></a>二、迭代</h3><ol><li><p>Python中用<code>for...in...</code>来完成迭代，可以通过<code>for</code>循环来遍历<code>list</code>或<code>tuple</code>。</p></li><li><p>Python的for循环抽象程度要高于C的for循环，因为Python的for循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。</p></li><li><p>只要是可迭代对象，无论有无下标，都可以迭代，比如<code>dict</code>就可以迭代。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">:</span> <span class="token comment"># dict默认迭代key</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">for</span> value <span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># dict用values()可迭代访问value</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># dict同时迭代key和value</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">'ABCDEFG'</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如何判断一个对象是否是可迭代对象？可以通过<code>collections.abc</code>模块的<code>Iterable</code>类型判断。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token comment">#str是否可迭代 True</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token comment"># list是否可迭代 True</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token comment"># 整数不可迭代 False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对list实现下标循环，使用Python内置的<code>enumerate</code>函数，把一个list变成索引-元素对，就可以在for循环中同时迭代索引和元素本身</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token comment"># Python中可以在for循环引用多个变量</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>迭代查找一个list中的最大值和最小值，并返回一个tuple</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">fine_min_max</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token builtin">min</span> <span class="token operator">=</span> <span class="token builtin">max</span> <span class="token operator">=</span> li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> n <span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>                <span class="token builtin">max</span> <span class="token operator">=</span> i            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token builtin">min</span><span class="token punctuation">:</span>                <span class="token builtin">min</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>fine_min_max<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find2</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>    L1 <span class="token operator">=</span> L<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    L1 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span>    <span class="token builtin">max</span> <span class="token operator">=</span> L1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token builtin">min</span> <span class="token operator">=</span> L1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>find2<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、列表生成式"><a href="#三、列表生成式" class="headerlink" title="三、列表生成式"></a>三、列表生成式</h3><ol><li><p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 生成[1x1, 2x2, 3x3, ..., 10x10]</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token comment"># 循环繁琐，用列表生成器</span><span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 筛选出偶数</span><span class="token comment"># 两层循环全排列</span><span class="token punctuation">[</span>m <span class="token operator">+</span> n <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token string">'ABC'</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token string">'XYZ'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token operator">+</span>l <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token string">'12345'</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token string">'NUSQX'</span> <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token string">'@#$%&amp;'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运用列表生成式，列出当前目录下的所有文件和目录名。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os <span class="token comment"># 导入os模块</span><span class="token punctuation">[</span>d <span class="token keyword">for</span> d <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># os.listdir可以列出文件和目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>列表生成器使用两个变量生成list。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">:</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">:</span><span class="token string">'C'</span><span class="token punctuation">}</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token string">'='</span> <span class="token operator">+</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>把一个list中所有的字符串变成小写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'HELLO'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'GOOD'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> L<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> L<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>列表生成式中的<code>if...else...</code>使用。for后面的if是一个筛选条件，不能带else；for前面的部分是一个表达式，它必须根据x计算出一个结果，要带上else。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># [2, 4, 6, 8, 10]</span><span class="token punctuation">[</span>x <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">#  [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="四、生成器"><a href="#四、生成器" class="headerlink" title="四、生成器"></a>四、生成器</h3><ol><li><p><strong>一边循环一边计算的机制，称为生成器：generator。</strong>通过列表生成式，直接创建一个列表，但是受到内存限制，列表容量肯定是有限的。而且如果在一个占用内存很大的列表中含有很多元素，而只需访问前几个元素，那么绝大多数元素占用的空间就被浪费了。如果列表能够按照某种算法推算出后面的元素，就可以不必创建完整的list从而节省大量空间。</p></li><li><p>创建生成器的方法</p><ul><li><p>把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator。可以通过<code>next()</code>函数获得generator的下一个返回值，generator保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token comment"># 上面不断调用next(g)，繁琐</span><span class="token comment"># 正解：用for循环</span><span class="token keyword">for</span> n <span class="token keyword">in</span> g<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>fib<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment"># 上面的函数和generator仅一步之遥。要把fib函数变成generator函数，只需要把print(b)改为yield b就可以了</span><span class="token keyword">def</span> <span class="token function">fib2</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>f <span class="token operator">=</span> fib2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在循环中不断调用<code>yield</code>就会不断中断，要给循环设置一个条件来退出循环；同样的把函数改成generator函数后，不用next()获取返回值而是直接用for循环迭代。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> n <span class="token keyword">in</span> fib2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是用for循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">g <span class="token operator">=</span> fib2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'g:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration <span class="token keyword">as</span> e <span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Generator return value:'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator函数，调用一个generator函数将返回一个generator。generator函数和普通函数的执行流程不一样。普通函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成<strong>generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 1'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 2'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'step 3'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">3</span>o <span class="token operator">=</span> odd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">next</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment"># step 1</span><span class="token builtin">next</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment"># step 2</span><span class="token builtin">next</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token comment"># step 3</span><span class="token builtin">next</span><span class="token punctuation">(</span>odd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># step 1</span><span class="token builtin">next</span><span class="token punctuation">(</span>odd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># step 1</span><span class="token builtin">next</span><span class="token punctuation">(</span>odd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># step 1</span><span class="token comment"># 原因在于odd()会创建一个新的generator对象，上述代码实际上创建了3个完全独立的generator，对3个generator分别调用next()当然每个都会返回第一个值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用该generator函数时，首先要生成一个generator对象，然后用<code>next()</code>函数不断获得下一个返回值。</p></li></ul></li><li><p>杨辉三角形</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">triangles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">yield</span> L    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        L <span class="token operator">=</span> <span class="token punctuation">[</span>v<span class="token operator">+</span>w <span class="token keyword">for</span> v<span class="token punctuation">,</span>w <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>L<span class="token punctuation">,</span>L<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">yield</span> L<span class="token comment">#打印三角</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>row <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>triangles<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>    <span class="token keyword">if</span> i<span class="token operator">&gt;=</span><span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="五、迭代器"><a href="#五、迭代器" class="headerlink" title="五、迭代器"></a>五、迭代器</h3><ol><li><p>可以直接作用于<code>for</code>循环的对象统称为可迭代对象：<code>Iterable</code>；可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p></li><li><p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterator<span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token builtin">iter</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 生成器 </tag>
            
            <tag> 迭代器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（二）</title>
      <link href="/2022/01/16/python2/"/>
      <url>/2022/01/16/python2/</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="一、函数"><a href="#一、函数" class="headerlink" title="一、函数"></a>一、函数</h3><ol><li><p>抽象：抽象使我们能以一种区分所谓的逻辑对象和物质对象的方式来看待问题及其解决方案。如，求和函数。</p></li><li><p>Python中内置了很多函数，可以在交互式命令行通过<code>help(function_name)</code>查看函数function_name的帮助信息。</p></li><li><p>数据类型转换：内置数据类型转换函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment"># 123</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">12.34</span><span class="token punctuation">)</span> <span class="token comment"># 12</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'12.34'</span><span class="token punctuation">)</span> <span class="token comment"># 12.34</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span> <span class="token comment"># '1.23'</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># '100'</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># True</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># '0xa' 字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">abs</span>a<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="二、函数定义"><a href="#二、函数定义" class="headerlink" title="二、函数定义"></a>二、函数定义</h3><ol><li><p><code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号，然后在缩进块中编写函数体，函数的返回值用return语句返回。</p></li><li><p>函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。如果没有return语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code>。</p></li><li><p>把定义的函数保存在<code>file.py</code>文件，可以在该文件的当前目录下启动Python解释器，用<code>from file import function_name</code>来导入<code>function_name()</code></p></li><li><p><strong>空函数</strong>，用<code>pass</code>语句，可以用来作为占位符</p></li><li><p><strong>参数检查</strong>，自定义的函数使用内置函数<code>isinstance()</code>实现</p></li><li><p><strong>返回多个值</strong>，实则返回的是一个tuple，但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">my_abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'bad operand type'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token keyword">print</span><span class="token punctuation">(</span>my_abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">nop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>step<span class="token punctuation">,</span>angle<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nx <span class="token operator">=</span> x <span class="token operator">+</span> step <span class="token operator">*</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>    ny <span class="token operator">=</span> y <span class="token operator">-</span> step <span class="token operator">*</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>    <span class="token keyword">return</span> nx<span class="token punctuation">,</span>nyx<span class="token punctuation">,</span> y <span class="token operator">=</span> move<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">quadratic</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    x1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span>    x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">-</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>b<span class="token operator">**</span><span class="token number">2</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a<span class="token punctuation">)</span>    <span class="token keyword">return</span> x1<span class="token punctuation">,</span> x2q <span class="token operator">=</span> quadratic<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>位置参数</strong>，函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p></li><li><p><strong>默认参数</strong>，如def power(x, n=2): n为默认参数。</p></li><li><p>默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p><ul><li>必选参数在前，默认参数在后，否则Python的解释器会报错；</li><li>如何设置默认参数，当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</li><li>使用默认参数最大的好处是能降低调用函数的难度。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">enroll</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'YZU'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'gender:'</span><span class="token punctuation">,</span>gender<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age:'</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'city:'</span><span class="token punctuation">,</span>city<span class="token punctuation">)</span>enroll<span class="token punctuation">(</span><span class="token string">'nusqx'</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>enroll<span class="token punctuation">(</span><span class="token string">'yx'</span><span class="token punctuation">,</span> <span class="token string">'female'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'JNU'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有多个默认参数时，调用的时候，既可以按顺序提供默认参数，也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。</p></li><li><p>定义默认参数要牢记一点：默认参数必须指向不变对象！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_end</span><span class="token punctuation">(</span>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> L<span class="token comment">#默认参数是[]，但是函数似乎每次都“记住了”上次添加了`'END'`后的list。</span>add_end<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3, 'END']</span>add_end<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># ['END']</span>add_end<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># ['END', 'END']</span><span class="token comment">#要修改上面的例子，我们可以用None这个不变对象来实现：</span><span class="token keyword">def</span> <span class="token function">add_end2</span><span class="token punctuation">(</span>L<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> L <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> Ladd_end2<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># [1, 2, 3, 'END']</span>add_end2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># ['END']</span>add_end2<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># ['END']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>可变参数</strong>，传入的参数个数是可变的。可变参数允许传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。Python允许在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成可变参数传进去。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc1</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> n <span class="token operator">*</span> n    <span class="token keyword">return</span> <span class="token builtin">sum</span>calc1<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 14 </span>calc1<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 14</span><span class="token comment"># 把函数的参数改为可变参数：</span><span class="token keyword">def</span> <span class="token function">calc2</span><span class="token punctuation">(</span><span class="token operator">*</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> number<span class="token punctuation">:</span>        <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> n <span class="token operator">*</span> n    <span class="token keyword">return</span> <span class="token builtin">sum</span>calc2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 14</span><span class="token comment"># 如果已经有一个list或tuple，调用可变参数如下：</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>calc2<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 14</span>clac2<span class="token punctuation">(</span><span class="token operator">*</span>nums<span class="token punctuation">)</span> <span class="token comment"># 14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。</p></li><li><p><strong>关键字参数</strong>，关键字参数允许传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个<code>dict</code>，如果调用者愿意提供更多的参数，也能收到。试想正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'age:'</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">'other:'</span><span class="token punctuation">,</span> kw<span class="token punctuation">)</span>person<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>person<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'YZ'</span><span class="token punctuation">)</span><span class="token comment"># 函数person除了必选参数name和age外，还接受关键字参数kw</span><span class="token comment"># 可以只传入必选参数，也可以传入任意个数的关键字参数</span>extra <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Beijing'</span><span class="token punctuation">,</span> <span class="token string">'job'</span><span class="token punctuation">:</span> <span class="token string">'Engineer'</span><span class="token punctuation">}</span>person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> city<span class="token operator">=</span>extra<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> job<span class="token operator">=</span>extra<span class="token punctuation">[</span><span class="token string">'job'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token operator">**</span>extra<span class="token punctuation">)</span><span class="token comment"># **extra表示把extra这个dict的所有key-value用关键字参数传入到函数的**kw参数，kw将获得一个dict，注意kw获得的dict是extra的一份拷贝，对kw的改动不会影响到函数外的extra</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>命名关键字参数</strong>，对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过<code>kw</code>检查。调用者仍可以传入不受限制的关键字参数，如果要限制关键字参数的名字，就可以用<strong>命名关键字参数</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'city'</span> <span class="token keyword">in</span> kw<span class="token punctuation">:</span>        <span class="token comment"># 有city参数</span>        <span class="token keyword">pass</span>    <span class="token keyword">if</span> <span class="token string">'job'</span> <span class="token keyword">in</span> kw<span class="token punctuation">:</span>        <span class="token comment"># 有job参数</span>        <span class="token keyword">pass</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name:'</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">'age:'</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">'other:'</span><span class="token punctuation">,</span> kw<span class="token punctuation">)</span><span class="token comment"># 调用者仍可以传入不受限制的关键字参数</span>person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token string">'Chaoyang'</span><span class="token punctuation">,</span> zipcode<span class="token operator">=</span><span class="token number">123456</span><span class="token punctuation">)</span>    <span class="token comment"># 如果要限制关键字参数的名字，就可以用命名关键字参数，只接收city和job作为关键字参数</span><span class="token keyword">def</span> <span class="token function">person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span>person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Engineer'</span><span class="token punctuation">)</span><span class="token comment">#命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数。</span><span class="token comment">#如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了</span><span class="token keyword">def</span> <span class="token function">person3</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> args<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token comment">#命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错</span><span class="token comment">#命名关键字参数可以有缺省值，从而简化调用</span><span class="token keyword">def</span> <span class="token function">person4</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">'Beijing'</span><span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token comment">#由于命名关键字参数city具有默认值，调用时，可不传入city参数</span>person<span class="token punctuation">(</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> job<span class="token operator">=</span><span class="token string">'Engineer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用命名关键字参数时，要特别注意，如果没有可变参数，就必须加一个<code>*</code>作为特殊分隔符。如果缺少<code>*</code>，Python解释器将无法识别位置参数和命名关键字参数。</p></li><li><p><strong>参数组合</strong>，在Python中定义函数，可以用<strong>必选参数、默认参数、可变参数、关键字参数和命名关键字参数</strong>，这5种参数都可以组合使用。<strong>参数定义的顺序</strong>必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a ='</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">'b ='</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">'c ='</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">'args ='</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token string">'kw ='</span><span class="token punctuation">,</span> kw<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a ='</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">'b ='</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">'c ='</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token string">'d ='</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token string">'kw ='</span><span class="token punctuation">,</span> kw<span class="token punctuation">)</span>f1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token comment">#a= 1 b= 2 c= 3 args= ('a', 'b') kw= {}</span>f1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># a= 1 b= 2 c= 3 args= ('a', 'b', 'c') kw= {'x': 99, 'y': 100}</span>f2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">99</span><span class="token punctuation">,</span>ex<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>ee<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token comment"># a = 1 b = 2 c = 0 d = 99 kw = {'ex': 5, 'ee': None}</span><span class="token comment"># 通过一个tuple和dict，你也可以调用上述函数</span>args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>kw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token string">'#'</span><span class="token punctuation">}</span>f1<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token comment"># a = 1 b = 2 c = 3 args = (4,) kw = {'d': 99, 'x': '#'}</span>args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>kw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token string">'#'</span><span class="token punctuation">}</span>f2<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span> <span class="token comment"># a = 1 b = 2 c = 3 d = 88 kw = {'x': '#'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>递归函数：使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。</p></li><li><p>针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fact</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 阶乘</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> n <span class="token operator">*</span> fact<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>fact<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">move</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 汉诺塔，n是第一个柱子上圆盘数</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'move'</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">'--&gt;'</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        move<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        move<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span>        move<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span>move<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>函数参数小结</p><p>Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。</p><p>默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！</p><p>要注意定义可变参数和关键字参数的语法：</p><p><code>*args</code>是可变参数，args接收的是一个tuple；</p><p><code>**kw</code>是关键字参数，kw接收的是一个dict。</p><p>以及调用函数时如何传入可变参数和关键字参数的语法：</p><p>可变参数既可以直接传入：<code>func(1, 2, 3)</code>，又可以先组装list或tuple，再通过<code>*args</code>传入：<code>func(*(1, 2, 3))</code>；</p><p>关键字参数既可以直接传入：<code>func(a=1, b=2)</code>，又可以先组装dict，再通过<code>**kw</code>传入：<code>func(**{'a': 1, 'b': 2})</code>。</p><p>使用<code>*args</code>和<code>**kw</code>是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。</p><p>命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。</p><p>定义命名的关键字参数在没有可变参数的情况下不要忘了写分隔符<code>*</code>，否则定义的将是位置参数。</p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 函数参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python（一）</title>
      <link href="/2022/01/12/python/"/>
      <url>/2022/01/12/python/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="一、python的应用"><a href="#一、python的应用" class="headerlink" title="一、python的应用"></a>一、python的应用</h3><ol><li>网络应用：网站、后台服务</li><li>工具：脚本</li><li>包装其他语言开发的工具</li></ol><h3 id="二、优缺点"><a href="#二、优缺点" class="headerlink" title="二、优缺点"></a>二、优缺点</h3><ol><li>提供了完善的基础代码库，覆盖网络、文件、GUI、数据库、文本等大量内容，被形象的称为”内置电池“</li><li>大量第三方库</li><li>优雅、明确、简单</li><li>语法简单，使用缩进式</li><li>运行速度慢（解释性语言）</li><li>代码不能加密（大家都那么忙，哪有闲工夫破解你的烂代码）</li></ol><h3 id="三、简介"><a href="#三、简介" class="headerlink" title="三、简介"></a>三、简介</h3><ol><li>python以<code>#</code>开头的语句是注释</li><li>采取缩进式，惯例为四个空格的缩进</li><li>冒号<code>:</code>结尾时，缩进的语句是为代码块</li><li>大小写敏感</li></ol><h2 id="二、Python基础"><a href="#二、Python基础" class="headerlink" title="二、Python基础"></a>二、Python基础</h2><h3 id="一、输入输出"><a href="#一、输入输出" class="headerlink" title="一、输入输出"></a>一、输入输出</h3><ol><li><p>输出print()</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello,world'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My name is'</span><span class="token punctuation">,</span><span class="token string">'nusqx'</span><span class="token punctuation">)</span><span class="token comment"># print()会依次打印每个字符串，遇到逗号','会输出一个空格 My name is nusqx</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10+20='</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># 10+20=30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输入input()，返回的数据类型是<code>str</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># nusqx</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment"># nusqx</span><span class="token comment"># 输入时加提示信息</span>name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please enter your name: '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello,'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、数据类型和变量"><a href="#二、数据类型和变量" class="headerlink" title="二、数据类型和变量"></a>二、数据类型和变量</h3><ol><li><p>在python中能直接处理的数据类型</p><ul><li><p><strong>整数</strong>，与数学中的写法一样</p><p><code>0x</code>前缀和0-9，a-f表示十六进制</p><p>对于很大的数，数字中间可以用<code>_</code>分割，100_000_000</p></li><li><p><strong>浮点数</strong>，小数，科学计数法</p><p>1.23*10-5即1.23e-5</p></li><li><p><strong>字符串</strong>，用<code>''</code>或<code>""</code>表示</p><p>字符串内部包含引号字符，用转义字符<code>\</code>表示，如<code>'I\'m OK'</code></p><p>转义字符可以转义很多字符，如\n表示换行符，\t表示制表符，<code>\\</code>表示<code>\</code></p><p>如果字符串包含很多字符需要转义，可以用<code>r''</code>表示<code>''</code>内部的字符串默认不转义</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm NUSQX"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'\\\t\\\\'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果字符串内部有很多换行，用<code>\n</code>写在一行不好阅读，可以用’’’…’’’的格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''line1... line2... line3'''</span><span class="token punctuation">)</span> <span class="token comment">#上面是在交互式命令行内输入，在输入多行内容时，提示符由&gt;&gt;&gt;变为...</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''line1line2line3'''</span><span class="token punctuation">)</span>line1line2line3<span class="token comment">#接着上一行输入，注意...是提示符，不是代码的一部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>布尔值</strong>，True和False</p><p>布尔值可以用<code>and</code>、<code>or</code>、<code>not</code>运算（与、或、非）</p></li><li><p>空值<code>None</code></p></li><li><p>Python还提供了列表、字典等多种数据类型</p></li></ul></li><li><p>变量，变量名必须是大小写英文字母、数字、下划线的组合，数字不能开头</p></li><li><p>Python是动态语言，变量本身类型不固定的语言称之为<em>动态语言</em>，与之对应的是<em>静态语言</em>。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言。</p></li><li><p>常量通常用全部大写的变量名表示常量</p></li><li><p>python中有两种除法，</p><ul><li>一种<code>/</code>，计算结果是浮点数，即使是两个整数恰好整除，结果仍是浮点数</li><li>另一种<code>//</code>地板除，只取结果的整数部分</li></ul></li><li><p>余数运算<code>%</code></p></li><li><p>python中<code>type()</code>函数可以查看类型</p></li></ol><h3 id="三、字符串和编码"><a href="#三、字符串和编码" class="headerlink" title="三、字符串和编码"></a>三、字符串和编码</h3><ol><li><p>Unicode把所有语言都统一到一套编码里，就不会再有乱码问题了。</p></li><li><p>ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。</p></li><li><p>如果统一成Unicode编码，乱码问题从此消失了。但是，如果写的文本基本上全部是英文，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p></li><li><p>把Unicode编码转化为“可变长编码”的<code>UTF-8</code>编码，UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。</p></li><li><p>计算机系统通用的字符编码工作方式：在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202304141434628.png" alt="rw-file-utf-8"></p></li><li><p>浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202304141436470.png" alt="web-utf-8"></p></li><li><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token comment"># 65</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 97</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span> <span class="token comment"># 'B'</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x4e2d</span><span class="token punctuation">)</span> <span class="token comment"># '中'</span><span class="token string">'\u4e2d'</span> <span class="token comment"># '中'</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">25991</span><span class="token punctuation">)</span> <span class="token string">'文'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>计算字符串长度<code>len()</code>函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'nusqx'</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token builtin">len</span><span class="token punctuation">(</span>SQX<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>格式化输出<code>%</code></p><p>常见的占位符有：有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应。如果只有一个<code>%?</code>，括号可以省略。</p><table><thead><tr><th align="center">占位符</th><th align="center">替换内容</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">整数</td></tr><tr><td align="center">%f</td><td align="center">浮点数</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数</td></tr></tbody></table><p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数。</p></li><li><p>字符串里面的<code>%</code>是一个普通字符，这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code></p></li><li><p><code>format()</code>方法格式化字符串，用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>…</p></li><li><p><code>f-string</code>使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">'hello, %s'</span> <span class="token operator">%</span> <span class="token string">'nusqx'</span><span class="token string">'Hi, %s, you have %d apples.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'nusqx'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%2d-%02d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3.1000</span><span class="token string">'%.4f'</span><span class="token operator">%</span><span class="token number">3.1415926</span> <span class="token comment"># 3.1416</span><span class="token string">'growth rate: %d %%'</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token comment"># 7 %</span><span class="token string">'hello,{0},中奖{1}百万'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'nusqx'</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>r <span class="token operator">=</span> <span class="token number">2.5</span>s <span class="token operator">=</span> <span class="token number">3.14</span> <span class="token operator">*</span> r <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'The area of a circle with radius </span><span class="token interpolation"><span class="token punctuation">{</span>r<span class="token punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="四、使用列表list和元组tuple"><a href="#四、使用列表list和元组tuple" class="headerlink" title="四、使用列表list和元组tuple"></a>四、使用列表list和元组tuple</h3><ol><li><p>python内置列表：<code>list</code>，一种有序的集合，可以随时添加和删除其中元素</p></li><li><p><code>len()</code>函数可以获取list元素的个数</p></li><li><p>用索引访问list中的每一个位置的元素，0开始，不可越界；如果访问最后一个，也可用-1，以此类推</p></li><li><p>往list中追加元素到末尾<code>append()</code></p></li><li><p>把元素插入到指定位置<code>insert()</code></p></li><li><p>删除list末尾元素<code>pop()</code></p></li><li><p>删除指定位置元素<code>pop(i)</code></p></li><li><p>替换某个元素，可以直接赋值给对应的索引位置</p></li><li><p>list中元素数据类型可以不同</p></li><li><p>list元素可以是另一个list，访问list中list，可以看作二维数组，类似的还有三维、四维</p></li><li><p>list中一个元素也没有，就是空list，长度为0</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">classmates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'Rose'</span><span class="token punctuation">]</span><span class="token builtin">len</span><span class="token punctuation">(</span>classmates<span class="token punctuation">)</span> <span class="token comment"># 4</span>classmates<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 'Tom'</span>classmates<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># 'Tom'</span>classmates<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'SQX'</span><span class="token punctuation">)</span> <span class="token comment"># ['Bob','Tom','Jack','Rose','SQX']</span>classmates<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'John'</span><span class="token punctuation">)</span> <span class="token comment"># ['Bob', 'John', 'Tom', 'Jack', 'Rose', 'SQX']</span>classmates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># ['Bob', 'John', 'Tom', 'Jack', 'Rose']</span>classmates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># ['Bob', 'John', 'Tom', 'Jack']</span>classmates<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Nick'</span> <span class="token comment"># ['Nick', 'John', 'Tom', 'Jack']</span>project <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>stu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">253.6</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">]</span>stu<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># [15, 20, 'B']</span>stu<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># 'B'</span>L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">len</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token comment"># 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>另一种有序列表叫元组，tuple一旦被初始化就不能修改，代码更加安全</p></li><li><p>tuple的陷阱：当定义一个tuple时，tuple的元素必须被确定下来</p></li><li><p>元组不能像列表一样增加、删除等，访问方法一样</p></li><li><p>要定义一个只有1个元素的tuple，如果是数字，防止与数学公式中括号产生歧义，必须加一个逗号<code>,</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 1</span>tup<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment"># 1</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># (1,)</span><span class="token builtin">len</span><span class="token punctuation">(</span>tup<span class="token punctuation">)</span> <span class="token comment"># 3</span>tt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 'A'</span>tt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'X'</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Y'</span><span class="token comment"># ('a', 'b', ['X', 'Y'])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。要创建一个内容也不变的tuple，就必须保证tuple的每一个元素本身也不能变。</p></li></ol><h3 id="五、条件判断"><a href="#五、条件判断" class="headerlink" title="五、条件判断"></a>五、条件判断</h3><ol><li><p>if…else / if… elif…else （注意缩进和冒号）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token operator">&lt;</span>条件判断<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">1</span><span class="token operator">&gt;</span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">2</span><span class="token operator">&gt;</span><span class="token keyword">elif</span> <span class="token operator">&lt;</span>条件判断<span class="token number">3</span><span class="token operator">&gt;</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">3</span><span class="token operator">&gt;</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>执行<span class="token number">4</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>if判断条件可以简写，只要x是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> x<span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'True'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>input()返回的数据类型是<code>str</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'your birth:'</span><span class="token punctuation">)</span>birth <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">if</span> birth <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00前'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'00后'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="六、循环"><a href="#六、循环" class="headerlink" title="六、循环"></a>六、循环</h3><ol><li><p><code>for x in ...</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">project <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'go'</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> project<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> i<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果计算1-100的累加和，上述方法有点困难，Python提供一个<code>range()</code>函数，生成一个整数序列，再通过<code>list()</code>函数转换为list</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>score <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> score<span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">+=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>while</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>n <span class="token operator">=</span> <span class="token number">99</span><span class="token keyword">while</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">+</span> n    n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>break</code>提前跳出循环</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> n <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token comment"># 当n = 11时，条件满足，执行break语句</span>        <span class="token keyword">break</span> <span class="token comment"># break语句会结束当前循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>continue</code>跳过当前的这次循环，直接开始下一次循环</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>python执行死循环，按<code>Ctrl+C</code>推出程序</p></li></ol><h3 id="七、使用dict和set"><a href="#七、使用dict和set" class="headerlink" title="七、使用dict和set"></a>七、使用dict和set</h3><ol><li><p>字典<code>dict</code>，Python内置了字典，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p></li><li><p>把数据放入dict的方法，除了初始化时指定外，还可以通过key放入</p></li><li><p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉</p></li><li><p>key不存在，dict就会报错，可以通过<code>in</code>判断key是否存在，或者通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value</p></li><li><p>删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除</p></li><li><p>dict内部存放的顺序和key放入的顺序是没有关系</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'nusqx'</span><span class="token punctuation">:</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">:</span> <span class="token number">172</span><span class="token punctuation">,</span> <span class="token string">'Nice'</span><span class="token punctuation">:</span> <span class="token number">162</span><span class="token punctuation">}</span>d<span class="token punctuation">[</span><span class="token string">'nusqx'</span><span class="token punctuation">]</span>d<span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">167</span>d<span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">160</span><span class="token string">'sqx'</span> <span class="token keyword">in</span> d <span class="token comment"># False</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nusqx'</span><span class="token punctuation">)</span> <span class="token comment">#175</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pei'</span><span class="token punctuation">)</span> <span class="token comment">#</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Nice'</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">)</span> <span class="token comment"># 162</span>d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Nice'</span><span class="token punctuation">)</span> <span class="token comment"># 162</span><span class="token comment"># {'nusqx': 175, 'Bob': 172, 'Jack': 160}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>和list比较，dict有以下几个特点：</p><ul><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多</li></ul><p>list相反：</p><ul><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少</li></ul><p>dict是用<strong>空间来换取时间</strong>的一种方法</p></li><li><p>dict的key必须是<strong>不可变对象</strong></p></li><li><p>通过key计算位置的算法称为哈希算法（Hash），要保证hash的正确性，作为key的对象就不能变</p></li><li><p>集合<code>set</code>也是一组key的集合，但不存储value</p></li><li><p>要创建一个set，需要提供一个list作为输入集合</p></li><li><p>显示的顺序也不表示set是有序的，重复元素在set中自动被过滤</p></li><li><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果</p></li><li><p>通过<code>remove(key)</code>方法可以删除元素</p></li><li><p>两个set可以做数学意义上的交集、并集等操作</p></li><li><p>set和dict的唯一区别仅在于没有存储对应的value，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>s1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s1 <span class="token operator">&amp;</span> ss1 <span class="token operator">|</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>不可变对象</strong>，str是不变对象，而list是可变对象</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#a: ['a', 'b', 'c']</span>a <span class="token operator">=</span> <span class="token string">'abc'</span>a<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token comment"># 'Abc'</span>a <span class="token comment"># 'abc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#定义元组</span>t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">#内容不变</span>t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#指向不变，但内容可以发生改变</span><span class="token comment">#以dict为例</span>d1 <span class="token operator">=</span> <span class="token punctuation">{</span>t1<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span>out<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>   <span class="token comment"># 创建了key为元组t1，value为1的字典</span>d2 <span class="token operator">=</span> <span class="token punctuation">{</span>t2<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>TypeError<span class="token punctuation">:</span> unhashable <span class="token builtin">type</span><span class="token punctuation">:</span> <span class="token string">'list'</span>  <span class="token comment"># 报错：list是不可使用哈希算法的类型。</span><span class="token comment">#set</span>s1 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span> <span class="token comment"># {1, 2, 3}</span>s2 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span> <span class="token comment">#TypeError: unhashable type: 'list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：虽然t2作为tuple是不可变对象，但是这里的不可变是指“指向不变”，内容是可以发生改变的。这里为了保证Hash算法，key应同时满足<strong>内容不变和指向不变</strong>。t1是内容和指向都不变的元组，因此可以作为dict的key，而t2则不可以。</p></blockquote></li></ol><p><strong>保留字</strong><br><img src="https://gitee.com/nusqx/picgo/raw/master/blog/202402261740440.png"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法</title>
      <link href="/2021/05/18/algorithm-md/"/>
      <url>/2021/05/18/algorithm-md/</url>
      
        <content type="html"><![CDATA[<h2 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h2><p>Hash，音译为哈希，是一个典型的利用空间换取时间的算法，把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。贪心算法（又称贪婪算法）是指在对问题求解时，总是做出在当前看来是最好的选择。博弈/博弈论，又称为对策论（Game Theory）、赛局理论等，既是现代数学的一个新分支，也是运筹学的一个重要学科。</p><h3 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h3><ol><li>把任意长度的输入（又叫做预映射pre-image）通过散列算法变换成固定长度的输出，该输出就是散列值。</li></ol><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ol><li><p>态规划的基本思想是：问题的最优解如果可以由子问题的最优解推导得到，则可以先求解子问题的最优解，在构造原问题的最优解；若子问题有较多的重复出现，则可以自底向上从最终子问题向原问题逐步求解。</p></li><li><p>动态规划的特点：</p><p>a) 把原始问题划分成一系列子问题；</p><p>b) 求解每个子问题仅一次，并将其结果保存在一个表中，以后用到时直接存取，不重复计算，节省计算时间</p><p>c) 自底向上地计算。</p><p>d) 整体问题最优解取决于子问题的最优解（状态转移方程）（将子问题称为状态，最终状态的求解归结为其他状态的求解）</p></li><li><p>线性动规，区域动规，树形动规，背包动规。</p></li><li><p>最大不下降子序列</p></li></ol><h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><ol><li><p>在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的是在某种意义上的局部最优解。</p></li><li><p>贪心算法不是对所有问题都能得到整体最优解，关键是贪心策略的选择，选择的贪心策略必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</p></li><li><p>贪心算法的思想如下：</p><p>a)建立数学模型来描述问题；</p><p>b)把求解的问题分成若干个子问题；</p><p>c)对每一子问题求解，得到子问题的局部最优解；</p><p>d)把子问题的解局部最优解合成原来解问题的一个解。</p></li></ol><h3 id="博弈算法"><a href="#博弈算法" class="headerlink" title="博弈算法"></a>博弈算法</h3><ol><li><p>博弈论主要研究公式化了的激励结构间的相互作用，是研究具有斗争或竞争性质现象的数学理论和方法，博弈论考虑游戏中的个体的预测行为和实际行为，并研究它们的优化策略。</p></li><li><p>博弈问题的特点</p><p>a) 博弈模型为两人轮流决策的非合作博弈。即两人轮流进行决策，并且两人都使用最优策略来获取胜利</p><p>b) 博弈是有限的。即无论两人怎样决策，都会在有限步后决出胜负</p><p>c) 公平博弈。即两人进行决策所遵循的规则相同</p></li><li><p>几种常用的博弈论模型有：巴什博弈，威佐夫博弈，斐波那契博弈，尼姆博弈</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法分析</title>
      <link href="/2020/10/15/ds-algorithm-md/"/>
      <url>/2020/10/15/ds-algorithm-md/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-数据结构和算法分析"><a href="#第一章-数据结构和算法分析" class="headerlink" title="第一章 数据结构和算法分析"></a>第一章 数据结构和算法分析</h2><h3 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h3><ol><li>逻辑结构：线性结构、非线性结构。</li><li>存储结构：顺序（随机存取）、链式（顺序存取）、索引、散列。</li><li>运算：运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤。</li><li>抽象数据类型：ADT只是一个数学模型以及定义在模型上的一组操作。</li></ol><h3 id="二、算法"><a href="#二、算法" class="headerlink" title="二、算法"></a>二、算法</h3><ol><li><p>五特征：有穷性、确定性、可行性、输入、输出。</p></li><li><p>时间复杂度：时间复杂度表示一个程序运行所需要的时间，其具体需要在机器环境中才能得到具体的值，但我们一般并不需要得到详细的值，只是需要比较快慢的区别即可，为此，我们需要引入时间频度（语句频度）的概念。时间频度中，n称为问题的规模，当n不断变化时,时间频度T(n)也会不断变化。一般情况下，算法中的基本操作重复次数的是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)，使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n))，称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。</p></li><li><p>空间复杂度：指运行完一个程序所需内存的大小，其包括两个部分。</p><ul><li>固定部分：这部分空间的大小与输入/输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间，属于静态空间。</li><li>可变空间：这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等，大小与算法有关。</li></ul></li><li><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n).</p></li></ol><p><strong>程序 = 数据结构 + 算法</strong></p><h3 id="三、内存分配"><a href="#三、内存分配" class="headerlink" title="三、内存分配"></a>三、内存分配</h3><ol><li><p>常规的内存分配，使用到释放的过程如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SIZE</span> <span class="token expression"><span class="token number">5</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>SIZE<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//申请SIZE歌整形大小的内存并返回首地址给p</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">//为空间添加数据</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放p所指空间，但p依旧存在为野指针</span>    p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//此时不是野指针    </span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C语言中malloc函数从堆上动态分配内存，free函数释放已分配的对应内存。</p></li></ol><h2 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h2><h3 id="一、单链表"><a href="#一、单链表" class="headerlink" title="一、单链表"></a>一、单链表</h3><ol><li><p>单链表，每个结点可以使用结构体struct设计：</p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303142208041.png" alt="image-20230314220830970" style="zoom: 33%;"><p>Data为数据元素，可以是数组、基本数据类型、结构体，next为指向下一个结点的指针，链尾指向NULL。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//定义结点类型</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">,</span> <span class="token operator">*</span>LinkedList<span class="token punctuation">;</span><span class="token comment">//Node表示结点类型，LinkedList表示指向Node结点类型的指针类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单链表初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkedList <span class="token function">listinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*初始化是创建一个单链表的前置结点并向后逐步添加结点，即申请结点的空间，同时对一个结点赋以空值(NULL)*/</span>    Node <span class="token operator">*</span>L<span class="token punctuation">;</span>    L <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开辟空间</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"申请失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//指针指向空</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建单链表</p><p>单链表的创建分为头插入法和尾插入法两种，都是利用指针指向下一个结点元素的方式进行逐个创建，使用头插入法最终得到的结果是逆序的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkedList <span class="token function">ListCreatH</span><span class="token punctuation">(</span>LinkedList h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//头插法，插在表头，头结点之后</span>    Node <span class="token operator">*</span>L<span class="token punctuation">;</span>    L <span class="token operator">=</span> h<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">//输入类型正确,按ctrl+z结束</span>    <span class="token punctuation">{</span>        Node <span class="token operator">*</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">-&gt;</span> data <span class="token operator">=</span> x<span class="token punctuation">;</span>        p <span class="token operator">-&gt;</span> next <span class="token operator">=</span> L <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span><span class="token comment">//L--&gt;|2|--&gt;|1|--&gt;NULL</span>        L <span class="token operator">-&gt;</span> next <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkedList <span class="token function">ListCreatT</span><span class="token punctuation">(</span>LinkedList L<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//尾插法</span>    Node <span class="token operator">*</span>r <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//r始终指向终端结点，开始指向头结点</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">//按ctrl+z结束</span>    <span class="token punctuation">{</span>        Node <span class="token operator">*</span>p<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">-&gt;</span> data <span class="token operator">=</span> x<span class="token punctuation">;</span>        r <span class="token operator">-&gt;</span> next <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//L--&gt;|1|--&gt;|2|--&gt;NULL</span>        r <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    r <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//尾插法细结</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历单链表</p><p>遍历单链表可以查询元素、修改元素、获取元素个数、打印链表数据。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span>LinkedList L<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//遍历打印</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> L <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d个元素值为%d\n"</span><span class="token punctuation">,</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> p <span class="token operator">-&gt;</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>LinkedList <span class="token function">ListReplace</span><span class="token punctuation">(</span>LinkedList L<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//将链表中值为x的元素改为k</span>    Node <span class="token operator">*</span>p <span class="token operator">=</span> L <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> data <span class="token operator">==</span> x<span class="token punctuation">)</span>            p <span class="token operator">-&gt;</span> data <span class="token operator">=</span> k<span class="token punctuation">;</span>        p <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单链表插入操作</p><p>插入到第i个位置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkedList <span class="token function">ListInsert</span><span class="token punctuation">(</span>LinkedList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//插入到第i位置操作</span>    LinkedList p<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    p <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//p为第i-1处</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> j <span class="token operator">&gt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不存在该位置\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">-&gt;</span> data <span class="token operator">=</span> x<span class="token punctuation">;</span>    s <span class="token operator">-&gt;</span> next <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    p <span class="token operator">-&gt;</span> next <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span>    <span class="token comment">// Node *pre;</span>    <span class="token comment">// pre = L;</span>    <span class="token comment">// int count;</span>    <span class="token comment">// for(count = 1; count &lt; i; count++)</span>    <span class="token comment">//     pre = pre -&gt; next;</span>    <span class="token comment">// Node *p;</span>    <span class="token comment">// p = (Node*)malloc(sizeof(Node));</span>    <span class="token comment">// p -&gt; data = x;</span>    <span class="token comment">// p -&gt; next = pre -&gt; next;</span>    <span class="token comment">// pre -&gt; next = p;</span>    <span class="token comment">//return L;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单链表的删除操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LinkedList <span class="token function">ListDelete</span><span class="token punctuation">(</span>LinkedList L<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除值为x的结点</span>    Node <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span>    p <span class="token operator">=</span> L <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> data <span class="token operator">!=</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p <span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pre <span class="token operator">-&gt;</span> next <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">ListDeletei</span><span class="token punctuation">(</span>LinkedList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//删除第i处的结点，并取出值</span>    LinkedList pre<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token comment">//q为第i个结点</span>    pre <span class="token operator">=</span> L<span class="token punctuation">;</span><span class="token comment">//pre指向第i个结点的前驱</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> e<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pre <span class="token operator">=</span> pre <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pre<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">&gt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不存在该位置\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    q <span class="token operator">=</span> pre <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    pre <span class="token operator">-&gt;</span> next <span class="token operator">=</span> q <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    e <span class="token operator">=</span> q <span class="token operator">-&gt;</span> data<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、双向链表"><a href="#二、双向链表" class="headerlink" title="二、双向链表"></a>二、双向链表</h3><ol><li><p>双向链表简称为双链表，在单链表的基础上，对于每一个结点设计一个前驱结点，前驱结点与前一个结点相互连接，构成一个链表。从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。</p><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303190937023.png" alt="image-20230319093746932"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DouList</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DouList</span> <span class="token operator">*</span>pre<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">DouList</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> DouList<span class="token punctuation">,</span> <span class="token operator">*</span>DoubList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>双链表的创建</p><p>双链表的头结点是有元素的，与带头结点的单链表不同。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">DoubList <span class="token function">initLin</span><span class="token punctuation">(</span>DoubList head<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> in<span class="token punctuation">;</span>    <span class="token comment">//结点数，当前位置，输入数据</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input node num:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token punctuation">(</span>DouList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DouList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    head <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input No.%d:"</span><span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">-&gt;</span> data <span class="token operator">=</span> in<span class="token punctuation">;</span>    DouList <span class="token operator">*</span>list <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        DouList <span class="token operator">*</span> body <span class="token operator">=</span> <span class="token punctuation">(</span>DouList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DouList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        body <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        body <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input No.%d:"</span><span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        body <span class="token operator">-&gt;</span> data <span class="token operator">=</span> in<span class="token punctuation">;</span>        list <span class="token operator">-&gt;</span> next <span class="token operator">=</span> body<span class="token punctuation">;</span>        body <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> list<span class="token punctuation">;</span>        list <span class="token operator">=</span> list <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>双链表的插入操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">DoubList <span class="token function">InsertList</span><span class="token punctuation">(</span>DoubList head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    DouList <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span>DouList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>DouList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp <span class="token operator">-&gt;</span> data <span class="token operator">=</span> x<span class="token punctuation">;</span>    temp <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    temp <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token comment">//插入到表头</span>    <span class="token punctuation">{</span>        temp <span class="token operator">-&gt;</span> next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>        head <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        DouList <span class="token operator">*</span>body <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>             body <span class="token operator">=</span> body <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">-&gt;</span> next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//插在表尾</span>        <span class="token punctuation">{</span>            body <span class="token operator">-&gt;</span> next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            body <span class="token operator">-&gt;</span> next <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp <span class="token operator">-&gt;</span> next <span class="token operator">=</span> body <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>            body <span class="token operator">-&gt;</span> next <span class="token operator">=</span> temp<span class="token punctuation">;</span>            temp <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> body<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>双链表的删除操作</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Deletev</span><span class="token punctuation">(</span>DoubList head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    DouList <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> data <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> p <span class="token operator">-&gt;</span> next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"only one number\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delete done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> data <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> p <span class="token operator">-&gt;</span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment">//first</span>        head <span class="token operator">=</span> head <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        head <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delete done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> data <span class="token operator">!=</span> x<span class="token punctuation">)</span>            p <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p <span class="token operator">-&gt;</span> next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//最后一个元素</span>        <span class="token punctuation">{</span>            p <span class="token operator">-&gt;</span> pre <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delete done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            p <span class="token operator">-&gt;</span> pre <span class="token operator">-&gt;</span> next <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>            p <span class="token operator">-&gt;</span> next <span class="token operator">-&gt;</span> pre <span class="token operator">=</span> p <span class="token operator">-&gt;</span> pre<span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"delete done!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>双向链表的遍历</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">printDList</span><span class="token punctuation">(</span>DoubList head<span class="token punctuation">)</span><span class="token punctuation">{</span>    DouList <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No.%d: %d\n"</span><span class="token punctuation">,</span> pos<span class="token operator">++</span><span class="token punctuation">,</span> p <span class="token operator">-&gt;</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p <span class="token operator">-&gt;</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、循环单链表"><a href="#三、循环单链表" class="headerlink" title="三、循环单链表"></a>三、循环单链表</h3><ol><li><p>非循环链表的尾结点指向空（NULL），而循环链表的尾指针指向的是链表的开头。通过将单链表的尾结点指向头结点的链表称之为循环单链表（Circular linkedlist）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">CirList</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>CirList<span class="token punctuation">;</span> <span class="token comment">//data为存储的数据，next指针为指向下一个结点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>循环单链表初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">CirList <span class="token operator">*</span><span class="token function">initClist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CirList <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token punctuation">(</span>CirList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>CirList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        head <span class="token operator">-&gt;</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//main()中</span>CirList <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token function">initClist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>L <span class="token operator">-&gt;</span> next <span class="token operator">=</span> L<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>循环链表的创建</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">insert_List</span><span class="token punctuation">(</span>CirList <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//插在表尾</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入要插入的元素："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      CirList <span class="token operator">*</span>node<span class="token operator">=</span><span class="token function">initClist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>    <span class="token comment">//初始化一个新的结点，准备进行链接</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CirList <span class="token operator">*</span>p<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token comment">//找到最后一个数据</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next<span class="token operator">!=</span>head<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p<span class="token operator">-&gt;</span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>        node<span class="token operator">-&gt;</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"头结点已无元素\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>循环单链表的插入</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">CirList <span class="token operator">*</span><span class="token function">insert_list</span><span class="token punctuation">(</span>CirList <span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//三个参数分别是链表，位置，参数</span>    CirList <span class="token operator">*</span>node<span class="token operator">=</span><span class="token function">initlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//新建结点</span>    CirList <span class="token operator">*</span>p<span class="token operator">=</span>head<span class="token punctuation">;</span>       <span class="token comment">//p表示新的链表</span>    CirList <span class="token operator">*</span>t<span class="token punctuation">;</span>    t<span class="token operator">=</span>p<span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pos<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t<span class="token operator">=</span>t<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token comment">//走到需要插入的位置处</span>        <span class="token punctuation">}</span>        node<span class="token operator">-&gt;</span>next<span class="token operator">=</span>t<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        t<span class="token operator">-&gt;</span>next<span class="token operator">=</span>node<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>循环单链表的删除</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">delete_list</span><span class="token punctuation">(</span>CirList <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token comment">//删除元素</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为空！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//建立临时结点存储头结点信息（目的为了找到退出点）</span><span class="token comment">//不这么建立的化需要使用一个数据进行计数标记，计数达到链表长度时自动退出</span><span class="token comment">//循环链表当找到最后一个元素的时候会自动指向头元素，这是我们不想让他发生的</span>    CirList <span class="token operator">*</span>temp <span class="token operator">=</span> head<span class="token punctuation">;</span>              CirList <span class="token operator">*</span>ptr <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> del<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入你要删除的元素："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>del<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>ptr <span class="token operator">!=</span> head<span class="token punctuation">)</span> <span class="token comment">//至少有两个元素</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>data <span class="token operator">==</span> del<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token operator">-&gt;</span>next <span class="token operator">==</span> head<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token comment">//核心删除操作代码</span>            <span class="token function">free</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//printf("元素删除成功！\n");</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//temp是ptr的前驱结点</span>        ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到要删除的元素\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>循环单链表的遍历</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">display</span><span class="token punctuation">(</span>CirList <span class="token operator">*</span>head<span class="token punctuation">)</span><span class="token comment">//遍历元素</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        CirList <span class="token operator">*</span>p  <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> head<span class="token punctuation">)</span><span class="token comment">//遍历头结点到，最后一个数据</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">else</span>     <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"头结点为空!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="第三章-栈和队列"><a href="#第三章-栈和队列" class="headerlink" title="第三章 栈和队列"></a>第三章 栈和队列</h2><h3 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h3><ol><li><p>栈（stack）是一个线性的数据结构，规定这个数据结构只允许在其中一端进行操作，并禁止直接访问除这一端以外的数据。</p></li><li><p>栈结点的设计</p><p>除单链表的结构外，额外添加一个结构体，其主要功效就是设定允许操作元素的指针以及确定栈何时为空：</p><ul><li>法一：包括了一个永远指向栈头的指针top和一个计数器count记录元素个数，当count为0时为空；</li><li>法二：设计一个指针top和一个指针bottom分别指向栈头和栈尾，两者指向同一个空间时为栈为空。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">20</span> </span><span class="token comment">/* 存储空间初始分配量 */</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment">/* ElemType类型根据实际情况而定，这里假设为int */</span><span class="token comment">/* 链栈结点结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">StackNode</span><span class="token punctuation">{</span>ElemType data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">StackNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>StackNode<span class="token punctuation">;</span><span class="token comment">/* 链栈结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkStack</span><span class="token punctuation">{</span>StackNode  <span class="token operator">*</span>top<span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkStack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">initStack</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span><span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 注意要给链栈分配内存</span><span class="token operator">*</span>stack <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">// 链栈的空其实就是 top=NULL 的时候</span><span class="token punctuation">(</span><span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token operator">-&gt;</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>入栈</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 进栈操作</span>Status <span class="token function">push</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>stack<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>StackNode  <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>StackNode  <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>StackNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> <span class="token comment">// 把当前的栈顶元素赋值给新结点的直接后继，见图中①</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">// 将新的结点s赋值给栈顶指针，见图中②</span>stack<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>出栈</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 出栈操作</span>Status <span class="token function">pop</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>stack<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>StackNode  <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token operator">*</span>e <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>p <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> <span class="token comment">// p用来存储要删除的栈顶结点，见图中③</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 使得栈顶指针下移一位，指向后一结点，见图中④</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放结点p</span>stack<span class="token operator">-&gt;</span>count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>栈的遍历：在栈不为空的情况下，一次从栈顶元素向下访问，直到指针指向空（即到栈尾）为结束。（逆序输出）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 遍历栈操作</span>Status <span class="token function">traverseStack</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span>StackNode  <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 清除栈操作</span>Status <span class="token function">clearStack</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span>StackNode  <span class="token operator">*</span>p<span class="token punctuation">;</span>StackNode  <span class="token operator">*</span>q<span class="token punctuation">;</span>p <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>q <span class="token operator">=</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>stack<span class="token operator">-&gt;</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 判断是否为空栈</span>Status <span class="token function">isEmpty</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获得栈顶元素</span>Status <span class="token function">getTop</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>stack<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">*</span>e <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获得栈的长度</span><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>count<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>顺序栈</p><ul><li>栈空时：栈顶指针（top）= -1；</li><li>栈满时：栈顶指针（top）= MAXSIZE-1；</li><li>栈未满：就是栈中存在元素，top 指针还未达到 MAXSIZE-1。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">20</span> </span><span class="token comment">/* 存储空间初始分配量 */</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment">// ElemType类型根据实际情况而定，这里假设为int </span><span class="token comment">/* 顺序栈结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SeqStack</span><span class="token punctuation">{</span>ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span> <span class="token comment">/* 用于栈顶指针 */</span><span class="token punctuation">}</span>SeqStack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 初始化栈操作</span>Status <span class="token function">initStack</span><span class="token punctuation">(</span>SeqStack <span class="token operator">*</span><span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">*</span>stack <span class="token operator">=</span> <span class="token punctuation">(</span>SeqStack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SeqStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 进栈操作</span>Status <span class="token function">push</span><span class="token punctuation">(</span>SeqStack <span class="token operator">*</span>stack<span class="token punctuation">,</span> <span class="token keyword">const</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 判断是否栈满</span><span class="token punctuation">{</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span>stack<span class="token operator">-&gt;</span>top<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶指针加1</span>stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment">// 将新插入元素赋值给栈顶空间</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 出栈操作</span>Status <span class="token function">pop</span><span class="token punctuation">(</span>SeqStack <span class="token operator">*</span>stack<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 判断是否空栈</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token operator">*</span>e <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 将要删除的栈顶元素赋值给e</span>stack<span class="token operator">-&gt;</span>top<span class="token operator">--</span><span class="token punctuation">;</span>               <span class="token comment">// 栈顶指针减1</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 遍历栈操作</span>Status <span class="token function">traverseStack</span><span class="token punctuation">(</span>SeqStack <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> stack<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 清空栈操作</span>Status <span class="token function">clearStack</span><span class="token punctuation">(</span>SeqStack <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 判断是否为空</span>Status <span class="token function">isEmpty</span><span class="token punctuation">(</span>SeqStack <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获得栈顶元素</span>Status <span class="token function">getTop</span><span class="token punctuation">(</span>SeqStack <span class="token operator">*</span>stack<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token operator">-&gt;</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">*</span>e <span class="token operator">=</span> stack<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>stack<span class="token operator">-&gt;</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取栈的长度</span><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>SeqStack <span class="token operator">*</span>stack<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> stack<span class="token operator">-&gt;</span>top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h3><ol><li><p>顺序队列：用数组存储队列，为了避免当只有一个元素时，队头和队尾重合使得处理变得麻烦，所以引入两个指针：front 指针指向队头元素，rear 指针指向队尾元素的下一个位置，当 front=rear 时，为空队列。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment">/* ElemType类型根据实际情况而定，这里假设为int */</span><span class="token comment">/* 循环队列的顺序存储结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SeqQueue</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span>      <span class="token comment">/* 头指针 */</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span>       <span class="token comment">/* 尾指针，若队列不空，指向队列尾元素的下一个位置 */</span><span class="token punctuation">}</span>SeqQueue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解决 “假溢出” 的办法就是后面满了，就再从头开始，也就是头尾相接的循环。我们把队列的这种头尾相接的顺序存储结构称为顺序循环队列。</p><ul><li>办法一是设置一个标志变量 flag， 当 front == rear，且 flag = 0 时为队列空，当 front== rear，且 flag= 1 时为队列满。</li><li>办法二是当队列空时，条件就是 front = rear，当队列满时，我们修改其条件，保留一个元素空间。也就是说，队列满时，数组中还有一个空闲位置。</li></ul></li><li><p>针对法二：若队列的最大尺寸为 QueueSize，那么队列满的条件是<code>(rear+1) % QueueSize == front</code> ，因此通用的计算队列长度公式为：<code>(rear - front + QueueSize) % QueueSize</code> 。</p><p>注意：front 指针和 rear 指针后移不能直接使用 ++，而要使用<code>Q-&gt;front = (Q-&gt;front + 1) % MAXSIZE</code>，因为到达数组尾后需要移动到数组开头。</p></li><li><p>程序实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">5</span> </span><span class="token comment">/* 存储空间初始分配量 */</span></span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span> <span class="token comment">/* ElemType类型根据实际情况而定，这里假设为int */</span><span class="token comment">// 初始化队列操作</span>Status <span class="token function">initQueue</span><span class="token punctuation">(</span>SeqQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span>  TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 入队操作</span>Status <span class="token function">enQueue</span><span class="token punctuation">(</span>SeqQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span> <span class="token keyword">const</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 判断队列是否已满</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>Q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment">// 将元素e赋值给队尾</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span> <span class="token comment">// rear指针向后移一位置，若到最后则转到数组头部</span><span class="token keyword">return</span>  TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 出队操作</span>Status <span class="token function">deQueue</span><span class="token punctuation">(</span>SeqQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 判断是否为空队</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span> <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token operator">*</span>e <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>Q<span class="token operator">-&gt;</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 将队头元素赋值给e</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span> <span class="token comment">// front指针向后移一位置,若到最后则转到数组头部</span><span class="token keyword">return</span>  TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 遍历队列操作</span>Status <span class="token function">tarverseQueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> SeqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> cur <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span> <span class="token comment">// 当前指针</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token comment">// 直到cur指向了队尾元素的下一个位置，即Q.rear，结束循环</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cur <span class="token operator">=</span> <span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span> <span class="token comment">// 当前指针向后推移</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 清空队列操作</span>Status <span class="token function">clearQueue</span><span class="token punctuation">(</span>SeqQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 判断是否为空队列</span>Status <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">const</span> SeqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获得队头元素</span>Status <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token keyword">const</span> SeqQueue Q<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token comment">// 判断是否为空队列</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span><span class="token operator">*</span>e <span class="token operator">=</span> Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获得队列的长度</span><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token keyword">const</span> SeqQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span>  <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">-</span> Q<span class="token punctuation">.</span>front <span class="token operator">+</span> MAXSIZE<span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>链队列</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> QElemType<span class="token punctuation">;</span> <span class="token comment">/* QElemType类型根据实际情况而定，这里假设为int */</span><span class="token comment">/* 结点结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token punctuation">{</span>ElemType data<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">QNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>QNode<span class="token punctuation">;</span><span class="token comment">/* 队列的链表结构 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>QNode <span class="token operator">*</span>front<span class="token punctuation">;</span> <span class="token comment">// 队头指针</span>QNode <span class="token operator">*</span>rear<span class="token punctuation">;</span> <span class="token comment">// 队尾指针</span><span class="token punctuation">}</span>LinkQueue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>基本操作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 初始化链队列操作</span>Status <span class="token function">initQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>QNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 入队操作</span>Status <span class="token function">enQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>QNode <span class="token operator">*</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>QNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>QNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">)</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>s<span class="token operator">-&gt;</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Q<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment">// 把拥有元素e的新结点s赋值给原队尾结点的后继，见图中①</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment">// 把当前的s设置为队尾结点，rear指向s，见图中②</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*出队操作就是头结点的后继结点出队，将头结点的后继改为它后面的结点，若链表除头结点外只剩一个元素时，则需将rear指向头结点*/</span>Status <span class="token function">deQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>QNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>p <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 将欲删除的队头结点暂存给p，见图中①</span><span class="token operator">*</span>e <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span> <span class="token comment">// 将欲删除的队头结点的值赋值给e</span>Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">// 将原队头结点的后继p-&gt;next赋值给头结点后继，见图中②</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">==</span> p<span class="token punctuation">)</span> <span class="token comment">// 若队头就是队尾，则删除后将rear指向头结点，见图中③</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 遍历队列操作</span>Status <span class="token function">tarverseQueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span>QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 销毁队列操作</span>Status <span class="token function">destroyQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token punctuation">{</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>Q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token punctuation">;</span>Q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>rear<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 清空队列操作</span>Status <span class="token function">clearQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span><span class="token punctuation">{</span>QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>QNode <span class="token operator">*</span>q<span class="token punctuation">;</span>Q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>p <span class="token operator">=</span> Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>Q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>q <span class="token operator">=</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 判断是否为空队列</span>Status <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">const</span> LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear <span class="token operator">?</span> TRUE <span class="token operator">:</span> FALSE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获得队头元素</span>Status <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token keyword">const</span> LinkQueue Q<span class="token punctuation">,</span> ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>QNode <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front <span class="token operator">==</span> Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span><span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token operator">*</span>e <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span><span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获得队列的长度</span><span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token keyword">const</span> LinkQueue Q<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>QNode <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">!=</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span>p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="第四章-字符串"><a href="#第四章-字符串" class="headerlink" title="第四章 字符串"></a>第四章 字符串</h2><h3 id="一、字符串模式匹配"><a href="#一、字符串模式匹配" class="headerlink" title="一、字符串模式匹配"></a>一、字符串模式匹配</h3><ol><li><p>暴力匹配</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* 在文本txt中寻找模式pat 若找到则返回文本中**模式出现时的首个字母的索引i** 若没找到（也就是txt中不存在pat模式），返回-1 */</span> <span class="token keyword">int</span> <span class="token function">baolipipei</span><span class="token punctuation">(</span><span class="token keyword">char</span> txt<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> pat<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len1<span class="token operator">-</span>len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>txt<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> len2<span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//O(m*n)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>KMP算法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">kmp_next</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">char</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> zhu<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"googooglegobgooglegooogoogle"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> pi<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"google"</span><span class="token punctuation">;</span>    <span class="token comment">//cout &lt;&lt; strlen(pi) &lt;&lt; endl;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">kmp</span><span class="token punctuation">(</span>pi<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> zhu<span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">kmp_next</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//x为模式串，m为模式串长</span><span class="token punctuation">{</span>    next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//i是next的索引，j是x的下标，1开始</span>    <span class="token comment">// while (i &lt;= m)</span>    <span class="token comment">// {</span>    <span class="token comment">//     if(j == 0 || x[i] == x[j]) next[++i] = ++j;</span>    <span class="token comment">//     else j = next[j];</span>    <span class="token comment">// }</span>    <span class="token comment">//优化</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//当两个字符相同时，就跳过</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">char</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment">//x模式串，y主串</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">kmp_next</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> m<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment">//x[j]是模式串</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// while(j != 0 &amp;&amp; y[i] != x[j])</span>        <span class="token comment">//     j = next[j];</span>        <span class="token comment">// i++;</span>        <span class="token comment">// j++;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> m<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> next<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token comment">//返回模式串在主串中出现次数，在主串位置是i-m</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、C-string类"><a href="#二、C-string类" class="headerlink" title="二、C++string类"></a>二、C++string类</h3><ol><li><p>C++中的string字符串类型</p><p>在C++中，通过模板类的操作创建了<strong>string类</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str<span class="token punctuation">;</span>       <span class="token comment">//创建空字符串</span>      string str1 <span class="token operator">=</span> <span class="token string">"Hello hhhcpp.com"</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token comment">//Hello hhhcpp.com</span>      string <span class="token function">str2</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> str2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//Hello hhhcpp.com</span>      string <span class="token function">str3</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//丛str1[6]开始取到结束</span>    cout <span class="token operator">&lt;&lt;</span> str3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//hhhcpp.com</span>      string <span class="token function">str4</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//丛str1[6]开始取6个</span>    cout <span class="token operator">&lt;&lt;</span> str4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//hhhcpp</span>      string <span class="token function">str5</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//str5为5个D</span>    cout <span class="token operator">&lt;&lt;</span> str5 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//DDDDD</span>      string <span class="token function">str6</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> str6 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//Hello hhhcpp.com</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>比较和连接</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>string str2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span>     cout <span class="token operator">&lt;&lt;</span> <span class="token string">"两者相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"两者不相等"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>string totalystring <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> totalystring <span class="token operator">+</span> <span class="token string">"b"</span> <span class="token operator">+</span> <span class="token string">"c"</span> <span class="token operator">+</span> <span class="token string">"d"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取长度length，获取当前字符串的长度</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//C中strlrn(str)</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取大小size，获取当前字符串的大小，某种意义上由于字符串的每一个字符开辟的空间均完全相等，因此size可以代替length</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>strlen(str)</code>和<code>str.length()</code>和<code>str.size()</code>三者的区别</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>和str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>都可以求字符串长度。其中 str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 是用于求string类对象的成员函数，而 <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> 是用于求字符数组的长度，其参数是<span class="token keyword">char</span><span class="token operator">*</span>，当数组名作为参数传入时，实际上数组就退化成指针了。返回的长度大小不包括 <span class="token char">'\0'</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>其他</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//判断是否为空empty</span>str<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//填充内容resize：</span>原型为<span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">char</span> chr<span class="token punctuation">)</span>把字符串当前大小置为len，多去少补，多出的字符chr填充不足的部分，resize将会修改该字符串的占用空间。string str <span class="token operator">=</span> <span class="token string">"HEllo"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token char">'K'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、矩阵乘法"><a href="#三、矩阵乘法" class="headerlink" title="三、矩阵乘法"></a>三、矩阵乘法</h3><ol><li><p>两个矩阵的乘法仅当第一个矩阵A的列数和另一个矩阵B的行数相等时才能定义。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ROW</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COL</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> p<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span> <span class="token comment">// 输入第一个矩阵行数列数</span>cin <span class="token operator">&gt;&gt;</span> p <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span> <span class="token comment">// 输入第二个矩阵行数列数</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输入第一个矩阵</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输入第二个矩阵</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment">// 矩阵相乘</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token comment">// 输出相乘后的矩阵</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>卷积：用一个模板和另一个模板对比，进行卷积运算。目的是是目标与目标之间的差距变得更大，卷积在数字图像处理中常见的应用为锐化和边缘提取。</p><ul><li>假设一个卷积核h，将其倒置（翻转180°）</li></ul><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303221809189.png" alt="矩阵翻转"></p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303221819171.png" alt="image-20230322181931132" style="zoom:80%;"><ul><li><p>有一个待处理矩阵x：</p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303221815453.png" alt="image-20230322181521426" style="zoom:80%;"></li><li><p>h*x = Y：将卷积核h的中心对准x的第一个元素，然后对应元素相乘后相加，没有元素的地方补0。</p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303221822796.png" alt="image-20230322182256722" style="zoom:67%;"></li><li><p>Y11 = 1<em>0+2</em>0+1<em>0+0</em>0+0<em>1+0</em>2+-1<em>0+-2</em>5+-1*6=-16.</p></li><li><p>每个元素都像这样计算出来就可以得到一个输出矩阵，就是卷积结果。</p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303221824559.png" alt="image-20230322182451531" style="zoom: 67%;"></li><li><p>零填充，单位滑动。</p></li></ul></li></ol><h2 id="第五章-树"><a href="#第五章-树" class="headerlink" title="第五章 树"></a>第五章 树</h2><h3 id="一、树的性质"><a href="#一、树的性质" class="headerlink" title="一、树的性质"></a>一、树的性质</h3><ol><li><p>树是一种非线性数据结构，树是由结点或顶点和边组成的(可能是非线性的)且不存在着任何环的一种数据结构。没有结点的树称为空(null或empty)树。一棵非空的树包括一个根结点，还(很可能)有多个附加结点，所有结点构成一个多级分层结构。</p></li><li><p>树的定义：n个结点组成的有限集合。n=0，空树；n&gt;0,1个根结点，m个互不相交的有限集，每个子集为根的子树。</p></li><li><p>树：</p><ul><li><p>结点的度：树中某个结点的子树的个数。</p></li><li><p>树的度：树中各结点的度的最大值。</p></li><li><p>分支结点：度不为零的结点。</p></li><li><p>叶子结点：度为零的结点。</p></li><li><p>路径：i-&gt;j；路径长度：路径经过结点数目减1。</p></li><li><p>孩子结点：某结点的后继结点；双亲结点：该结点为其孩子结点的双亲结点（父母结点）；兄弟结点：同一双亲的孩子结点；子孙结点：某结点所有子树中的结点；祖先结点：从树结点到该结点的路径上的结点。</p></li><li><p>结点的层次：根结点为第一层（以此类推）；树的高度：树中结点的最大层次。</p></li><li><p>有序树：树中结点子树按次序从左向右安排，次序不能改变；无序树：与之相反</p></li><li><p>森林：互不相交的树的集合。</p></li></ul></li><li><p>树的性质：</p><ul><li>树的结点树为所有结点度数（边）加1（加根结点）。</li><li>度为m的树中第i层最多有m^(i-1)个结点。</li><li>高度为h的m叉树至多(m^h-1)/(m-1)个结点。</li><li>具有n个结点的m叉树的最小高度为logm( n(m-1) + 1 ) 向上取整。</li></ul></li></ol><h3 id="二、二叉树的性质"><a href="#二、二叉树的性质" class="headerlink" title="二、二叉树的性质"></a>二、二叉树的性质</h3><ol><li><p>二叉树是n(n&gt;=0)个结点的有限集合，该集合或者为空集（称为空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的<strong>左子树</strong>和<strong>右子树</strong>组成。</p></li><li><p><strong>二叉树的特点</strong></p><p>1）每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。</p><p>2）左子树和右子树是有顺序的，次序不能任意颠倒。</p><p>3）即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。</p></li><li><p><strong>二叉树的性质</strong></p><p>性质1：二叉树第i层上的结点数目最多为 2的(i-1)次方个节点(i≥1)。<br>性质2：深度为k的二叉树至多有2的k次方-1个结点(k≥1)。<br>性质3：包含n个结点的二叉树的高度至少为log2 (n+1)。<br>性质4：在任意一棵二叉树中，若终端结点的个数为n0，度为2的结点数为n2，则n0=n2+1。</p></li><li><p><strong>满二叉树</strong></p><p>满二叉树：在一棵二叉树中。如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</p><p>满二叉树的特点有：</p><p>1）叶子只能出现在最下一层。出现在其它层就不可能达成平衡。</p><p>2）非叶子结点的度一定是2。</p><p>3）在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</p></li><li><p><strong>完全二叉树</strong>：对一颗具有n个结点的二叉树按层编号，如果编号为i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。</p></li></ol><h3 id="三、二叉树的操作"><a href="#三、二叉树的操作" class="headerlink" title="三、二叉树的操作"></a>三、二叉树的操作</h3><ol><li><p>设计代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">biTreeNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">biTreeNode</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">biTreeNode</span> <span class="token operator">*</span>right<span class="token punctuation">;</span><span class="token punctuation">}</span> Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    biTreeNode <span class="token operator">*</span>root<span class="token punctuation">;</span><span class="token punctuation">}</span> Tree<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>biTreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Tree tree<span class="token punctuation">;</span>    tree<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> temp<span class="token punctuation">;</span>        <span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tree<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span>Tree <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    biTreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span>biTreeNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>biTreeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token operator">-&gt;</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        tree<span class="token operator">-&gt;</span>root <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        biTreeNode <span class="token operator">*</span>temp <span class="token operator">=</span> tree<span class="token operator">-&gt;</span>root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> temp<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token comment">// 小于就进左孩子</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    temp<span class="token operator">-&gt;</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token comment">// 大于为右孩子</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    temp<span class="token operator">-&gt;</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>biTreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>二叉树的遍历</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//先序遍历 根左右</span><span class="token keyword">void</span> <span class="token function">preorder</span><span class="token punctuation">(</span>biTreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//中序遍历 左根右</span><span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>biTreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//后序遍历 左右根</span><span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span>biTreeNode <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postorder</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> node<span class="token operator">-&gt;</span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>前缀表达式（波兰式）：符号迁移，波兰式表达形式不需要括号，利用栈中缀转后缀。借助括号的形式表示优先级。</p></li><li><p>深度优先遍历（DFS）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span>    <span class="token comment">// 记录每次排列</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> book<span class="token punctuation">;</span> <span class="token comment">// 标记是否被访问</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> k<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment">// k个数已经选完，可以进行输出等相关操作</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cur<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment">// 遍历 n个数，并从中选择k个数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                          <span class="token comment">// 若没有被访问</span>            a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 选定本输，并加入数组</span>            book<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 标记已被访问</span>            <span class="token function">DFS</span><span class="token punctuation">(</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归，cur+1</span>            book<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 释放，标记为没被访问，方便下次引用</span>            a<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 弹出刚刚标记为未访问的数</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="四、森林"><a href="#四、森林" class="headerlink" title="四、森林"></a>四、森林</h3><ol><li><p>森林：m（&gt;=0）棵互不相交的树的集合 ，可以是0棵树。</p></li><li><p>树转换成二叉树：左孩子右兄弟法。树转换成二叉树其右子树一定为空。</p></li><li><p>二叉树转换成树：左孩子右兄弟法，逆。</p></li><li><p>二叉树与森林转换：左孩子右兄弟。</p></li></ol><h3 id="五、哈夫曼树"><a href="#五、哈夫曼树" class="headerlink" title="五、哈夫曼树"></a>五、哈夫曼树</h3><ol><li><p><strong>哈夫曼树</strong>（Huffman Tree），又名：最优二叉树。给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p></li><li><p>名词解释：</p><ul><li>路径：在一棵树中，一个结点到另一个结点之间的通路，称为路径。</li><li>路径长度：在一条路径中，每经过一个结点，路径长度都要加 1 。例如在一棵树中，规定根结点所在层数为1层，那么从根结点到第 i 层结点的路径长度为 i - 1 。</li><li>结点的权：给每一个结点赋予一个新的数值，被称为这个结点的权。</li><li>结点的带权路径长度：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。</li><li><strong>树的带权路径长度</strong>为树中所有叶子结点的带权路径长度之和。通常记作 “WPL”。</li></ul></li><li><p>哈夫曼树的建立与查找算法</p><p>查找算法：查找权重值最小的两个结点的思想是：从待处理数据的头部位置开始，首先找到两个无父结点的结点（说明还未使用其构建成树），然后和后续无父结点的结点依次做比较，有两种情况需要考虑：</p><ul><li>如果比两个结点中较小的那个还小，就保留这个结点，删除原来较大的结点；</li><li>如果介于两个结点权重值之间，替换原来较大的结点；</li></ul></li><li><p>哈夫曼编码：(Huffman Coding)，又称霍夫曼编码，是一种编码方式，可变字长编码(VLC)的一种。</p><ul><li>主要目的是根据使用频率来最大化节省字符（编码）的存储空间。</li><li>霍夫曼编码是一种无前缀编码。解码时不会混淆。其主要应用在数据压缩，加密解密等场合，也包括文件传输的场合。</li><li>如果考虑到进一步节省存储空间，就应该将出现概率大（占比多）的字符用尽量少的0-1进行编码，也就是更靠近根（节点少），这也就是最优二叉树-哈夫曼树。</li></ul></li></ol><h2 id="第六章-图"><a href="#第六章-图" class="headerlink" title="第六章 图"></a>第六章 图</h2><h3 id="一、图的基本概念"><a href="#一、图的基本概念" class="headerlink" title="一、图的基本概念"></a>一、图的基本概念</h3><ol><li>一个图G是一个二元组，即序偶&lt;V,E&gt;，或记作G=&lt;V,E&gt; ，其中V是有限非空集合，称为G的顶点集,V中的元素称为顶点或结点；E称为 G的边的集合，所有的边ei都属于E，都有v中的结点与之对应，称ei为 G的边。</li><li>图的基本概念<ul><li>无向图：每条边都是无向边的图。</li><li>有向图：每条边都是有向边的图。</li><li>混合图：在一个图中，有些边是有向边，另一些边是无向边。</li><li>有限图：一个图的点集和边集都是有穷集的图。</li><li>零图：边集为空集的图。</li><li>平凡图：仅有一个结点而没有边构成的图。</li><li>关联：若有ei=(u,v) 且ei属于E ，则称u是和v相关联的。</li><li>孤立点：无边关联的点。</li><li>自环：若一条边所关联的两个结点重合，则称此边为自环。</li><li>邻接：关联于同一条边的两个点称为邻接的；关联于同一个点的两条边和 是邻接的（或相邻的）。</li></ul></li><li>在任意图中，度数为奇数的点必然有偶数个或0个。</li><li>所有点入度之和等于出度之和。</li></ol><h3 id="二、图的存储"><a href="#二、图的存储" class="headerlink" title="二、图的存储"></a>二、图的存储</h3><ol><li><p>无向图的邻接矩阵</p><p>邻接矩阵存在以下缺点</p><p>a) 浪费空间—— 存稀疏图（点很多而边很少）有大量无效元素</p><p>b) 浪费时间—— 统计稀疏图中一共有多少条边</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span><span class="token keyword">int</span> adj<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 定义邻接矩阵</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token comment">// 输入两条边</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span> <span class="token comment">// 供输入n对边 ,m个顶点 (x,y &lt;= m)</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>        adj<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        adj<span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> adj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有向图的邻接表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">maxSize</span> <span class="token expression"><span class="token number">1000</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> adjvex<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ArcNode</span> <span class="token operator">*</span>nextarc<span class="token punctuation">;</span><span class="token punctuation">}</span> ArcNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    ArcNode <span class="token operator">*</span>firstarc<span class="token punctuation">;</span><span class="token punctuation">}</span> Vnode<span class="token punctuation">;</span><span class="token comment">// 可以利用结构体整体结构，也可以拆分结构体变为单独搜索</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    Vnode adjlist<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span> AGraph<span class="token punctuation">;</span>AGraph <span class="token operator">*</span>graph<span class="token punctuation">;</span><span class="token comment">// 插入链表末尾</span><span class="token keyword">void</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>ArcNode <span class="token operator">*</span>node<span class="token punctuation">,</span> ArcNode <span class="token operator">*</span>newNode<span class="token punctuation">)</span><span class="token punctuation">{</span>    ArcNode <span class="token operator">*</span>p <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>nextarc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>nextarc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token operator">-&gt;</span>nextarc <span class="token operator">=</span> newNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    graph <span class="token operator">=</span> <span class="token punctuation">(</span>AGraph <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>AGraph<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入顶点的数目: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> graph<span class="token operator">-&gt;</span>n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入图中边的数目: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> graph<span class="token operator">-&gt;</span>e<span class="token punctuation">;</span>    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> v <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        graph<span class="token operator">-&gt;</span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ArcNode <span class="token operator">*</span>node<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>e<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入联通点A与B"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> u <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">;</span>        node <span class="token operator">=</span> <span class="token punctuation">(</span>ArcNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ArcNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-&gt;</span>adjvex <span class="token operator">=</span> v<span class="token punctuation">;</span>        node<span class="token operator">-&gt;</span>nextarc <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        graph<span class="token operator">-&gt;</span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> u<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">// 边</span>            graph<span class="token operator">-&gt;</span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token comment">// 插入边</span>            <span class="token function">insertNode</span><span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>adjlist<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">travseTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token operator">-&gt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>graph<span class="token operator">-&gt;</span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"与"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"连接的点有："</span><span class="token punctuation">;</span>            ArcNode <span class="token operator">*</span>p <span class="token operator">=</span> graph<span class="token operator">-&gt;</span>adjlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>adjvex <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>nextarc<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">travseTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>BFS</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">BFSL</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> pGraph G<span class="token punctuation">,</span> <span class="token keyword">int</span> visited<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 从pos点开始进行广度优先遍历无向图</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> queue<span class="token punctuation">[</span>G<span class="token operator">-&gt;</span>Vnum<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 队列辅助BFS遍历</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 队头、队尾指针</span>    Arcnode <span class="token operator">*</span>p<span class="token punctuation">;</span>    queue<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> pos<span class="token punctuation">;</span>    visited<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 标记遍历过</span>    tail<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> tail<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pos <span class="token operator">=</span> queue<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 出队操作</span>        head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> G<span class="token operator">-&gt;</span>vertice<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>firstarc<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 判断是否遍历过</span>            <span class="token punctuation">{</span>                queue<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">;</span> <span class="token comment">// 入队操作</span>                visited<span class="token punctuation">[</span>p<span class="token operator">-&gt;</span>adjvex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 标记遍历过</span>                tail<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>DFS</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//参数用来表示状态  </span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>到达终点状态<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//根据需求添加  </span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>越界或者是不合法状态<span class="token punctuation">)</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>特殊状态<span class="token punctuation">)</span><span class="token comment">//剪枝，去除一些不需要访问的场景，不一定i俺家</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>扩展方式<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>扩展方式所达到状态合法<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              修改操作<span class="token punctuation">;</span><span class="token comment">//根据题意来添加  </span>            标记；              dfs（）；              <span class="token punctuation">(</span>还原标记<span class="token punctuation">)</span>；              <span class="token comment">//是否还原标记根据题意  </span>            <span class="token comment">//如果加上（还原标记）就是 回溯法  </span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、最小生成树"><a href="#三、最小生成树" class="headerlink" title="三、最小生成树"></a>三、最小生成树</h3><ol><li>将给出的所有点连接起来（即从一个点可到任意一个点），且连接路径之和最小的图叫最小生成树。最小生成树属于一种树形结构（树形结构是一种特殊的图），或者说是直链型结构，因为当n个点相连，且路径和最短，那么将它们相连的路一定是n-1条。</li><li>普利姆(<strong>Prim</strong>)算法求最小生成树，也就是在包含n个顶点的连通图中，找出只有(n-1)条边包含所有n个顶点的连通子图，也就是所谓的极小连通子图。</li><li>普利姆算法加点，克鲁斯卡尔算法加边。</li></ol><h3 id="四、最短路径"><a href="#四、最短路径" class="headerlink" title="四、最短路径"></a>四、最短路径</h3><ol><li>迪杰斯特拉(Dijkstra)算法</li><li>弗洛伊德(Floyd)算法</li></ol><h2 id="第七章-查找算法"><a href="#第七章-查找算法" class="headerlink" title="第七章 查找算法"></a>第七章 查找算法</h2><h3 id="一、顺序查找"><a href="#一、顺序查找" class="headerlink" title="一、顺序查找"></a>一、顺序查找</h3><ol><li><p>从一些数据之中，找到一个特殊的数据的实现方法。查找算法与遍历有极高的相似性，唯一的不同就是查找算法可能并不一定会将每一个数据都进行访问，有些查找算法如二分查找等，并不需要完全访问所有的数据。</p></li><li><p>顺序查找：线性的从一个端点开始，将所有的数据依次访问，并求得所需要查找到的数据的位置，此时，线性查找可以称呼为遍历。</p></li><li><p>代码实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iosteam&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> Shangping<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Shangping<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到次品，他的位置在：%d"</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、二分查找"><a href="#二、二分查找" class="headerlink" title="二、二分查找"></a>二、二分查找</h3><ol><li><p><strong>二分查找</strong>也称<strong>折半查找</strong>（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列，注意必须要是有序排列。</p></li><li><p>二分查找的基本思想是将n个元素分成大致相等的两部分，取a[n/2]与x做比较，如果x=a[n/2],则找到x,算法中止；如果x&lt;a[n/2],则只要在数组a的左半部分继续搜索x,如果x&gt;a[n/2],则只要在数组a的右半部搜索x</p></li><li><p>代码实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token comment">// 二分查找算法，找不到就返回-1，找到了就返回值</span><span class="token keyword">int</span> <span class="token function">binary_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hight <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> middle<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> hight<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        middle <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> hight<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">=</span> target<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已找到该值，数组下标为:%d\n"</span><span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            hight <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            low <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"未找到该值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b=%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="三、分块查找"><a href="#三、分块查找" class="headerlink" title="三、分块查找"></a>三、分块查找</h3><ol><li><p>分块查找</p><p>分块查找是折半查找和顺序查找的一种改进方法，分块查找由于只要求索引表是有序的，对块内节点没有排序要求，因此特别适合于节点动态变化的情况，其核心有二索引表，二是分块处理。</p></li><li><p>分块查找要求把一个大的线性表分解成若干块，每块中的节点可以任意存放，但块与块之间必须排序。假设是按关键码值非递减的，那么这种块与块之间必须满足已排序要求，实际上就是对于任意的i，第i块中的所有节点的关键码值都必须小于第i+1块中的所有节点的关键码值。此外，还要建立一个索引表，把每块中的最大关键码值作为索引表的关键码值，按块的顺序存放到一个辅助数组中，显然这个辅助数组是按关键码值费递减排序的。查找时，首先在索引表中进行查找，确定要找的节点所在的块。由于索引表是排序的，因此，对索引表的查找可以采用顺序查找或折半查找；然后，在相应的块中采用顺序查找，即可找到对应的节点。</p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303231306632.png" alt="image-20230323130627544" style="zoom:80%;"></li></ol><h3 id="四、二叉排序树"><a href="#四、二叉排序树" class="headerlink" title="四、二叉排序树"></a>四、二叉排序树</h3><ol><li><p><strong>二叉排序树</strong>（Binary Sort Tree），又称二叉查找树（Binary Search Tree），亦称二叉搜索树。该树属于一种输入数据就默认产生一种顺序的数据结构。</p></li><li><p>性质：</p><p>a) 若左子树不空，则左子树上所有结点的值均小于或等于它的根结点的值；</p><p>b) 若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；</p><p>c) 左、右子树也分别为二叉排序树；</p><p>即对于每一个根结点，其左孩子永远小于根，右孩子永远大于根。</p></li><li><p>代码实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span> <span class="token comment">/* Status是函数的类型,其值是函数结果状态代码，如OK等 */</span><span class="token comment">/* 二叉树的二叉链表结点结构定义 */</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token comment">/* 结点结构 */</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>                        <span class="token comment">/* 结点数据 */</span>    <span class="token keyword">struct</span> <span class="token class-name">BiTNode</span> <span class="token operator">*</span>lchild<span class="token punctuation">,</span> <span class="token operator">*</span>rchild<span class="token punctuation">;</span> <span class="token comment">/* 左右孩子指针 */</span><span class="token punctuation">}</span> BiTNode<span class="token punctuation">,</span> <span class="token operator">*</span>BiTree<span class="token punctuation">;</span><span class="token comment">/* 递归查找二叉排序树T中是否存在key, */</span><span class="token comment">/* 指针f指向T的双亲，其初始调用值为NULL */</span><span class="token comment">/* 若查找成功，则指针p指向该数据元素结点，并返回TRUE */</span><span class="token comment">/* 否则指针p指向查找路径上访问的最后一个结点并返回FALSE */</span>Status <span class="token function">SearchBST</span><span class="token punctuation">(</span>BiTree t<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> BiTree f<span class="token punctuation">,</span> BiTree <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> <span class="token comment">/*  查找不成功 */</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>p <span class="token operator">=</span> f<span class="token punctuation">;</span>        <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> t<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token comment">/*  查找成功 */</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>p <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> t<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>lchild<span class="token punctuation">,</span> key<span class="token punctuation">,</span> t<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*  在左子树中继续查找 */</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token function">SearchBST</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>rchild<span class="token punctuation">,</span> key<span class="token punctuation">,</span> t<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*  在右子树中继续查找 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插入</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">BiTree</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    BiTree <span class="token operator">*</span>lchild<span class="token punctuation">;</span>    BiTree <span class="token operator">*</span>rchild<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 在二叉排序树中插入查找关键字key</span>BiTree <span class="token operator">*</span><span class="token function">InsertBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">BiTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> t<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        t<span class="token operator">-&gt;</span>data <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> t<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span>        t<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>lchild<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        t<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>t<span class="token operator">-&gt;</span>rchild<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// n个数据在数组d中，tree为二叉排序树根</span>BiTree <span class="token operator">*</span><span class="token function">CreateBiTree</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>tree<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        tree <span class="token operator">=</span> <span class="token function">InsertBST</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* 若二叉排序树T中存在关键字等于key的数据元素时，则删除该数据元素结点, */</span><span class="token comment">/* 并返回TRUE；否则返回FALSE。 */</span>Status <span class="token function">DeleteBST</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token comment">/* 不存在关键字等于key的数据元素 */</span>         <span class="token keyword">return</span> FALSE<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data<span class="token punctuation">)</span> <span class="token comment">/* 找到关键字等于key的数据元素 */</span>             <span class="token keyword">return</span> <span class="token function">Delete</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">DeleteBST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>lchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">DeleteBST</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-&gt;</span>rchild<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* 从二叉排序树中删除结点p，并重接它的左或右子树。 */</span>Status <span class="token function">Delete</span><span class="token punctuation">(</span>BiTree <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    BiTree q<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>rchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">/* 右子树空则只需重接它的左子树（待删结点是叶子也走此分支) */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>lchild<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment">/* 只需重接它的右子树 */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>rchild<span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token comment">/* 左右子树均不空 */</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span><span class="token operator">*</span>p<span class="token punctuation">;</span> s<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span> <span class="token comment">/* 转左，然后向右到尽头（找待删结点的前驱） */</span>        <span class="token punctuation">{</span>            q<span class="token operator">=</span>s<span class="token punctuation">;</span>            s<span class="token operator">=</span>s<span class="token operator">-&gt;</span>rchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-&gt;</span>data<span class="token operator">=</span>s<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span> <span class="token comment">/*  s指向被删结点的直接前驱（将被删结点前驱的值取代被删结点的值） */</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">!=</span><span class="token operator">*</span>p<span class="token punctuation">)</span>            q<span class="token operator">-&gt;</span>rchild<span class="token operator">=</span>s<span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span> <span class="token comment">/*  重接q的右子树 */</span>         <span class="token keyword">else</span>            q<span class="token operator">-&gt;</span>lchild<span class="token operator">=</span>s<span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span> <span class="token comment">/*  重接q的左子树 */</span>        <span class="token function">free</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="五、平衡二叉树"><a href="#五、平衡二叉树" class="headerlink" title="五、平衡二叉树"></a>五、平衡二叉树</h3><ol><li><p>平衡二叉树（Balanced Binary Tree）具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有红黑树、AVL、替罪羊树、Treap、伸展树等。 其中最为经典当属AVL树。</p></li><li><p>平衡二叉树是一种二叉排序树，其中每一个结点的左子树和右子树的高度差至多等于1。</p></li><li><p>性质：</p><ul><li>它必须是一颗二叉查找树</li><li>它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。</li><li>若将二叉树节点的平衡因子BF定义为该节点的左子树的深度减去它的右子树的深度，则平衡二叉树上所有节点的平衡因子只可能为-1,0,1.</li><li>只要二叉树上有一个节点的平衡因子的绝对值大于1，那么这颗平衡二叉树就失去了平衡。</li></ul></li><li><p>通过在一棵平衡二叉树中依次插入元素(按照二叉排序树的方式)，若出现不平衡，则要根据新插入的结点与最低不平衡结点的位置关系进行相应的调整。各个调整的方法分为LL型、RR型、LR型和RL型4种类型，其余的操作与一般的树进行插入和修改数据无异。</p></li><li><p>代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>  <span class="token comment">//结点设计 </span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>left<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span> BTNode<span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>N<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> N<span class="token operator">-&gt;</span>height<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>  BTNode<span class="token operator">*</span> <span class="token function">newNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> node <span class="token operator">=</span> <span class="token punctuation">(</span>BTNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//ll型调整 </span>BTNode<span class="token operator">*</span> <span class="token function">ll_rotate</span><span class="token punctuation">(</span>BTNode<span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>x <span class="token operator">=</span> y<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>    y<span class="token operator">-&gt;</span>left <span class="token operator">=</span> x<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>    x<span class="token operator">-&gt;</span>right <span class="token operator">=</span> y<span class="token punctuation">;</span>      y<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>y<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>y<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    x<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//rr型调整 </span>BTNode<span class="token operator">*</span> <span class="token function">rr_rotate</span><span class="token punctuation">(</span>BTNode<span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>x <span class="token operator">=</span> y<span class="token operator">-&gt;</span>right<span class="token punctuation">;</span>    y<span class="token operator">-&gt;</span>right <span class="token operator">=</span> x<span class="token operator">-&gt;</span>left<span class="token punctuation">;</span>    x<span class="token operator">-&gt;</span>left <span class="token operator">=</span> y<span class="token punctuation">;</span>      y<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>y<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>y<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    x<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>x<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//判断平衡</span><span class="token keyword">int</span> <span class="token function">getBalance</span><span class="token punctuation">(</span>BTNode<span class="token operator">*</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">height</span><span class="token punctuation">(</span>N<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">height</span><span class="token punctuation">(</span>N<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//插入结点&amp;数据</span>BTNode<span class="token operator">*</span> <span class="token function">insert</span><span class="token punctuation">(</span>BTNode<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">newNode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span>        node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&gt;</span> node<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span>        node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>      node<span class="token operator">-&gt;</span>height <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token function">getBalance</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token comment">//LL型</span>        <span class="token keyword">return</span> <span class="token function">ll_rotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">&gt;</span> node<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span>     <span class="token comment">//RR型</span>        <span class="token keyword">return</span> <span class="token function">rr_rotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">&gt;</span> node<span class="token operator">-&gt;</span>left<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//LR型</span>        node<span class="token operator">-&gt;</span>left <span class="token operator">=</span> <span class="token function">rr_rotate</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">ll_rotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">&lt;</span> node<span class="token operator">-&gt;</span>right<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//RL型</span>        node<span class="token operator">-&gt;</span>right <span class="token operator">=</span> <span class="token function">ll_rotate</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">rr_rotate</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment">//遍历</span><span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> root<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    BTNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"前序遍历："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="第八章-排序"><a href="#第八章-排序" class="headerlink" title="第八章 排序"></a>第八章 排序</h2><h3 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h3><ol><li><p>从第一个元素开始逐个比较相邻的元素。如果第一个比第二个大（a[1]&gt;a[2]），就交换他们两个。</p><p>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。此时在这一点，最后的元素应该会是最大的数，我们也称呼一遍这样的操作为：一趟冒泡排序。</p><p>针对所有的元素重复以上的步骤，每一趟冒泡排序的最大值已放在最后，下一次操作则不需要将此最大值纳入计算计算。</p><p>持续对每次对越来越少的元素，重复上面的步骤，直到没有任何一对数字需要比较，即完成冒泡排序。</p><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303231601871.png" alt="image-20230323160119801"></p><p>到了第四趟的时候，整个数据已经排序结束了，但是程序还在进行，直到第5，6，7趟结束程序才算真正的结束，这其实是一种浪费算力的表现。</p></li><li><p>代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token function">bubble_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//namespace std命名空间的使用，std自带了交换函数swap(a,b)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最坏情况：O(n^2)</p><p>最好情况：O(n)</p><p>平均情况：O(n^2)</p><p>空间复杂度：S(n)=O(1)</p><p>稳定性：稳定排序</p></li></ol><h3 id="二、简单选择排序"><a href="#二、简单选择排序" class="headerlink" title="二、简单选择排序"></a>二、简单选择排序</h3><ol><li><p>设置两个记录i和j，i自数组第一个元素开始，j自i+1个元素开始。</p><p>接着j遍历整个数组，选出整个数组最小的值，并让这个最小的值和i的位置交换（如果i选择的元素是最小的则不需要交换），我们称这个过程为一趟选择排序。</p><p>i选中下一个元素(i++)，重复进行每一趟选择排序。</p><p>持续上述步骤，使得i到达n-1处，即完成排序 。</p></li><li><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303231616770.png" alt="image-20230323161628741"></p></li><li><p>代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token function">select_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">select_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        min <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                min <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>每一趟从待排序的数据元素中选出最小的一个元素，顺序放在已排好序的数列的最后，直到全部待排序的数据元素排完，我们只需要进行n-1趟排序即可，因为最后剩下的一个数据一定是整体数据中最大的数据。</p></li><li><p>最坏情况：O(n^2)</p><p>最好情况：O(1)      //即不需要排序，本身已是正序</p><p>平均情况：O(n^2)</p><p>空间复杂度：S(n)=O(1)</p><p>稳定性：不稳定排序</p></li></ol><h3 id="三、直接插入排序"><a href="#三、直接插入排序" class="headerlink" title="三、直接插入排序"></a>三、直接插入排序</h3><ol><li><p>每一步将一个待排序的元素，按其排序码的大小，插入到前面已经排好序的一组元素的适当位置上去，直到元素全部插入为止。</p></li><li><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303231631924.png" alt="image-20230323163134895"></p></li><li><p>代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token function">insert_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 后移插入</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> temp<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            a<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment">// 跳出是做过j--，但没有移动，所以j+1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最坏情况：O(N^2)</p><p>最好情况：O(N^2)</p><p>平均情况：O(N^2)</p><p>稳定性：稳定排序</p></li></ol><h3 id="四、希尔排序"><a href="#四、希尔排序" class="headerlink" title="四、希尔排序"></a>四、希尔排序</h3><ol><li><p>递减增量排序算法，是一种非稳定的更高效的插入排序。先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p></li><li><p>过程如下：</p><ol><li>选择一个增量序列 t1，t2，……，tk，其中 ti &gt; tj, tk = 1；</li><li>按增量序列个数 k，对序列进行 k 趟排序；</li><li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ol></li><li><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303231659992.png" alt="image-20230323165944967"></p></li><li><p>代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/* * 希尔排序 * 参数说明： *     a -- 待排序的数组 *     n -- 数组的长度 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token function">shell_sort</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> gap<span class="token punctuation">;</span>    <span class="token comment">// gap为步长，每次减为原来的一半。</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>gap <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 共gap个组，对每一组都执行直接插入排序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gap<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> gap<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> gap<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">// 如果a[j] &lt; a[j-gap]，则寻找a[j]位置，</span>                <span class="token comment">// 并将后面数据的位置都后移。</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">-</span> gap<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> tmp<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        a<span class="token punctuation">[</span>k <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                        k <span class="token operator">-=</span> gap<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    a<span class="token punctuation">[</span>k <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>算法时间复杂度</p><p>最坏情况：O(n^2)</p><p>最好情况：O(n)</p><p>平均情况：O(n^2)</p><p>稳定性：不稳定排序</p></li></ol><h3 id="五、堆排序"><a href="#五、堆排序" class="headerlink" title="五、堆排序"></a>五、堆排序</h3><ol><li><p>堆是一种非线性的数据结构，可以把堆看作一个数组，也可以被看作一个完全二叉树，通俗来讲堆其实就是利用完全二叉树的结构来维护的一维数组。</p></li><li><p>按照堆的特点可以把堆分为大顶堆和小顶堆</p><p>a)大顶堆：每个结点的值都大于或等于其左右孩子结点的值</p><p>b)小顶堆：每个结点的值都小于或等于其左右孩子结点的值</p></li><li><p>代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">max_heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 建立父节点指标和子节点指标</span>    <span class="token keyword">int</span> dad <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> son <span class="token operator">=</span> dad <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>son <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span>    <span class="token punctuation">{</span>                                                  <span class="token comment">// 若子节点指标在范围内才做比较</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>son <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>son<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>son <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 先比较两个子节点大小，选择最大的</span>            son<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>dad<span class="token punctuation">]</span> <span class="token operator">&gt;</span> arr<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 如果父节点大于子节点代表调整完毕，直接跳出函数</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span> <span class="token comment">// 否则交换父子内容再继续子节点和孙节点比较</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>dad<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>son<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dad <span class="token operator">=</span> son<span class="token punctuation">;</span>            son <span class="token operator">=</span> dad <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 初始化，i从最后一个父节点开始调整</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token function">max_heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 先将第一个元素和已经排好的元素前一位做交换，再从新调整(刚调整的元素之前的元素)，直到排序完毕</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">max_heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>算法时间复杂度</p><p>最坏情况：O(n^2)</p><p>最好情况：O(n)</p><p>平均情况：O(nlogn)</p><p>稳定性：不稳定排序</p></li></ol><h3 id="六、归并排序"><a href="#六、归并排序" class="headerlink" title="六、归并排序"></a>六、归并排序</h3><ol><li><p>将两个有序的数列合并成一个大的有序的序列。通过递归，层层合并，即为归并，归并排序的算法效率仅次于快速排序，是一种稳定的算法，需要建立两倍的数组空间，一般用于对总体而言无序，但是各子项又相对有序【并不是完全乱序】的情况比较适用。</p></li><li><p>a)申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</p><p>b)设定两个指针，最初位置分别为两个已经排序序列的起始位置</p><p>c)比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</p><p>重复步骤c直到某一指针超出序列尾</p><p>将另一序列剩下的所有元素直接复制到合并序列尾</p></li><li><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303231754901.png" alt="image-20230323175449875"></p></li><li><p>代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 归并排序（C-递归版）</span><span class="token keyword">void</span> <span class="token function">merge_sort_recursive</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> reg<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">,</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> start<span class="token punctuation">;</span>    <span class="token keyword">int</span> start1 <span class="token operator">=</span> start<span class="token punctuation">,</span> end1 <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">int</span> start2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end2 <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token function">merge_sort_recursive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> start1<span class="token punctuation">,</span> end1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort_recursive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> start2<span class="token punctuation">,</span> end2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start1 <span class="token operator">&lt;=</span> end1 <span class="token operator">&amp;&amp;</span> start2 <span class="token operator">&lt;=</span> end2<span class="token punctuation">)</span>        reg<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>start1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>start2<span class="token punctuation">]</span> <span class="token operator">?</span> arr<span class="token punctuation">[</span>start1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> arr<span class="token punctuation">[</span>start2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start1 <span class="token operator">&lt;=</span> end1<span class="token punctuation">)</span>        reg<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>start1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start2 <span class="token operator">&lt;=</span> end2<span class="token punctuation">)</span>        reg<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>start2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> start<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> reg<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> reg<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">merge_sort_recursive</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>算法时间复杂度</p><p>最坏情况O(nlogn)</p><p>最好情况O(nlogn)</p><p>平均情况O(nlogn)</p><p>空间复杂度O(n)  注：归并排序需要创建一个与原数组相同长度的数组来辅助排序</p></li></ol><h3 id="七、快速排序"><a href="#七、快速排序" class="headerlink" title="七、快速排序"></a>七、快速排序</h3><ol><li><p>首先在数组中选择一个基准点，然后分别从数组的两端扫描数组，设两个指示标志（low指向起始位置，high指向末尾)，首先从后半部分开始，如果发现有元素比该基准点的值小，就交换low和high位置的值，然后从前半部分开始扫描，发现有元素大于基准点的值，就交换low和high位置的值，如此往复循环，直到low&gt;=high,然后把基准点的值放到high这个位置。一次排序就完成了。</p><p>以后采用递归的方式分别对前半部分和后半部分排序，当前半部分和后半部分均有序时该数组就自然有序了。</p></li><li><p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303231801529.png" alt="image-20230323180124494"></p></li><li><p>代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Quick_Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>begin <span class="token operator">&gt;</span> end<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> tmp <span class="token operator">&amp;&amp;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">)</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tmp <span class="token operator">&amp;&amp;</span> j <span class="token operator">&gt;</span> i<span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token function">Quick_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Quick_Sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>算法时间复杂度</p><p>最坏情况：O(n^2)</p><p>最好情况：O(nlogn)</p><p>平均情况：O(nlogn)</p><p>稳定性：不稳定排序</p></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>   <img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303231804954.png" alt="image-20230323180441922"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
            <tag> cpp </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C指针</title>
      <link href="/2019/03/29/c-zhi-zhen/"/>
      <url>/2019/03/29/c-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h2 id="C语言指针篇"><a href="#C语言指针篇" class="headerlink" title="C语言指针篇"></a>C语言指针篇</h2><h3 id="一、int-p"><a href="#一、int-p" class="headerlink" title="一、int * p"></a>一、int * p</h3><ol><li><p>int * p中变量名是p，类型为int*，整型的指针类型。</p></li><li><p>赋值方式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"p = %d\n"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p = 6618646 a的地址</span><span class="token keyword">int</span> <span class="token operator">*</span> r <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以把存放一个int类型变量的地址赋给一个int * 指针类型的变量。</p></li><li><p>‘=’左边是一个int * 指针类型的变量 ，可以存放放置着int类型数值的地址。</p></li><li><p>‘=’右边是&amp;a，a是int类型的变量数值5，&amp;是取地址符，&amp;a就是拿到int类型a的数值的地址。</p></li></ol><h3 id="二、int-q"><a href="#二、int-q" class="headerlink" title="二、int ** q"></a>二、int ** q</h3><ol><li><p>int ** q中的变量名是q，类型为int ** 。</p></li><li><p>int * 中存放的是int类型数据的地址。</p></li><li><p>int ** 中存放的是int类型数据的地址的地址。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span> q<span class="token punctuation">;</span>q <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"q = %d\n"</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//q= 6618626 p的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>指向关系：a&lt;—-p&lt;—-q</p></li></ol><h3 id="三、int-m"><a href="#三、int-m" class="headerlink" title="三、int *** m"></a>三、int *** m</h3><ol><li><p>int *** m中变量名是m，类型为<code>int ***</code>。</p></li><li><p>int ***中存放的是int类型的地址的地址的地址。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> m<span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token operator">&amp;</span>q<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"m = %d\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//m = 6618606 q的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="四、指针操作"><a href="#四、指针操作" class="headerlink" title="四、指针操作"></a>四、指针操作</h3><ol><li><p>* 操作就是取值操作，即取出指针变量存放的地址中所存放的数据。</p></li><li><p>分析这种连着好几个*后面跟个变量的表达式，需要从右往左依次抛开</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>m<span class="token punctuation">;</span> 就是<span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token operator">*</span> m <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>，看的时候需要从最里层一层一层抛开。    <span class="token operator">*</span>p<span class="token punctuation">;</span>先看成<span class="token operator">*</span>（p）<span class="token punctuation">,</span>再从里向外看，首先他有一个变量p，所有直接可以先从内存中拿到p存放的数据<span class="token number">6618636</span><span class="token punctuation">(</span>p中的数据<span class="token punctuation">)</span>，再找到内存中<span class="token number">6618636</span>那片内存，最后取出<span class="token number">6618636</span>中的存放数据<span class="token number">5</span><span class="token punctuation">(</span>具体数据<span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>m <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>先看成 <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>再从里向外看先从内存中拿到m存放的数据<span class="token number">6618616</span><span class="token punctuation">(</span>m中的数据<span class="token punctuation">)</span>，再从内存中找到<span class="token number">6618616</span>那片内存，取出存放的数据<span class="token number">6618624</span><span class="token punctuation">(</span><span class="token operator">*</span>q中存放的数据<span class="token punctuation">)</span>，完成了 <span class="token operator">*</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span>操作，再从内存中找到<span class="token number">6618624</span>那片内存，取出存放的数据<span class="token number">6618636</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span> 中存放的数据<span class="token punctuation">)</span>，完成了 <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span>）操作，再从内存中找到<span class="token number">6618636</span> 那片内存，取出存放的数据<span class="token number">5</span><span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 中存放的数据<span class="token punctuation">)</span>，完成了 <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>操作， （几个<span class="token operator">*</span>查找几层<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C程序设计</title>
      <link href="/2019/03/16/c-cheng-xu-she-ji/"/>
      <url>/2019/03/16/c-cheng-xu-she-ji/</url>
      
        <content type="html"><![CDATA[<p>C语言是一种通用的、面向过程式的计算机程序设计语言。1972 年，为了移植与开发 UNIX 操作系统，丹尼斯·里奇在贝尔电话实验室设计开发了 C 语言。C是一种融合了控制特性的现代语言，其设计使得用户可以自然地采用自顶向下的规划，<code>结构化的编程</code>，以及<code>模块化的设计</code>。这种做法使得编写出的程序更可靠，更易懂。</p><h2 id="第一章-C语言概述"><a href="#第一章-C语言概述" class="headerlink" title="第一章 C语言概述"></a>第一章 C语言概述</h2><h3 id="一、C语言的特点"><a href="#一、C语言的特点" class="headerlink" title="一、C语言的特点"></a>一、C语言的特点</h3><ol><li><p>高效性</p><p>C程序紧凑且运行速度快，可以表现出通常只有汇编语言才具有的精细控制能力（汇编语言是特定的CPU设计所采用的一组内部指令的助记符。不同的CPU类型使用不同的汇编语言）。</p></li><li><p>可移植性</p><p>在一个系统上编写的C程序经过很少改动或不经修改就可以其他系统上运行。</p></li><li><p>强大的功能和灵活性</p></li><li><p>面向编程人员</p><p>它允许编程人员访问硬件，并可以操纵内存中的特定位，具有丰富的运算符，能够简洁地表达自己的意图</p></li></ol><h3 id="二、C程序的执行过程"><a href="#二、C程序的执行过程" class="headerlink" title="二、C程序的执行过程"></a>二、C程序的执行过程</h3><ol><li><p>c程序的生命周期是从一个高级c语言程序开始的，为了在系统上运行<code>.c</code>程序，每条c语句都必须被其他程序转化为一系列的低级机器语言指令。</p><img src="https://gitee.com/guluyu/picgo/raw/master/blog/202303291949263.png" alt="img" style="zoom: 67%;"></li><li><p>预处理阶段。预处理器（cpp）根据以字符#开头的命令，修改原始的C程序。<code>#include &lt;stdio.h&gt;</code>命令告诉预处理器读取系统头文件<code>stdio.h</code>的内容，并将它直接插入到程序文本中。结果就得到另一个C程序，通常以<code>.i</code>作为文件扩展名。</p></li><li><p>编译阶段。编译器（ccl）将文本文件<code>.i</code>翻译成文本文件<code>.s</code>。它包含一个汇编语言程序。汇编语言程序中的每条语句都以一种标准的文本格式确切地描述了一条低级机器语言指令。汇编语言为不同编译器提供了通用的输出语言。</p></li><li><p>汇编阶段。汇编器（as）将<code>.s</code>翻译成机器语言指令，并将结果保存在目标文件<code>.o</code>中。<code>.o</code>是一种二进制文件。它的字节编码是机器语言指令而不是字符。</p></li><li><p>链接阶段。hello程序调用printf函数。它是c编译器都会提供的标准c库中的一个函数。printf函数存在于一个名为printf.o的单独的预编译好的目标文件中，而这个文件必须以某种方式合并到我们的hello.o程序中。链接器就是负责这种合并的。</p></li></ol><h3 id="三、C程序实例"><a href="#三、C程序实例" class="headerlink" title="三、C程序实例"></a>三、C程序实例</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span>     <span class="token comment">/*引入头文件*/</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>     <span class="token comment">/*一个简单的C程序*/</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>     <span class="token comment">/*定义个名字叫做number的变量*/</span>    number<span class="token operator">=</span><span class="token number">2014</span><span class="token punctuation">;</span>     <span class="token comment">/*给number赋一个值*/</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello ! I am dotcpp.com\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/*调用printf()函数*/</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This year is %d\n"</span><span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>C程序规定一个程序中有一个或多个函数，他们是C程序的基本模块。但必须有且只有一个main函数。因为C程序的执行将从main函数开始，到main函数结束而停止。</p></li><li><p>变量名：字母、数字、下划线组成，第一个字符不能是数字，区分大小写。</p></li></ol><h2 id="第二章-C语言的数据类型和基本输入输出"><a href="#第二章-C语言的数据类型和基本输入输出" class="headerlink" title="第二章 C语言的数据类型和基本输入输出"></a>第二章 C语言的数据类型和基本输入输出</h2><h3 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h3><ol><li><p><strong>常量</strong>是指程序在运行时其值不能改变的量。常量不占内存,在程序运行时它作为操作对象直接出现在运算器的各种寄存器中。</p></li><li><p><strong>变量</strong>是指在程序运行时其值可以改变的量。变量的功能就是存储数据。</p></li><li><p>C语言的基本数据类型为：整型、字符型、实数型。按其在计算机中的<code>存储方式</code>可被分为两个系列，即<strong>整数(integer)类型</strong>和<strong>浮点数(floating-point)类型</strong>。 </p><p>这三种类型之下分别是：short、int、long、char、float、double这六个关键字再加上两个符号说明符signed和unsigned就基本表示了C语言的最常用的数据类型。</p><p>32位操作系统下常见编译器下的数据类型大小及表示的数据范围：</p></li></ol><table><thead><tr><th align="center">类型名称</th><th align="center">类型关键字</th><th align="center">占字节数</th><th align="center">其他叫法</th><th align="center">表示的数据范围</th></tr></thead><tbody><tr><td align="center">字符型</td><td align="center">char</td><td align="center">1</td><td align="center">signed char</td><td align="center">-128 ~ 127</td></tr><tr><td align="center">无符号字符型</td><td align="center">unsigned char</td><td align="center">1</td><td align="center">none</td><td align="center">0 ~ 255</td></tr><tr><td align="center">整型</td><td align="center">int</td><td align="center">4</td><td align="center">signed int</td><td align="center">-2,147,483,648 ~ 2,147,483,647</td></tr><tr><td align="center">无符号整型</td><td align="center">unsigned int</td><td align="center">4</td><td align="center">unsigned</td><td align="center">0 ~ 4,294,967,295</td></tr><tr><td align="center">短整型</td><td align="center">short</td><td align="center">2</td><td align="center">short int</td><td align="center">-32,768 ~ 32,767</td></tr><tr><td align="center">无符号短整型</td><td align="center">unsigned short</td><td align="center">2</td><td align="center">unsigned short int</td><td align="center">0 ~ 65,535</td></tr><tr><td align="center">长整型</td><td align="center">long</td><td align="center">4</td><td align="center">long int</td><td align="center">-2,147,483,648 ~ 2,147,483,647</td></tr><tr><td align="center">无符号长整型</td><td align="center">unsigned long</td><td align="center">4</td><td align="center">unsigned long</td><td align="center">0 ~ 4,294,967,295</td></tr><tr><td align="center">单精度浮点数</td><td align="center">float</td><td align="center">4</td><td align="center">none</td><td align="center">3.4E +/- 38 (7 digits)</td></tr><tr><td align="center">双精度浮点数</td><td align="center">double</td><td align="center">8</td><td align="center">none</td><td align="center">1.7E +/- 308 (15 digits)</td></tr><tr><td align="center">长双精度浮点数</td><td align="center">long double</td><td align="center">10</td><td align="center">none</td><td align="center">1.2E +/- 4932 (19 digits)</td></tr><tr><td align="center">长整型</td><td align="center">long long</td><td align="center">8</td><td align="center">__int64</td><td align="center">-9223372036854775808~9223372036854775808</td></tr></tbody></table><h3 id="二、关键字"><a href="#二、关键字" class="headerlink" title="二、关键字"></a>二、关键字</h3><table><thead><tr><th align="center">C语言中的32个关键字</th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">double</td><td align="center">int</td><td align="center">struct</td></tr><tr><td align="center">break</td><td align="center">else</td><td align="center">long</td><td align="center">switch</td></tr><tr><td align="center">case</td><td align="center">enum</td><td align="center">register</td><td align="center">typedef</td></tr><tr><td align="center">char</td><td align="center">extern</td><td align="center">return</td><td align="center">union</td></tr><tr><td align="center">const</td><td align="center">float</td><td align="center">short</td><td align="center">unsigned</td></tr><tr><td align="center">continue</td><td align="center">for</td><td align="center">signed</td><td align="center">void</td></tr><tr><td align="center">default</td><td align="center">goto</td><td align="center">sizeof</td><td align="center">volatile</td></tr><tr><td align="center">do</td><td align="center">if</td><td align="center">static</td><td align="center">while</td></tr></tbody></table><h2 id="第三章-C语言中的基本输入输出"><a href="#第三章-C语言中的基本输入输出" class="headerlink" title="第三章 C语言中的基本输入输出"></a>第三章 C语言中的基本输入输出</h2><h3 id="一、字符的输入输出"><a href="#一、字符的输入输出" class="headerlink" title="一、字符的输入输出"></a>一、字符的输入输出</h3><ol><li><p><strong>putchar函数</strong>是<strong>字符输出函数</strong>，其功能是在终端（显示器）输出单个字符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ch表示要输出的字符内容</span><span class="token comment">//返回值作用为：如果输出成功返回一个字符的ASCII码，失败则返回EOF即-1</span><span class="token function">putchar</span><span class="token punctuation">(</span>‘A’<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*输出大写字母A */</span><span class="token function">putchar</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*输出字符变量x的值*/</span><span class="token function">putchar</span><span class="token punctuation">(</span>‘\n’<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*换行*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>getchar</strong>函数的功能是接收用户从键盘上输入的一个字符。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//getchar会以返回值的形式返回接收到的字符。即该字符的ASCII码</span><span class="token keyword">char</span> c<span class="token punctuation">;</span>  <span class="token comment">/*定义字符变量c*/</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*将读取的字符赋值给字符变量c*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、格式化输出"><a href="#二、格式化输出" class="headerlink" title="二、格式化输出"></a>二、格式化输出</h3><ol><li><p><code>printf函数</code>，按照用户指定的格式，把指定的数据输出到屏幕上</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"格式控制字符串"</span><span class="token punctuation">,</span>输出表项<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式控制字符串用来说明输出表项中各输出项的输出格式</span><span class="token comment">//输出表项列出了要输出的项，各输出项之间用 逗号 分开</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-2d"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//负号表示左对齐(默认右对齐)，2表示占有两个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>格式控制字符串有两种：<strong>格式字符串</strong>和<strong>非格式字符串</strong>。</p><ul><li><p>非格式字符串在输出的时候原样打印;</p></li><li><p>格式字符串是以%打头的字符串，在<code>%</code>后面跟不同格式字符，用来说明输出数据的类型、形式、长度、小数位数等</p><blockquote><p>%[输出最小宽度] [.精度] [长度] 类型</p></blockquote><p><strong>常用的输出格式</strong>及含义如下：</p><table><thead><tr><th align="center">格式字符</th><th align="center">输出前缀时加’#’，如%#x</th></tr></thead><tbody><tr><td align="center">d , i</td><td align="center">以十进制形式输出有符号整数(正数不输出符号)</td></tr><tr><td align="center">o</td><td align="center">以八进制形式输出无符号整数(不输出前缀0)</td></tr><tr><td align="center">x</td><td align="center">以十六进制形式输出无符号整数(不输出前缀0x)</td></tr><tr><td align="center">u</td><td align="center">以十进制形式输出无符号整数</td></tr><tr><td align="center">f</td><td align="center">以小数形式输出单、双精度类型实数</td></tr><tr><td align="center">e</td><td align="center">以指数形式输出单、双精度实数</td></tr><tr><td align="center">g</td><td align="center">以%f或%e中较短输出宽度的一种格式输出单、双精度实数</td></tr><tr><td align="center">c</td><td align="center">输出单个字符</td></tr><tr><td align="center">s</td><td align="center">输出字符串</td></tr></tbody></table><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0%o\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%x\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5.2f\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出宽度为5(包括小数点)，并包含2位小数。</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The number is: %*d\n"</span><span class="token punctuation">,</span>width<span class="token punctuation">,</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由程序来指定字段宽度</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Weight = %*.*f\n"</span><span class="token punctuation">,</span>width<span class="token punctuation">,</span>precision<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h3 id="三、格式化输入"><a href="#三、格式化输入" class="headerlink" title="三、格式化输入"></a>三、格式化输入</h3><ol><li><p><code>scanf函数</code>，按照格式字符串的格式，从键盘上把数据输入到指定的变量之中.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"格式控制字符串"</span><span class="token punctuation">,</span>输入项地址列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//格式控制字符串不能显示提示字符串</span><span class="token comment">//地址表项中的地址给出各变量的地址，地址是由地址运算符“&amp;”后跟变量名组成</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>sacnf函数和printf函数的不同</p><ul><li><p>格式说明符中，可以指定数据的宽度，但不能指定数据的精度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span> a；<span class="token function">scanf</span><span class="token punctuation">(</span>“<span class="token operator">%</span><span class="token number">10f</span>”，<span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//正确</span><span class="token function">scanf</span><span class="token punctuation">(</span>“<span class="token operator">%</span><span class="token number">10.2f</span>”<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>输入long类型数据时必须使用%ld，输入double数据必须使用%lf或%le</p></li><li><p>附加格式说明符<code>*</code>使对应的输入数据不赋给相应的变量</p><p>printf()把%f、%e、%e、%g同时用于float类型和double类型，而scanf()只是把他们用于float类型，而用于double类型时要求使用l(字母l)修饰符</p></li></ul></li><li><p>转换说明符</p><table><thead><tr><th align="center">转换说明符</th><th align="center"></th></tr></thead><tbody><tr><td align="center">%c</td><td align="center">把输入解释成一个字符</td></tr><tr><td align="center">%d</td><td align="center">把输入解释成一个有符号十进制整数</td></tr><tr><td align="center">%e,%f,%g,%a</td><td align="center">把输入解释成一个浮点数(%a是C99的标准)</td></tr><tr><td align="center">%E,%F,%G,%A</td><td align="center">把输入解释成一个浮点数(%A是C99的标准)</td></tr><tr><td align="center">%i</td><td align="center">把输入解释成一个有符号十进制整数</td></tr><tr><td align="center">%o</td><td align="center">把输入解释成一个有符号的八进制整数</td></tr><tr><td align="center">%p</td><td align="center">把输入解释成一个指针(一个地址)</td></tr><tr><td align="center">%s</td><td align="center">把输入解释成一个字符串：输入的内容以第一个非空白字符作为开始，并且包含直到下一个空白字符的全部字符</td></tr><tr><td align="center">%u</td><td align="center">把输入解释成一个无符号十进制整数</td></tr><tr><td align="center">%x,%X</td><td align="center">把输入解释称一个有符号十六进制整数</td></tr></tbody></table><p><code>*</code>在scanf()中提供截然不同的服务，当把它放在%和说明符字母之间时，它使函数<strong>跳过</strong>相应的输入项</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%*d %*d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用*跳过scanf接收的数字,num为最后一项</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="四、字符串接收-x2F-输出函数"><a href="#四、字符串接收-x2F-输出函数" class="headerlink" title="四、字符串接收/输出函数"></a>四、字符串接收/输出函数</h3><ol><li><p>可以用<code>gets()</code>直接往字符数组里接收字符串，scanf接收时的结束标志有空格和回车，而gets不包括空格（<strong>gets可以接收空格</strong>本身作为内容的一部分）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">gets</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数原型</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\0"</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入字符串：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gets</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"刚才输入的字符串是：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以用<code>puts()</code>输出字符串</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//函数原型</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"www.dotcpp.com"</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">puts</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串或者字符数组的地址传入puts</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="第四章-运算符和表达式"><a href="#第四章-运算符和表达式" class="headerlink" title="第四章 运算符和表达式"></a>第四章 运算符和表达式</h2><h3 id="一、算数运算符"><a href="#一、算数运算符" class="headerlink" title="一、算数运算符"></a>一、算数运算符</h3><ol><li><p>加法+、减法-、乘法*、除法/、求模%、自增++、自减–</p></li><li><p>自增++自减–又称为“<strong>增量运算符</strong>”(increment operator)，如++，即将其操作数的值增加1。这个运算符以两种方式出现。在第一种方式中，++出现在它作用的变量的前面，这是<strong>前缀</strong>(prefix)模式；在第二种方式中，++出现在它作用的变量的后面，这是<strong>后缀</strong>(postfix)模式。区别在于值的增加这一动作发生的准确时间不同。前缀运算符，先执行自增或自减运算，再计算表达式的值；后缀运算符，则先计算表达式的值，再执行自增或自减运算。</p><table><thead><tr><th align="center">运算符</th><th align="center">符号</th><th align="center">操作</th><th align="center">用例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">加法</td><td align="center">+</td><td align="center">使它两侧的值加到一起</td><td align="center">1+2</td><td align="center">3</td></tr><tr><td align="center">减法</td><td align="center">-</td><td align="center">从它前面的数减去后面的数</td><td align="center">5-3</td><td align="center">2</td></tr><tr><td align="center">乘法</td><td align="center">*</td><td align="center">将它前面的数乘以后面的数</td><td align="center">2*3</td><td align="center">6</td></tr><tr><td align="center">除法</td><td align="center">/</td><td align="center">用它左边的值除以右边的值</td><td align="center">8/3</td><td align="center">2(整数的除法会丢掉小数部分)</td></tr><tr><td align="center">取模</td><td align="center">%</td><td align="center">求用它左边的值除以右边的数后的余数</td><td align="center">5%3</td><td align="center">2(%运算符两侧的操作数必须为整数)</td></tr></tbody></table></li><li><p>关键字<code>sizeof</code> 经常被人误认为函数，<strong>长度(求字节)运算符</strong>，sizeof是一种<strong>单目运算符</strong>，以字节为单位返回某操作数的大小，用来求某一类型变量的长度。其运算对象可以是任何<strong>数据类型</strong>或<strong>变量</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> intsize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="二、逻辑、条件、关系运算符"><a href="#二、逻辑、条件、关系运算符" class="headerlink" title="二、逻辑、条件、关系运算符"></a>二、逻辑、条件、关系运算符</h3><ol><li><p><strong>逻辑与&amp;&amp;<strong>、</strong>逻辑或||<strong>、</strong>逻辑非!</strong></p></li><li><p><code>?:</code>三目运算符，选择运算符。表达式1?表达式2:表达式3</p></li><li><p><strong>大于&gt;<strong>、</strong>小于&lt;**、**大于或等于&gt;=<strong>、</strong>小于或等于&lt;=<strong>、</strong>是否等于==<strong>、</strong>是否不等于!<strong>，比较结果是</strong>逻辑值</strong>，即非真即假，也就是非1即0</p></li><li><p>**语句(statement)<strong>是构造程序的基本部分。</strong>程序(program)**是一系列带有某种必须的标点语句集合。一个语句是一条完整的计算机指令。</p></li><li><p>在C中，<strong>表达式</strong>代表值，而<strong>语句</strong>代表给计算机的指令。</p></li><li><p><strong>表达式</strong>由运算符和操作数组成。最简单的表达式只是一个不带运算符的常量或者变量。</p></li></ol><h3 id="三、位运算符"><a href="#三、位运算符" class="headerlink" title="三、位运算符"></a>三、位运算符</h3><ol><li><p>C语言中位运算，顾名思义，是以数值的二进制位为单位进行操作的，包含&lt;&lt;（左移）、&gt;&gt;（右移）、~（按位取反）、&amp;（按位与）、|（按位或）、^（按位异或）共六种运算符。</p><table><thead><tr><th align="center">功能如下：</th><th align="center"></th></tr></thead><tbody><tr><td align="center">左移运算符&lt;&lt;</td><td align="center">向左（即高位）移位，右侧补0</td></tr><tr><td align="center">右移运算符&gt;&gt;</td><td align="center">向右（即低位）移位，左侧补0</td></tr><tr><td align="center">按位取反~</td><td align="center">如名，即0变1，1变0</td></tr><tr><td align="center">按位与&amp;</td><td align="center">相对应的两个位都为1则为1，反之为0</td></tr><tr><td align="center">按位或 |</td><td align="center">相对应的两个位至少有一个为1即为1，反之为0</td></tr><tr><td align="center">按位异或^</td><td align="center">相对应的两个位相同为0，相异（不同）为1</td></tr></tbody></table></li><li><p><strong>移位运算符的作用：</strong></p><ul><li>左移N位的本质是乘以2的N次方。</li><li>右移N位的本质是除以2的N次方。</li></ul></li><li><p><strong>按位与运算符&amp;</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">3</span> <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0011</span><span class="token number">5</span> <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0101</span><span class="token operator">&amp;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按位与运算符的作用：</strong></p><p><strong>(1)清零：</strong></p><p>我们可以对某一个数与0进行按位与运算，由于两个位都为1才为1，因此最终全部位都变为0，起到清零的作用</p><p><strong>(2)取指定位：</strong></p><p>如某些存储场景下，“xxxx”，我们需要取出低1-3位，则可以让原数值与数字7(0111)进行按位与运算，得到的结果即是原数值的低1~3位的值。</p><p><strong>(3)判断奇偶：</strong></p><p>可以发现，数字的奇偶取决于二进制位的最低一位是1还是0，因此只需要与1按位与运算，判断是1是0即可得知奇偶。</p></li><li><p><strong>按位或运算符|</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">8</span> <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">1000</span><span class="token number">7</span> <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0111</span><span class="token operator">&amp;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">1111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>按位或运算符的作用：</strong></p><p>对一个数字的指定位置为1，如“某个数字的第七位”表示开关，原先是0，需要改为1的状态，即可以将这个数字与64按位或，即可得到第七位变为1，其余位的值依旧不变。</p></li><li><p><strong>按位异或运算符^</strong>：相异，即不同则为1，反之为0。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">15</span> <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">1111</span><span class="token number">16</span> <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0001</span> <span class="token number">0000</span><span class="token operator">^</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>   <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0000</span> <span class="token number">0000</span>  <span class="token number">0001</span> <span class="token number">1111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>异或运算符的作用：</strong></p><p><strong>(1) 指定位数的翻转</strong></p><p>如想对某个数字的低4位进行翻转，则可以将这个数字与15（二进制为00001111）进行按位异或运算，既可以将原数字的低四位进行翻转，即高四位不变，低四位0变1，1变0。</p><p><strong>(2)与0异或还是原值</strong></p><p>一个数字与0进行异或，结果还是原值。与1异或为反。</p><p><strong>(3)交换两个数字</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token operator">!=</span><span class="token operator">*</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">^</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>        <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">*</span>b <span class="token operator">^</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>        <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>a <span class="token operator">^</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>取反运算符~<strong>：对数值的</strong>二进制位</strong>进行取反，是第一个<strong>单目运算符</strong>。</p></li></ol><h3 id="四、运算符的优先级和结合性"><a href="#四、运算符的优先级和结合性" class="headerlink" title="四、运算符的优先级和结合性"></a>四、运算符的优先级和结合性</h3><ol><li><p>按照<strong>优先级</strong>从高到低，即最前面，数字越小的优先级越高，越优先算。</p><table border="0" cellpadding="0" cellspacing="0" width="550" style="border-collapse: collapse;table-layout:fixed;width:413pt"> <colgroup><col width="81" style="mso-width-source:userset;mso-width-alt:2581;width:61pt"> <col width="77" style="mso-width-source:userset;mso-width-alt:2474;width:58pt"> <col width="88" style="mso-width-source:userset;mso-width-alt:2816;width:66pt"> <col width="155" style="mso-width-source:userset;mso-width-alt:4949;width:116pt"> <col width="80" style="mso-width-source:userset;mso-width-alt:2560;width:60pt"> <col width="69" style="width:52pt"> </colgroup><tbody><tr height="19" style="height:14.5pt">  <td height="19" class="xl65" width="81" style="height:14.5pt;width:61pt;box-sizing: border-box">优先级</td>  <td class="xl66" width="77" style="border-left:none;width:58pt;box-sizing: border-box">运算符</td>  <td class="xl66" width="88" style="border-left:none;width:66pt;box-sizing: border-box">名称或含义</td>  <td class="xl66" width="155" style="border-left:none;width:116pt;box-sizing: border-box">使用形式</td>  <td class="xl66" width="80" style="border-left:none;width:60pt;box-sizing: border-box">结合方向</td>  <td class="xl67" width="69" style="border-left:none;width:52pt;box-sizing: border-box">说明</td> </tr> <tr height="19" style="height:14.5pt">  <td rowspan="4" height="76" class="xl68" width="81" style="height:58.0pt;border-top:  none;width:61pt">1</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&nbsp; &nbsp;[]</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">数组下标</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">数组名[长度]</td>  <td rowspan="4" class="xl68" width="80" style="border-top:none;width:60pt;  box-sizing: border-box">&nbsp; 从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">　</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt">（）</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">小括号</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt">(<font class="font7">表达式</font><font class="font5">)</font><font class="font7">或函数名</font><font class="font5">(</font><font class="font7">形参表</font><font class="font5">)</font></td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">　</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; .</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">取成员</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">结构体名.成员</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt">　</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; -&gt;</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">指针</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">结构体指针-&gt;成员</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt">　</td> </tr> <tr height="19" style="height:14.5pt">  <td rowspan="9" height="171" class="xl68" width="81" style="height:130.5pt;  border-top:none;width:61pt">2</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&nbsp; -</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">负号运算符</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">-表达式</td>  <td rowspan="9" class="xl68" width="80" style="border-top:none;width:60pt">&nbsp;  从右往左</td>  <td rowspan="2" class="xl69" width="69" style="border-top:none;width:52pt;  box-sizing: border-box">单目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">（）</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">强制类型转换</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">(数据类型)表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; ++</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">自增运算符</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">++变量或变量++</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt">单目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; --</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">自减运算符</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">--变量或变量--</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">单目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; *</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">取内容</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">*指针变量</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">单目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; &amp;</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">取地址</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">&amp;变量名</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">单目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; ！</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">逻辑非</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">!表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">单目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; ~</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">按位取反</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">~整型表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">单目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; sizeof</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">求长度</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt">sizeof(表达式)</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">单目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td rowspan="3" height="57" class="xl68" width="81" style="height:43.5pt;border-top:  none;width:61pt">3</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&nbsp;/</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">除</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式 / 表达式</td>  <td rowspan="3" class="xl68" width="80" style="border-top:none;width:60pt">&nbsp;  从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp;*</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">乘</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式 * 表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; %</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">取余</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式 / 表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td rowspan="2" height="38" class="xl68" width="81" style="height:29.0pt;border-top:  none;width:61pt">4</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&nbsp;+</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">加</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式+表达式</td>  <td rowspan="2" class="xl68" width="80" style="border-top:none;width:60pt">&nbsp;  从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp; -</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">减</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式-表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td rowspan="2" height="38" class="xl68" width="81" style="height:29.0pt;border-top:  none;width:61pt">5</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&lt;&lt;</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">左移</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量&lt;&lt;表达式</td>  <td rowspan="2" class="xl68" width="80" style="border-top:none;width:60pt">&nbsp;  从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&gt;&gt;</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">右移</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量&lt;&lt;表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td rowspan="4" height="76" class="xl68" width="81" style="height:58.0pt;border-top:  none;width:61pt">6</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&gt;</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">大于</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式&gt;表达式</td>  <td rowspan="4" class="xl68" width="80" style="border-top:none;width:60pt">&nbsp;  从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&gt;=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">大于或等于</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式&gt;=表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&lt;</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">小于</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式&lt;表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&lt;=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">小于或等于</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式&lt;=表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td rowspan="2" height="38" class="xl68" width="81" style="height:29.0pt;border-top:  none;width:61pt">7</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&nbsp;==</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">等于</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式==表达式</td>  <td rowspan="2" class="xl68" width="80" style="border-top:none;width:60pt">&nbsp;  从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&nbsp;!=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">不等于</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式!=表达式</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="81" style="height:14.5pt;border-top:none;  width:61pt;box-sizing: border-box">8</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&nbsp; &amp;</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">按位与</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式&amp;表达式</td>  <td class="xl68" width="80" style="border-top:none;border-left:none;width:60pt;  box-sizing: border-box">&nbsp; 从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="81" style="height:14.5pt;border-top:none;  width:61pt;box-sizing: border-box">9</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&nbsp; ^</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">按位异或</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式^表达式</td>  <td class="xl68" width="80" style="border-top:none;border-left:none;width:60pt;  box-sizing: border-box">&nbsp; 从左往右&nbsp;</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="81" style="height:14.5pt;border-top:none;  width:61pt;box-sizing: border-box">10</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&nbsp; |</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">按位或</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式|表达式</td>  <td class="xl68" width="80" style="border-top:none;border-left:none;width:60pt;  box-sizing: border-box">&nbsp; 从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="81" style="height:14.5pt;border-top:none;  width:61pt;box-sizing: border-box">11</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">&amp;&amp;</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">逻辑与</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式&amp;&amp;表达式</td>  <td class="xl68" width="80" style="border-top:none;border-left:none;width:60pt;  box-sizing: border-box">&nbsp; 从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="81" style="height:14.5pt;border-top:none;  width:61pt;box-sizing: border-box">12</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">||</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">逻辑或</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式||表达式</td>  <td class="xl68" width="80" style="border-top:none;border-left:none;width:60pt;  box-sizing: border-box">&nbsp; 从左往右</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="81" style="height:14.5pt;border-top:none;  width:61pt;box-sizing: border-box">13</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">？：</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">条件运算符</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式1? 表达式2: 表达式3</td>  <td class="xl68" width="80" style="border-top:none;border-left:none;width:60pt;  box-sizing: border-box">&nbsp; 从右往左</td>  <td class="xl69" width="69" style="border-top:none;border-left:none;width:52pt;  box-sizing: border-box">三目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td rowspan="11" height="209" class="xl68" width="81" style="height:159.5pt;  border-top:none;width:61pt">14</td>  <td class="xl68" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">赋值运算符</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量=表达式</td>  <td rowspan="11" class="xl68" width="80" style="border-top:none;width:60pt">&nbsp;  从右往左</td>  <td rowspan="12" class="xl69" width="69" style="border-bottom:1.0pt solid black;  border-top:none;width:52pt;box-sizing: border-box">双目运算符</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">/=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">除后再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量/=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">*=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">乘后再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量*=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">%=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">取余后再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量%=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">+=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">加后再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量+=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">-=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">减后再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量-=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&lt;&lt;=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">左移再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量&lt;&lt;=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&gt;&gt;=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">右移再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量&gt;&gt;=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">&amp;=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">按位与再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量&amp;=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">^=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">按位异或再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量^=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl68" width="77" style="height:14.5pt;border-top:none;  border-left:none;width:58pt;box-sizing: border-box">|=</td>  <td class="xl68" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">按位或再赋值</td>  <td class="xl68" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">变量|=表达式</td> </tr> <tr height="19" style="height:14.5pt">  <td height="19" class="xl72" width="81" style="height:14.5pt;border-top:none;  width:61pt">15</td>  <td class="xl72" width="77" style="border-top:none;border-left:none;width:58pt;  box-sizing: border-box">,</td>  <td class="xl72" width="88" style="border-top:none;border-left:none;width:66pt;  box-sizing: border-box">逗号表达式</td>  <td class="xl72" width="155" style="border-top:none;border-left:none;width:116pt;  box-sizing: border-box">表达式,表达式,…</td>  <td class="xl72" width="80" style="border-top:none;border-left:none;width:60pt;  box-sizing: border-box">&nbsp; 从左往右</td> </tr> <!--[if supportMisalignedColumns]--> <tr height="0" style="display:none">  <td width="81" style="width:61pt"></td>  <td width="77" style="width:58pt"></td>  <td width="88" style="width:66pt"></td>  <td width="155" style="width:116pt"></td>  <td width="80" style="width:60pt"></td>  <td width="69" style="width:52pt"></td> </tr> <!--[endif]--></tbody></table></li></ol><h2 id="第五章-C程序流"><a href="#第五章-C程序流" class="headerlink" title="第五章 C程序流"></a>第五章 C程序流</h2><h3 id="一、选择（分支）结构"><a href="#一、选择（分支）结构" class="headerlink" title="一、选择（分支）结构"></a>一、选择（分支）结构</h3><ol><li><p><code>if()</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token comment">/*如果表达式成立，执行语句1否则继续判断表达式2*/</span> <span class="token punctuation">{</span>     <span class="token comment">//语句1 </span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">/*如果表达式成立，执行语句2否则继续判断表达式3*/</span> <span class="token punctuation">{</span>     <span class="token comment">//语句2 </span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">/*如果表达式成立，则执行语句3否则继续判断下一个表达式*/</span> <span class="token punctuation">{</span>     <span class="token comment">//语句3; </span><span class="token punctuation">}</span> <span class="token comment">//… … </span><span class="token keyword">else</span> <span class="token comment">/*如果以上表达式都不成立 则执行语句4*/</span> <span class="token punctuation">{</span>     <span class="token comment">//语句4 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>switch case语句</code></p><p>switch语句的执行过程为：首先计算表达式的值，然后依次与常量表达式依次进行比较，若表达式的值与某常量表达式相等，则从该常量表达式处开始执行，直到switch语句结束。若所有的常量表达式的值均不等于表达式的值，则从default处开始执行。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token comment">/*首先计算表达式的值*/</span> <span class="token punctuation">{</span>     <span class="token keyword">case</span> 常量表达式<span class="token number">1</span><span class="token operator">:</span>语句<span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">case</span> 常量表达式<span class="token number">2</span><span class="token operator">:</span>语句<span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">// …… </span>    <span class="token keyword">case</span> 常量表达式n<span class="token operator">:</span>语句n<span class="token punctuation">;</span>     <span class="token keyword">default</span><span class="token operator">:</span>语句n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>break语句</code></p><p><strong>break</strong>，跳出的意思，仅用于跳出<strong>switch结构</strong>或<strong>循环结构</strong>，用于提前结束switch结构或循环。</p></li></ol><h3 id="二、循环结构"><a href="#二、循环结构" class="headerlink" title="二、循环结构"></a>二、循环结构</h3><ol><li><p><code>while()循环</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token comment">//为真进入循环</span><span class="token punctuation">{</span>     循环体语句 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>do while()循环</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span> <span class="token punctuation">{</span>     循环体语句 <span class="token comment">//循环至少要被执行一次</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为真循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>for()循环</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化表达式<span class="token punctuation">;</span>判断表达式<span class="token punctuation">;</span>更新表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    循环体语句 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>九九乘法表</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%-2d "</span><span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>continue语句</code></p><p><strong>continue</strong>，顾名思义是继续的意思，它仅用于循环中，用于<strong>提前结束本次循环</strong>，即跨过continue后面的循环语句，提前进入下次循环。</p><p>continue语句并不能像break那样可以在switch和循环中都可以使用，continue只能在循环中使用！除非switch也在循环中。</p></li></ol><h2 id="第六章-C函数"><a href="#第六章-C函数" class="headerlink" title="第六章 C函数"></a>第六章 C函数</h2><h3 id="一、C语言函数"><a href="#一、C语言函数" class="headerlink" title="一、C语言函数"></a>一、C语言函数</h3><ol><li><p>函数定义</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">返回值类型 函数名<span class="token punctuation">(</span>形参表说明<span class="token punctuation">)</span> <span class="token comment">/*函数首部*/</span><span class="token punctuation">{</span>    说明语句 <span class="token comment">/*函数体*/</span>    执行语句<span class="token punctuation">}</span><span class="token comment">//函数返回值不能是数组，也不能是函数;</span><span class="token comment">//函数类型可以省略，当不指明函数类型时，系统默认的是整型</span><span class="token comment">//函数名本身也有值，它代表了该函数的入口地址，使用指针调用函数时，将用到此功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数调用</p><p>在主调函数中调用某函数之前应对该被调函数进行声明，在主调函数中对被调函数进行声明的目的是使编译系统知道被调函数返回值的类型，以便在主调函数中按此种类型对返回值进行相应的处理。其一般形式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">类型说明符 被调函数名<span class="token punctuation">(</span>类型 形参<span class="token punctuation">,</span>类型 形参<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>函数的声明</strong>和<strong>函数的定义</strong>有本质上的不同，主要区别在以下两个方面：</p><p>(1)函数的定义是编写一段程序，应有函数的具体功能语句——<strong>函数体</strong>，而函数的声明仅是向编译系统的一个说明，不含具体的执行动作。<br>(2)在程序中，函数的定义只能有一次，而函数的声明可以有多次。</p></li></ol><h3 id="二、C语言变量的存储类型"><a href="#二、C语言变量的存储类型" class="headerlink" title="二、C语言变量的存储类型"></a>二、C语言变量的存储类型</h3><ol><li><p><strong>变量</strong>是对程序中数据所占内存空间的一种抽象定义，定义变量时，用户定义变量的名、变量的类型。</p></li><li><p>在计算机中，保存变量当前值的<strong>存储单元</strong>有两类，一类是内存，另一类是CPU的寄存器。</p></li><li><p>变量的存储类型关系到变量的存储位置，C语言中定义了<code>4种存储属性(类型)</code>，即自动变量(auto)、外部变量(extern)、静态变量(static)和寄存器变量(register)，它关系到变量在内存中的存放位置，由此决定了变量的保留时间和变量的作用范围。</p></li><li><p>变量的保留时间又称为<strong>生存期</strong>，从时间角度，可将变量分为<strong>静态存储</strong>和<strong>动态存储</strong>两种情况：</p><p>（1）<strong>静态存储</strong>是指变量存储在内存的静态存储区，在编译时就分配了存储空间，在整个程序的运行期间，该变量占有固定的存储单元，程序结束后，这部分空间才释放，变量的值在整个程序中始终存在。</p><p>（2）<strong>动态存储</strong>是指变量存储在内存的动态存储区，在程序的运行过程中，只有当变量所在的函数被调用时，编译系统才临时为该变量分配一段内存单元，函数调用结束，该变量空间释放，变量的值只在函数调用期存在。</p></li><li><p>变量的作用范围又称为<strong>作用域</strong>，从空间角度，可以将变量分为<strong>全局变量</strong>和<strong>局部变量</strong>：</p><p>（1）<strong>局部变量</strong>是在一个函数或复合语句内定义的变量，它仅在函数或复合语句内有效，编译时，编译系统不为局部变量分配内存单元，而是在程序运行过程中，当局部变量所在的函数被调用时，编译系统根据需要，临时分配内存，调用结束，空间释放。</p><p>（2）<strong>全局变量</strong>是在函数之外定义的变量，其作用范围为从定义处开始到本文件结束，编译时，编译系统为其分配固定的内存单元，在程序运行的自始至终都占用固定单元。</p></li><li><p><code>auto自动变量类型</code></p><p><strong>自动变量</strong><br>函数中的局部变量，如不专门声明为static存储类别，都是动态地分配存储空间的，数据存储在动态存储区中。函数中的形参和在函数中定义的变量（包括在复合语句中定义的变量）都属此类，在调用该函数时系统会给它们分配存储空间，在函数调用结束时就自动释放这些存储空间，这类局部变量称为<strong>自动变量</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">auto</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">/*定义b,c为自动变量*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>extern外部变量</code></p><p><strong>外部变量</strong>，即<strong>全局变量</strong>，是在函数的外部定义的，它的作用域为从变量定义处开始，到本程序文件的末尾。如果外部变量不在文件的开头定义，其有效的作用范围只限于定义处到文件末尾。</p><ul><li><p>如果在定义点之前的函数想引用该外部变量，则应该在引用之前用<strong>关键字extern</strong>对该变量进行“外部变量声明”，表示该变量是一个已经定义的外部变量。有了此声明，就可以从“声明”处起，合法地使用该外部变量。</p></li><li><p>通常的，用extern声明外部变量，扩展程序文件中的作用域。</p></li></ul></li><li><p><code>static静态变量</code></p><p>有时希望函数中的局部变量的值在函数调用结束后不消失而保留原值，这时就应该指定局部变量为<strong>静态局部变量</strong>，用<strong>关键字static</strong>进行声明。</p><ul><li><p>通过用static类型声明后的变量，其变量的内存空间位于内存的全局静态区，仅会<strong>初始化一次</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">static</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*a=10a=20a=40   每次a的值是接着上一次函数调用的值继续运算的，并非每次都初始化从5开始计算，这就是static的特性*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>register寄存器变量</code></p><p>为提高效率，C语言允许将局部变量的值存放在CPU的寄存器中，这种变量叫做<strong>寄存器变量</strong>，用<strong>关键字register</strong>声明。使用寄存器变量需要注意以下几点：</p><ul><li><p>只有局部自动变量和形式参数可以作为寄存器变量。</p></li><li><p>一个计算机系统中的寄存器数目有限，不能定义任意多个寄存器变量。</p></li><li><p>不能使用取地址运算符“&amp;”求寄存器变量的地址。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">register</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//将变量a存储在寄存器上</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ol><h2 id="第七章-C数组"><a href="#第七章-C数组" class="headerlink" title="第七章 C数组"></a>第七章 C数组</h2><h3 id="一、一维数组"><a href="#一、一维数组" class="headerlink" title="一、一维数组"></a>一、一维数组</h3><ol><li><p>定义和使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">类型说明符 数组名 <span class="token punctuation">[</span>常量表达式<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//其中类型说明符是任意一种基本数据类型或构造数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当在函数中只定义数组时，数组里的值都是未初始化过的，可以定义时初始化赋值，并且，当给部分元素赋初值的时候，未被赋值的元素将自动赋值为0，具体地，int类型未被赋值的元素为0，浮点型为小数类型，而字符类型则为’\0’。</p></li></ol><h3 id="二、二维数组"><a href="#二、二维数组" class="headerlink" title="二、二维数组"></a>二、二维数组</h3><ol><li><p>定义和使用</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">类型说明符 数组名<span class="token punctuation">[</span>行数<span class="token punctuation">]</span><span class="token punctuation">[</span>列数<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*定义一个整形二维数组a，有3行4列共12个元素分别为：a[0][0] a[0][1] a[0][2] a[0][3]a[1][0] a[1][1] a[1][2] a[1][3]a[2][0] a[2][1] a[2][2] a[2][3]*/</span><span class="token keyword">char</span> arry<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//定义一个字符型二维数组arry，有10行10列，依次为arry[0][0]~arry[9][9]共100个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化并赋值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//定义一个三行四列的二维数组，按行赋值</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//定义一个三行四列的二维数组并对其中的12（3*4）个元素进行赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两种赋值方式可知：二维数组与一维数组一样在内存中的存储也是按照线性排布的。</p></li></ol><h3 id="三、字符数组和字符串"><a href="#三、字符数组和字符串" class="headerlink" title="三、字符数组和字符串"></a>三、字符数组和字符串</h3><ol><li><p>用来存放字符的数组称为<strong>字符数组</strong>。字符数组的各个元素依次存放字符串的各字符，字符数组的数组名代表该数组的<strong>首地址</strong>，这为处理字符串中个别字符和引用整个字符串提供了极大的方便。</p></li><li><p>字符数组的定义和初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">' h '</span><span class="token punctuation">,</span> <span class="token char">'i'</span><span class="token punctuation">,</span> <span class="token char">'n'</span><span class="token punctuation">,</span> <span class="token char">'a'</span> <span class="token punctuation">,</span> <span class="token char">'\0'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//对字符数组的各个元素逐个赋值后，各元素的值为：</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token char">'h'</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token char">'i'</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token char">'n'</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中,<code>\0</code>为<strong>字符串结束符</strong>。如果不对c[5]赋任何值，‘\0’会由系统自动添加。字符数组也可采用字符串常量的赋值方式，</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"china"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="第八章-C语言指针"><a href="#第八章-C语言指针" class="headerlink" title="第八章 C语言指针"></a>第八章 C语言指针</h2><h3 id="一、指针和地址"><a href="#一、指针和地址" class="headerlink" title="一、指针和地址"></a>一、指针和地址</h3><ol><li><p>指针也就是内存地址，指针变量是用来存放内存地址的变量，在同一CPU构架下，不同类型的指针变量所占用的存储单元长度是相同的，而存放数据的变量因数据的类型不同，所占用的存储空间长度也不同。有了指针以后，不仅可以对数据本身，也可以对存储数据的变量地址进行操作。</p></li><li><p><strong>地址</strong>：在内存，这里提到的内存并不是人们常说的计算机的物理内存，而是虚拟的逻辑内存空间中，地址常用其对应的十六进制数来表示，比如0x12ff7c。C程序中，每一个定义的变量，在内存中都占有一个内存单元，比如int类型占四个字节，char类型占一个字节等。C语言允许在程序中使用变量的地址，并可以通过地址运算符”&amp;”得到变量的地址。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">int</span> i<span class="token punctuation">;</span>           <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>           <span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">'c'</span><span class="token punctuation">,</span><span class="token char">'l'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'n'</span><span class="token punctuation">,</span><span class="token char">'g'</span><span class="token punctuation">,</span><span class="token char">'u'</span><span class="token punctuation">,</span><span class="token char">'a'</span><span class="token punctuation">,</span><span class="token char">'g'</span><span class="token punctuation">,</span><span class="token char">'e'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>                       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"int Address:0x%x,Value:%d\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>                       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"char Address:0x%x,Value :%c\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、指针的定义和使用"><a href="#二、指针的定义和使用" class="headerlink" title="二、指针的定义和使用"></a>二、指针的定义和使用</h3><ol><li><p>地址就是逻辑内存上的编号，而指针虽然也表示一个编号，也是一个地址。但两者性质却不相同。一个代表了常量，另一个则是变量。</p></li><li><p>就好比内存是一把尺子，而指针就是尺子上面的游标，可以左右移动，它某一个时刻是指向一个地方的，这就是<strong>指针变量</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">类型说明符 <span class="token operator">*</span>变量名<span class="token punctuation">;</span><span class="token comment">/*'*'与前面的类型说明符共同说明这是一个指针变量类型说明符表示该指针变量所指向的变量为何种数据类型，变量名即为定义的指针变量名。除此之外，C还提供*运算符获取地址上对应的值*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过数组下标可以确定数组元素在数组中的<strong>顺序</strong>和<strong>存储地址</strong>。每个数组元素相当于一个变量，因此<strong>指针变量</strong>可以指向数组中的元素，也就是说可以用指针方式访问数组中的元素。</p><p>对一个指向数组元素的指针变量的定义和赋值方法，与指针变量相同，例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*定义a为包含10个整型数据的数组*/</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">/*定义p为指向整型变量的指针*/</span>p<span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*把a[0]元素的地址赋给指针变量p*/</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span> <span class="token comment">/*等价于p=&amp;a[0];*/</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token operator">=</span>a<span class="token punctuation">;</span> <span class="token comment">/*等价于int *p=&amp;a[0];数组名代表数组的首地址，也就是第0号元素的地址*/</span><span class="token comment">//对于指向首地址的指针p，p+i(或a+i)就是数组元素a[i]的地址，*(p+i)(或*(a+i))就是a[i]的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指针变量p已指向数组中的某一个元素，则p+1指向同一数组中的下一个元素。</p></li><li><p>引入指针变量后，就可以用以下两种方法来访问<strong>数组元素</strong>：</p><ul><li><p><strong>下标法</strong>，即用a[i]形式访问数组元素</p></li><li><p><strong>指针法</strong>，即采用<code>*(a+i)</code>或<code>*(p+i)</code>形式，用间接访问的方法来访问数组元素，其中a是数组名，p是指向数组的指针变量，其初值p=a。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//printf("P value : %d, A value : %d\n", p[i], a[i]);</span>        <span class="token comment">//printf("P value : %d, A value : %d\n", *(p++), a[i]);</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"P value : %d, A value : %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针可以通过++或–并修改自身值的方式移动，然而数组名本身值不可以被更改。</p></li></ul></li></ol><h3 id="三、字符串与指针"><a href="#三、字符串与指针" class="headerlink" title="三、字符串与指针"></a>三、字符串与指针</h3><ol><li><p><strong>字符指针</strong>也可以指向一个字符串，可以用字符串常量对字符指针进行<strong>初始化</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"www.dotcpp.com"</span><span class="token punctuation">;</span><span class="token comment">//字符指针指向一个字符串常量的首地址。</span><span class="token keyword">char</span> strin<span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Welcome to dotcpp.com"</span><span class="token punctuation">;</span><span class="token comment">//字符数组来存放字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>字符串指针和字符串数组两种方式都可以访问字符串</p><p>本质的区别：</p><ul><li><p>字符指针str是个变量，可以改变str使它指向不同的字符串，但<strong>不能改变str所指向的字符串常量的值</strong>。</p></li><li><p>而strin是一个数组，可以改变数组中保存的内容。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token string">"www.dotcpp.com"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Welcome to dotcpp.com"</span><span class="token punctuation">;</span>    str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'C'</span><span class="token punctuation">;</span> <span class="token comment">//试图修改str指向的常量区的字符串内容，改不了</span>    strin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">'H'</span><span class="token punctuation">;</span><span class="token comment">//可以改</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>字符串处理函数，声明<code>#include&lt;string.h&gt;</code></p><p><code>strcpy()</code>函数：将一个字符串指针拷贝到一个字符串数组中 </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>destin<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//destin只能是字符数组，而不能是字符串指针指向的字符串，因为字符串指针指向的是字符串常量，常量不能被修改</span><span class="token keyword">char</span> string<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>str1 <span class="token operator">=</span> <span class="token string">"www.dotcpp.com"</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>strcat()</code>函数：将一个字符串拼接在目标字符串的后面</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strcat</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>destin<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//destin只能是字符数组，而不能是字符串指针指向的字符串，因为字符串指针指向的是字符串常量，常量不能被修改</span><span class="token keyword">char</span> destination<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"I love"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>blank <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token string">"www.dotcpp.com"</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> blank<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">strcat</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>strcpm()</code>函数：比较两个字符串的大小，区分大小写</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str1<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*str1 &gt; str2 , 返回 1；  str1 &lt; str2 , 返回 -1；  str1 == str2 , 返回 0；*/</span><span class="token keyword">char</span> <span class="token operator">*</span>buf1 <span class="token operator">=</span> <span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token operator">*</span>buf2 <span class="token operator">=</span> <span class="token string">"bbb"</span><span class="token punctuation">,</span> <span class="token operator">*</span>buf3 <span class="token operator">=</span> <span class="token string">"ccc"</span><span class="token punctuation">;</span><span class="token keyword">int</span> ptr <span class="token operator">=</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>buf2<span class="token punctuation">,</span> buf1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>strlen()</code>函数：计算字符串长度</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="第九章-结构体和共同体"><a href="#第九章-结构体和共同体" class="headerlink" title="第九章 结构体和共同体"></a>第九章 结构体和共同体</h2><h3 id="一、结构体"><a href="#一、结构体" class="headerlink" title="一、结构体"></a>一、结构体</h3><ol><li><p><strong>结构体的定义</strong>说明了它的组成成员，以及每个成员的数据类型。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> 结构类型名 <span class="token punctuation">{</span>     数据类型 成员名 <span class="token number">1</span><span class="token punctuation">;</span>     数据类型 成员名 <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     数据类型 成员名 n<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//所占内存大小为结构中每个成员的长度之和。</span><span class="token keyword">struct</span> 结构类型名称 结构变量名<span class="token punctuation">;</span><span class="token keyword">struct</span> 结构类型名 结构变量 <span class="token operator">=</span> <span class="token punctuation">{</span> 初始化数据 <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 初始化数据 n <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结构体数组是一个数组，其数组的每一个元素都是<strong>结构体类型</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">address</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*姓名，字符数组作为结构体中的成员*/</span>    <span class="token keyword">char</span> street<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*街道*/</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> tel<span class="token punctuation">;</span> <span class="token comment">/*电话，无符号长整型作为结构体中的成员*/</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> zip<span class="token punctuation">;</span> <span class="token comment">/*邮政编码*/</span><span class="token punctuation">}</span>student<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span><span class="token string">"Zhang"</span><span class="token punctuation">,</span><span class="token string">"Road NO.1"</span><span class="token punctuation">,</span><span class="token number">111111</span><span class="token punctuation">,</span><span class="token number">4444</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Wang"</span><span class="token punctuation">,</span><span class="token string">" Road NO.2"</span><span class="token punctuation">,</span><span class="token number">222222</span><span class="token punctuation">,</span><span class="token number">5555</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Li"</span><span class="token punctuation">,</span><span class="token string">" Road NO.3"</span><span class="token punctuation">,</span><span class="token number">333333</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结构体指针即指向结构体的指针。</p><p>当一个指针用来指向一个结构体变量时，称之为<strong>结构体指针变量</strong>。结构体指针变量中的值是所指向的结构变量的首地址，通过结构指针即可访问该结构变量。这与数组指针和函数指针的情况是相同的。结构体指针变量定义的一般形式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> 结构类型名 <span class="token operator">*</span>结构指针变量名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结构体变量用点<code>.</code>来访问成员的方法，结构体指针是通过箭头<code>-&gt;</code>来访问的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">address</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*姓名，字符数组作为结构体中的成员*/</span>    <span class="token keyword">char</span> street<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/*街道*/</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> tel<span class="token punctuation">;</span> <span class="token comment">/*电话，无符号长整型作为结构体中的成员*/</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> zip<span class="token punctuation">;</span> <span class="token comment">/*邮政编码*/</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">address</span> A<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"Zhang"</span><span class="token punctuation">,</span><span class="token string">"Road NO.1"</span><span class="token punctuation">,</span><span class="token number">111111</span><span class="token punctuation">,</span><span class="token number">4444</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Wang"</span><span class="token punctuation">,</span><span class="token string">" Road NO.2"</span><span class="token punctuation">,</span><span class="token number">222222</span><span class="token punctuation">,</span><span class="token number">5555</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"Li"</span><span class="token punctuation">,</span><span class="token string">" Road NO.3"</span><span class="token punctuation">,</span><span class="token number">333333</span><span class="token punctuation">,</span><span class="token number">6666</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">address</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token operator">&amp;</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s %s %u %u\n"</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>street<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>tel<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>zip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、共同体"><a href="#二、共同体" class="headerlink" title="二、共同体"></a>二、共同体</h3><ol><li><p>允许几种不同类型的变量存放到同一段内存单元中，也就是使用<strong>覆盖技术</strong>，几个变量互相覆盖。这种几个不同的变量共同占用一段内存的结构，被称为<strong>共用体类型结构</strong>，简称<strong>共用体</strong>。一般定义形式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">union</span> 共用体名 <span class="token punctuation">{</span>     数据类型 成员名 <span class="token number">1</span><span class="token punctuation">;</span>     数据类型 成员名 <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     数据类型 成员名 n<span class="token punctuation">;</span> <span class="token punctuation">}</span>变量名表列<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>共用体类型数据具有以下<strong>特点</strong>：</p><ul><li>同一个内存段可以用来存放几种不同类型的成员，但是在每一瞬间只能存放其中的一种，而不是同时存放几种。换句话说，每一瞬间只有一个成员起作用，其他的成员不起作用，即不是同时都存在和起作用的；</li><li>共用体变量中起作用的成员是最后一次存放的成员，在存入一个新成员后，原有成员就失去作用；</li><li>共用体变量的地址和它的各成员的地址都是同一地址。</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">union</span> INFO<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">union</span> INFO A<span class="token punctuation">;</span>    A<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a:%d\n"</span><span class="token punctuation">,</span>A<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b:%d\n"</span><span class="token punctuation">,</span>A<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c:%d\n"</span><span class="token punctuation">,</span>A<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>不能在定义共用体变量时对它进行初始化。</strong></p></li><li><p>不能把共用体变量作为函数参数，也不能是函数返回共用体变量，但可以使用指向共用体变量的指针。</p></li><li><p>共用体类型可以出现在结构体类型的定义中，也可以定义<strong>共用体数组</strong>。反之，结构体也可以出现在共用体类型的定义中，数组也可以作为共用体的成员。</p></li></ol><h3 id="三、typedef用法和enum枚举类型"><a href="#三、typedef用法和enum枚举类型" class="headerlink" title="三、typedef用法和enum枚举类型"></a>三、typedef用法和enum枚举类型</h3><ol><li><p>使用类型说明语句typedef定义新的类型来代替已有的类型。typedef语句的一般形式是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> 已定义的类型 新的类型<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> INTEGER<span class="token punctuation">;</span> <span class="token comment">/*指定用 INTEGER 代表 int 类型*/</span><span class="token keyword">typedef</span> <span class="token keyword">float</span> REAL<span class="token punctuation">;</span> <span class="token comment">/*指定用 REAL 代表 float 类型*/</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span> <span class="token comment">/*与 INTEGER i,j;*/</span><span class="token keyword">float</span> pi<span class="token punctuation">;</span> <span class="token comment">/*与 REAL pi;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>typedef的最常用的作用就是给<strong>结构体变量</strong>重命名。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_INFO</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>INFO<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">_INFO</span> A <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"guluyu"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>INFO B<span class="token punctuation">;</span> <span class="token comment">//通过typedef重命名后的名字INFO与struct _INFO完全等价！</span>B <span class="token operator">=</span> A<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结构体变量和结构体变量可以相互赋值，共用体也可相互赋值。</p></li><li><p>enum<strong>枚举类型</strong>，它可以让代码更简介、更易读。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span>　枚举名　<span class="token punctuation">{</span>枚举元素<span class="token number">1</span><span class="token punctuation">,</span>枚举元素<span class="token number">2</span><span class="token punctuation">,</span>……<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//定义了一个“枚举名”的枚举类型，其值为枚举元素1（即0）、枚举元素2（即1）...（依次递增）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>枚举类型每个元素的值是从0开始递增的。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">Week</span><span class="token punctuation">{</span>MON<span class="token punctuation">,</span> TUE<span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//定义一个enum week类型，七个值（0.1.2...6）</span><span class="token keyword">enum</span> <span class="token class-name">Week</span> A <span class="token operator">=</span> WED<span class="token punctuation">;</span> <span class="token comment">//第三个值赋给A</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>枚举类型的特点默认是<strong>从0开始递增</strong>，若想更改，可以将其中某个类型赋值，后面的值将在此基础之上递增，如代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">Week2</span><span class="token punctuation">{</span>MON<span class="token punctuation">,</span> TUE<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> WED<span class="token punctuation">,</span> THU<span class="token punctuation">,</span> FRI<span class="token punctuation">,</span> SAT<span class="token punctuation">,</span> SUN<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">enum</span> <span class="token class-name">Week2</span> B <span class="token operator">=</span> MON<span class="token punctuation">;</span><span class="token comment">//输出0</span><span class="token keyword">enum</span> <span class="token class-name">Week2</span> C <span class="token operator">=</span> WED<span class="token punctuation">;</span><span class="token comment">//输出6</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>此时用宏定义（后面讲到）实现将更麻烦，因此枚举的优势就在于此。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">enum</span> <span class="token class-name">week</span><span class="token punctuation">{</span>Monday<span class="token punctuation">,</span> Tuesday<span class="token punctuation">,</span> Wednesday<span class="token punctuation">,</span> Thursady<span class="token punctuation">,</span> Friday<span class="token punctuation">,</span> Saturday<span class="token punctuation">,</span> Sunday<span class="token punctuation">}</span> day<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> Monday<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Monday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Tuesday<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Tuesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Wednesday<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Wednesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Thursady<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Thursday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Friday<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Friday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Saturday<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Saturday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Sunday<span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Sunday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"input error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="第十章-文件操作"><a href="#第十章-文件操作" class="headerlink" title="第十章 文件操作"></a>第十章 文件操作</h2><h3 id="一、fopen-函数"><a href="#一、fopen-函数" class="headerlink" title="一、fopen()函数"></a>一、<code>fopen()</code>函数</h3><ol><li><p><code>fopen()</code>函数：<strong>打开文件</strong>，获取该文件的文件指针，方便后续操作。函数原型为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数的返回值则表示打开成功后的文件指针，格式为<strong>FILE类型</strong>，是一个结构体类型，供后面使用，如果打开失败，则返回NULL。</p><p>第一个是<strong>文件名</strong>，既要操作的文件对象。第二个是<strong>打开方式</strong>，指对文件以何种模式打开，包括文本模式打开还是二进制打开、读还是写还是追加等，具体类型如下表，可以根据情况使用：</p><table><thead><tr><th align="center">参数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">以只读方式打开文件，该文件必须存在。</td></tr><tr><td align="center">r+</td><td align="center">以读/写方式打开文件，该文件必须存在。</td></tr><tr><td align="center">rb+</td><td align="center">以读/写方式打开一个二进制文件，只允许读/写数据。</td></tr><tr><td align="center">rt+</td><td align="center">以读/写方式打开一个文本文件，允许读和写。</td></tr><tr><td align="center">w</td><td align="center">打开只写文件，若文件存在则文件长度清为零，即该文件内容会消失；若文件不存在则创建该文件。</td></tr><tr><td align="center">w+</td><td align="center">打开可读/写文件，若文件存在则文件长度清为零，即该文件内容会消失；若文件不存在则创建该文件。</td></tr><tr><td align="center">a</td><td align="center">以附加的方式打开只写文件。若文件不存在，则会创建该文件；如果文件存在，则写入的数据会被加到文件尾后，即文件原先的内容会被保留（EOF 符保留）。</td></tr><tr><td align="center">a+</td><td align="center">以附加方式打开可读/写的文件。若文件不存在，则会创建该文件，如果文件存在，则写入的数据会被加到文件尾后，即文件原先的内容会被保留（EOF符不保留）。</td></tr><tr><td align="center">wb</td><td align="center">以只写方式打开或新建一个二进制文件，只允许写数据。</td></tr><tr><td align="center">wb+</td><td align="center">以读/写方式打开或新建一个二进制文件，允许读和写。</td></tr><tr><td align="center">wt+</td><td align="center">以读/写方式打开或新建一个文本文件，允许读和写。</td></tr><tr><td align="center">at+</td><td align="center">以读/写方式打开一个文本文件，允许读或在文本末追加数据。</td></tr><tr><td align="center">ab+</td><td align="center">以读/写方式打开一个二进制文件，允许读或在文件末追加数据。</td></tr></tbody></table></li><li><p>如果我们现在想打开一个D盘根目录下的abc.dat，并且想读出该文件里的数据</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>fp<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"d:\\abc.dat"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment">//后面通过fp指针开始读文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>说明：</p><ul><li>该文件的目录是绝对路径，因此这样写，如果不写盘符比如abc.dat则表示相对路径，表示与本程序同目录下。</li><li>路径中的反斜杠虽然只有一个，但这里打了两个，原因在于C语言字符串中对反斜杠要当作<strong>转义字符</strong>处理，因此要用两个反斜杠才能表示一个。</li><li>一旦以r也就是只读的方式打开文件，后面则不允许写数据，否则会出错，一定要保持一致！</li></ul></li></ol><h3 id="二、fprintf-函数"><a href="#二、fprintf-函数" class="headerlink" title="二、fprintf()函数"></a>二、<code>fprintf()</code>函数</h3><ol><li><p><code>fprintf()</code>函数：打开模式是写，那么可以用<strong>fprintf函数</strong>来进行写。(<strong>写入</strong>)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fprintf</span> <span class="token punctuation">(</span>FILE<span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">[</span>argument<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该函数是一个格式化写入的库函数，可以看到，除了长得和printf函数很像以外，参数也非常像，多了一个第一个参数<strong>文件指针</strong>，即第一步打开文件时得到的文件指针，后面的参数和printf一样，按照指定的格式将数据写入文件。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">fprintf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">"https://nusqx.github.io/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将字符串"https://nusqx.github.io/"以%s的格式写入fp所指向的文件中。</span><span class="token comment">//返回值为整型，如果写入成功则返回写入字符的格式，否则返回一个负数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">控制符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">%c</td><td align="center">字符</td></tr><tr><td align="center">%d 或 %i</td><td align="center">有符号十进制整数</td></tr><tr><td align="center">%e</td><td align="center">使用 e 字符的科学科学记数法（尾数和指数）</td></tr><tr><td align="center">%E</td><td align="center">使用 E 字符的科学科学记数法（尾数和指数）</td></tr><tr><td align="center">%f</td><td align="center">十进制浮点数</td></tr><tr><td align="center">%g</td><td align="center">自动选择 %e 或 %f 中合适的表示法</td></tr><tr><td align="center">%G</td><td align="center">自动选择 %E 或 %f 中合适的表示法</td></tr><tr><td align="center">%o</td><td align="center">有符号八进制</td></tr><tr><td align="center">%s</td><td align="center">字符的字符串</td></tr><tr><td align="center">%u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">%x</td><td align="center">无符号十六进制整数</td></tr><tr><td align="center">%X</td><td align="center">无符号十六进制整数（大写字母）</td></tr><tr><td align="center">%p</td><td align="center">指针地址</td></tr><tr><td align="center">%n</td><td align="center">无输出</td></tr><tr><td align="center">%</td><td align="center">字符</td></tr></tbody></table></li></ol><h3 id="三、fscanf函数"><a href="#三、fscanf函数" class="headerlink" title="三、fscanf函数"></a>三、<code>fscanf</code>函数</h3><ol><li><p><code>fscanf</code>函数：从文件里读数据。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">[</span><span class="token punctuation">,</span>argument<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第一个参数文件指针，表示读取的文件目标，其余参数和scanf一样，按照相应的格式进行读取，返回值表示读取数据的字节数。</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从fp所指向的文件中进行读数据，与空格或换行结束，将结果保存到str数组中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="center">格式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">%d</td><td align="center">读入一个十进制整数</td></tr><tr><td align="center">%i</td><td align="center">读入十进制，八进制，十六进制整数，与%d类似，但是在编译时通过数据前置或后置来区分进制，如加入“0x”则是十六进制，加入“0”则为八进制。例如串“031”使用%d时会被算作31，但是使用%i时会算作25</td></tr><tr><td align="center">%u</td><td align="center">读入一个无符号十进制整数</td></tr><tr><td align="center">%f %F %g %G</td><td align="center">用来输入实数，可以用小数形式或指数形式输入</td></tr><tr><td align="center">%x %x</td><td align="center">读入十六进制整数</td></tr><tr><td align="center">%o</td><td align="center">读入八进制整数</td></tr><tr><td align="center">%s</td><td align="center">直到遇到一个空格字符（空格字符可以是空白、换行和制表符）</td></tr><tr><td align="center">%c</td><td align="center">单个字符：读取下一个字符。如果指定了一个不为 1 的宽度 width，函数会读取 width 个字符，并通过参数传递，把它们存储在数组中连续位置。在末尾不会追加空字符</td></tr></tbody></table></li></ol><h3 id="四、fwrite-函数"><a href="#四、fwrite-函数" class="headerlink" title="四、fwrite()函数"></a>四、<code>fwrite()</code>函数</h3><ol><li><p><code>fwrite()</code>函数：写文件的函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个ptr是要写入的数据的<strong>头指针</strong>，无符号类型；</p><p>第二个参数size是<strong>大小</strong>，表示每个写入元素的大小，单位是字节；</p><p>第三个参数nmemb是<strong>个数</strong>，以上一个参数为单位的个数；</p><p>第四个参数stream就是<strong>文件指针</strong>，表示往哪里写。</p><p>返回值，如果成功执行，则返回写入元素的个数，如果不和nmemb相等，则表示出错。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>   <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"https://nusqx.github.io/"</span><span class="token punctuation">;</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span> <span class="token string">"guluyu.txt"</span> <span class="token punctuation">,</span> <span class="token string">"w"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fwrite</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将str字符串中的一个字节写入到文件中</span><span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="五、fread-函数"><a href="#五、fread-函数" class="headerlink" title="五、fread()函数"></a>五、<code>fread()</code>函数</h3><ol><li><p><code>fread()</code>函数：读文件的函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">size_t</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">size_t</span> nmemb<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数ptr表示盛放内容的<strong>首地址</strong>；</p><p>第二个参数size表示每个元素的<strong>大小</strong>，单位还是字节；</p><p>第三个参数nmem表示要读取的<strong>元素个数</strong>；</p><p>第四个参数stream表示的是<strong>文件指针</strong>，即从哪个文件中读取。</p><p>返回值则是表示读取元素的个数，与nmemb一致表示读取成功，否则失败。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>   <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* 首先打开文件，读写都可以，假设文件中已经有内容为www.dotcpp.com */</span>   fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"dotcpp.dat"</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 读取并显示数据 */</span>   <span class="token function">fread</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="六、fclose-函数"><a href="#六、fclose-函数" class="headerlink" title="六、fclose()函数"></a>六、<code>fclose()</code>函数</h3><ol><li><p><code>fclose()</code>函数：断开程序与文件关联，切断IO数据流，释放文件不在占用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fclose</span><span class="token punctuation">(</span> FILE <span class="token operator">*</span>fp <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值为<strong>整型</strong>，如成功关闭则返回0，失败则返回-1。</p></li></ol><h2 id="第十一章-C语言预处理"><a href="#第十一章-C语言预处理" class="headerlink" title="第十一章 C语言预处理"></a>第十一章 C语言预处理</h2><p>C语言提供的预处理功能有三种，分别为宏定义、文件包含和条件编译。</p><h3 id="一、宏定义define"><a href="#一、宏定义define" class="headerlink" title="一、宏定义define"></a>一、宏定义<code>define</code></h3><ol><li><p>用一个标识符来表示一个字符串，称为“宏”，被定义为“宏”的标识符称为“宏名”。</p></li><li><p>在编译预处理时，对程序中所有出现的宏名，都用宏定义中的字符串去代换，这称为“宏代换”或“宏展开”。宏定义是由源程序中的宏定义命令完成的，宏代换是由预处理程序自动完成的。</p></li><li><p>在C语言中，宏分为有参数和无参数两种。无参宏的宏名后不带参数，其定义的一般形式为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">标识符 字符串<span class="token punctuation">;</span></span></span><span class="token comment">//“define”为宏定义命令，“标识符”为所定义的宏名，“字符串”可以是常数、表达式、格式串等。</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">M</span> <span class="token expression"><span class="token punctuation">(</span>y<span class="token operator">*</span>y<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token comment">//标识符M来代替表达式(y*y+3*y)。</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>“#”表示这是一条预处理命令</p></li><li><p>在宏定义中的参数称为形式参数，在宏调用中的参数称为实际参数。对于带参数的宏，在调用中，不仅要宏展开，而且要用实参去代换形参。</p></li><li><pre><code class="c">#define 宏名(形参表) 字符串;宏名(实参表);//调用#define M(y) y*y+3*y   /*宏定义*/#define MAX(a,b) (a&gt;b)?a:bk=M(5); /*宏调用*/int x = 5, y = 9;int max = MAX(x,y);<pre class="line-numbers language-none"><code class="language-none">7. 宏替换相当于实现了一个函数调用的功能，而事实上，与函数调用相比，宏调用更能提高C程序的执行效率。### 二、include文件包含1. 文件包含是C预处理程序的另一个重要功能，文件包含命令行的一般形式为：   ```c   #include "文件名"   #include &lt;文件名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>文件包含命令的功能是把指定的文件插入该命令行位置取代该命令行，从而把指定的文件和当前的源程序文件连成一个源文件。</p></li><li><p>一个大的程序可以分为多个模块，由多个程序员分别编程，有些公用的符号常量或宏定义等可单独组成一个文件，在其他文件的开头用包含命令包含该文件即可使用。这样，可避免在每个文件开头都去书写那些公用量，从而节省时间，并减少出错。</p></li><li><p>文件包含说明：</p><ul><li>包含命令中的文件名可以用<strong>双引号</strong>引起来，也可以用<strong>尖括号</strong>引起来；<ul><li>区别：使用<strong>尖括号</strong>表示在包含文件目录中去查找（包含目录是由系统的环境变量进行设置的，一般为系统头文件的默认存放目录，比如Linux系统在/usr/include目录下），而不在源文件的存放目录中查找；使用<strong>双引号</strong>则表示首先在当前的源文件目录中查找，若未找到才到包含目录中去查找。用户编程时可根据自己文件所在的目录来选择某一种命令形式。</li></ul></li><li>一个include命令只能指定<strong>一个被包含文件</strong>，若有多个文件要包含，则需用多个include命令；</li><li>文件包含允许<strong>嵌套</strong>，即在一个被包含的文件中又可以包含另一个文件。</li></ul></li></ol><h3 id="三、条件编译"><a href="#三、条件编译" class="headerlink" title="三、条件编译"></a>三、条件编译</h3><ol><li><p><strong>预处理程序</strong>提供了条件编译的功能，可以按不同的条件去编译不同的程序部分，因而产生不同的<strong>目标代码文件</strong>，这对于程序的移植和调试是很有用的。<strong>条件编译</strong>可分为三种形式。</p></li><li><p>第一种形式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">标识符</span></span>程序段 <span class="token number">1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>程序段 <span class="token number">2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">//功能是如果标识符已被#define命令定义过则对程序段1进行编译；否则对程序段2进行编译。   </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有程序段2（为空），本格式中的#else可以没有，即可以写为： </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">标识符</span></span>程序段<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>第二种形式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">标识符</span></span>程序段 <span class="token number">1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>程序段 <span class="token number">2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">//“ifdef”改为“ifndef”。它的功能是如果标识符未被#define命令定义过则对程序段1进行编译，否则对程序段2进行编译。这与第一种形式的功能正好相反。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第三种形式如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">常量表达式</span></span>程序段 <span class="token number">1</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>程序段 <span class="token number">2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token comment">//功能是如果常量表达式的值为真（非0），则对程序段1进行编译，否则对程序段2进行编译。因此可以使程序在不同的条件下完成不同的功能。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="四、其他预处理命令"><a href="#四、其他预处理命令" class="headerlink" title="四、其他预处理命令"></a>四、其他预处理命令</h3><ol><li><p><code>#error</code>：强制编译程序停止编译，它主要用于<strong>程序调试</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token expression">error<span class="token operator">-</span>message</span><span class="token comment">/*宏串error-message不用双引号引起来。遇到#error指令时，错误信息被显示，可能同时还显示编译程序作者预先定义的其他内容。*/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>#line</code>：改变<code>__LINE__</code>和<code>__FILE__</code>的内容。<code>__LINE__</code>和<code>__FILE__</code>都是编译程序中<strong>预定义</strong>的标识符。<code>__FILE__</code>的内容是当前被编译源文件的文件名。<code>__LINE__</code>的内容是当前被编译代码行的行号。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">line</span> <span class="token expression">number </span><span class="token string">"filename"</span></span><span class="token comment">//number是正整数并变成_LINE_的新值；可选的“filename”是合法文件标识符并变成__FILE__的新值。#line主要用于调试和特殊应用。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>#pragma</code>：编译程序实现时定义的指令，它允许由此向编译程序传入各种指令。</p></li></ol><p>   例如：一个编译程序可能具有支持跟踪程序执行的选项，此时可以用#pragma语句选择该功能，编译程序忽略其不支持的#pragma选项。使用#pragma预处理命令可提高C源程序对编译程序的可移植性。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">swap</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token operator">=</span>a<span class="token punctuation">;</span>a<span class="token operator">=</span>b<span class="token punctuation">;</span>b<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token comment">//宏定义，交换 </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MAX</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span><span class="token operator">&gt;</span>c<span class="token operator">?</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">)</span><span class="token operator">:</span>c</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>t<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输入两个数：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输出结果：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两个数进行交换 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><strong>一、数据类型关键字</strong></p><p><strong>a. 基本数据类型（5个）</strong></p><p>void：声明函数无返回值或无参数，声明无类型指针，显式丢弃运算结果。</p><p>char：字符型类型数据，属于整型数据的一种。</p><p>int：整型数据，通常为编译器指定的机器字长。</p><p>float：单精度浮点型数据，属于浮点数据的一种。</p><p>double：双精度浮点型数据，属于浮点数据的一种。</p><p><strong>b. 类型修饰关键字（4个）</strong></p><p>short：修饰int，短整型数据，可省略被修饰的int。</p><p>long：修饰int，长整形数据，可省略被修饰的int。</p><p>signed：修饰整型数据，有符号数据类型。</p><p>unsigned：修饰整型数据，无符号数据类型。</p><p><strong>c. 复杂类型关键字（5个）</strong></p><p>struct：结构体声明。</p><p>union：共用体声明。</p><p>enum：枚举声明。</p><p>typedef：声明类型别名。</p><p>sizeof：得到特定类型或特定类型变量的大小。</p><p><strong>d. 存储级别关键字（6个）</strong></p><p>auto：指定为自动变量，由编译器自动分配及释放，通常在栈上分配。</p><p>static：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部。</p><p>register：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数。</p><p>extern：指定对应变量为外部变量，即在另外的目标文件中定义，可以认为是约定由另外文件声明的对象的一个“引用“</p><p>const：与volatile合称“cv特性”，指定变量不可被当前线程/进程改变（但有可能被系统或其他线程/进程改变）。</p><p>volatile：与const合称“cv特性”，指定变量的值有可能会被系统或其他进程/线程改变，强制编译器每次从内存中取得该变量的值。</p><p><strong>二、流程控制关键字</strong></p><p><strong>a. 跳转结构（4个）</strong></p><p>return：用在函数体中，返回特定值（或者是void值，即不返回值）。</p><p>continue：结束当前循环，开始下一轮循环。</p><p>break：跳出当前循环或switch结构。</p><p>goto：无条件跳转语句。</p><p><strong>b. 分支结构（5个）</strong></p><p>if：条件语句。</p><p>else：条件语句否定分支（与if连用）。</p><p>switch：开关语句（多重分支语句）。</p><p>case：开关语句中的分支标记。</p><p>default：开关语句中的“其他”分治，可选。</p><p><strong>c. 循环结构（3个）</strong></p><p>for：for循环结构，for(1;2;3)4;的执行顺序为1-&gt;2-&gt;4-&gt;3-&gt;2…循环，其中2为循环条件。</p><p>do：do循环结构，do 1 while(2);的执行顺序是1-&gt;2-&gt;1…循环，2为循环条件。</p><p>while：while循环结构，while(1) 2;的执行顺序是1-&gt;2-&gt;1…循环，1为循环条件。</p><p>以上循环语句，当循环条件表达式为真则继续循环，为假则跳出循环。</p><p><strong>注：</strong></p><ol><li><p>C语言中没有字符串即string类型，所以要想在C语言中使用字符串，需要使用字符数组表示，而相关的字符串处理函数就要在头文件里定义#include&lt;string.h&gt;（引用）。</p></li><li><p>main也不是关键字，仅仅是编译器指定的函数入口而已。</p></li><li><p>include也不是关键字，而是通过#打头的预处理命令而已。</p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C语言 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/24/hello-world/"/>
      <url>/2018/09/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="插入pdf"><a href="#插入pdf" class="headerlink" title="插入pdf"></a>插入pdf</h3><pre class="line-numbers language-none"><code class="language-none">{% pdf /pdf/xxx.pdf %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h3><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol><h3 id="hexo中使用思维导图"><a href="#hexo中使用思维导图" class="headerlink" title="hexo中使用思维导图"></a>hexo中使用思维导图</h3><p>使用 Hexo 的 pullquote 将思维导图的内容包裹起来，mindmap 是思维导图渲染的标志，尺寸有三种规格：</p><ul><li>mindmap-sm</li><li>mindmap-md</li><li>mindmap-lg</li></ul><blockquote class="pullquote mindmap mindmap-sm"><ul><li><a href="https://hunterx.xyz/use-mindmap-in-hexo.html">在 Hexo 中使用思维导图</a><ul><li>前言</li><li>操作指南<ul><li>准备需要的文件</li><li>为主题添加 CSS/JS 文件</li></ul></li><li>使用方法<ul><li>左分支</li></ul></li></ul></li></ul></blockquote><blockquote><div class="row">    <embed src="/pdf/此处添加文档.pdf" width="100%" height="550" type="application/pdf"></div></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
